
Water_Reservoir_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d24  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08006ec4  08006ec4  00007ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007234  08007234  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007234  08007234  00008234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800723c  0800723c  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800723c  0800723c  0000823c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007240  08007240  00008240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007244  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  20000068  080072ac  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  080072ac  0000943c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea05  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fda  00000000  00000000  00017a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00019a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aee  00000000  00000000  0001a860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ab4  00000000  00000000  0001b34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010156  00000000  00000000  00032e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099b8e  00000000  00000000  00042f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dcae6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041bc  00000000  00000000  000dcb2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000e0ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006eac 	.word	0x08006eac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08006eac 	.word	0x08006eac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96a 	b.w	8000d58 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14e      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	458c      	cmp	ip, r1
 8000aac:	4686      	mov	lr, r0
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	d962      	bls.n	8000b7a <__udivmoddi4+0xde>
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	4091      	lsls	r1, r2
 8000abc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ace:	fa1f f68c 	uxth.w	r6, ip
 8000ad2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ada:	fb07 1114 	mls	r1, r7, r4, r1
 8000ade:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae2:	fb04 f106 	mul.w	r1, r4, r6
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f104 30ff 	add.w	r0, r4, #4294967295
 8000af2:	f080 8112 	bcs.w	8000d1a <__udivmoddi4+0x27e>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 810f 	bls.w	8000d1a <__udivmoddi4+0x27e>
 8000afc:	3c02      	subs	r4, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a59      	subs	r1, r3, r1
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb00 f606 	mul.w	r6, r0, r6
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x94>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b22:	f080 80fc 	bcs.w	8000d1e <__udivmoddi4+0x282>
 8000b26:	429e      	cmp	r6, r3
 8000b28:	f240 80f9 	bls.w	8000d1e <__udivmoddi4+0x282>
 8000b2c:	4463      	add	r3, ip
 8000b2e:	3802      	subs	r0, #2
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b36:	2100      	movs	r1, #0
 8000b38:	b11d      	cbz	r5, 8000b42 <__udivmoddi4+0xa6>
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d905      	bls.n	8000b56 <__udivmoddi4+0xba>
 8000b4a:	b10d      	cbz	r5, 8000b50 <__udivmoddi4+0xb4>
 8000b4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4608      	mov	r0, r1
 8000b54:	e7f5      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b56:	fab3 f183 	clz	r1, r3
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	d146      	bne.n	8000bec <__udivmoddi4+0x150>
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	d302      	bcc.n	8000b68 <__udivmoddi4+0xcc>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f0c0 80f0 	bcc.w	8000d48 <__udivmoddi4+0x2ac>
 8000b68:	1a86      	subs	r6, r0, r2
 8000b6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6e:	2001      	movs	r0, #1
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0e6      	beq.n	8000b42 <__udivmoddi4+0xa6>
 8000b74:	e9c5 6300 	strd	r6, r3, [r5]
 8000b78:	e7e3      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	f040 8090 	bne.w	8000ca0 <__udivmoddi4+0x204>
 8000b80:	eba1 040c 	sub.w	r4, r1, ip
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa1f f78c 	uxth.w	r7, ip
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b96:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x11c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x11a>
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	1a1c      	subs	r4, r3, r0
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb00 f707 	mul.w	r7, r0, r7
 8000bce:	429f      	cmp	r7, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x148>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x146>
 8000bdc:	429f      	cmp	r7, r3
 8000bde:	f200 80b0 	bhi.w	8000d42 <__udivmoddi4+0x2a6>
 8000be2:	4620      	mov	r0, r4
 8000be4:	1bdb      	subs	r3, r3, r7
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	e7a5      	b.n	8000b38 <__udivmoddi4+0x9c>
 8000bec:	f1c1 0620 	rsb	r6, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000c00:	ea43 030c 	orr.w	r3, r3, ip
 8000c04:	40f4      	lsrs	r4, r6
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	0c38      	lsrs	r0, r7, #16
 8000c0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c10:	fbb4 fef0 	udiv	lr, r4, r0
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	fb00 441e 	mls	r4, r0, lr, r4
 8000c1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x1a6>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c32:	f080 8084 	bcs.w	8000d3e <__udivmoddi4+0x2a2>
 8000c36:	45a1      	cmp	r9, r4
 8000c38:	f240 8081 	bls.w	8000d3e <__udivmoddi4+0x2a2>
 8000c3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	eba4 0409 	sub.w	r4, r4, r9
 8000c46:	fa1f f983 	uxth.w	r9, r3
 8000c4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x1d2>
 8000c5e:	193c      	adds	r4, r7, r4
 8000c60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c64:	d267      	bcs.n	8000d36 <__udivmoddi4+0x29a>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0x29a>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c72:	fba0 9302 	umull	r9, r3, r0, r2
 8000c76:	eba4 040c 	sub.w	r4, r4, ip
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	46ce      	mov	lr, r9
 8000c7e:	469c      	mov	ip, r3
 8000c80:	d351      	bcc.n	8000d26 <__udivmoddi4+0x28a>
 8000c82:	d04e      	beq.n	8000d22 <__udivmoddi4+0x286>
 8000c84:	b155      	cbz	r5, 8000c9c <__udivmoddi4+0x200>
 8000c86:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c92:	40cb      	lsrs	r3, r1
 8000c94:	431e      	orrs	r6, r3
 8000c96:	40cc      	lsrs	r4, r1
 8000c98:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e750      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f107 	mul.w	r1, r0, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x24c>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cde:	d22c      	bcs.n	8000d3a <__udivmoddi4+0x29e>
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d92a      	bls.n	8000d3a <__udivmoddi4+0x29e>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb01 f307 	mul.w	r3, r1, r7
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x276>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d08:	d213      	bcs.n	8000d32 <__udivmoddi4+0x296>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d911      	bls.n	8000d32 <__udivmoddi4+0x296>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4464      	add	r4, ip
 8000d12:	1ae4      	subs	r4, r4, r3
 8000d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d18:	e739      	b.n	8000b8e <__udivmoddi4+0xf2>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	e6f0      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e706      	b.n	8000b30 <__udivmoddi4+0x94>
 8000d22:	45c8      	cmp	r8, r9
 8000d24:	d2ae      	bcs.n	8000c84 <__udivmoddi4+0x1e8>
 8000d26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7a8      	b.n	8000c84 <__udivmoddi4+0x1e8>
 8000d32:	4631      	mov	r1, r6
 8000d34:	e7ed      	b.n	8000d12 <__udivmoddi4+0x276>
 8000d36:	4603      	mov	r3, r0
 8000d38:	e799      	b.n	8000c6e <__udivmoddi4+0x1d2>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e7d4      	b.n	8000ce8 <__udivmoddi4+0x24c>
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1a6>
 8000d42:	4463      	add	r3, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	e74d      	b.n	8000be4 <__udivmoddi4+0x148>
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e70f      	b.n	8000b70 <__udivmoddi4+0xd4>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	e730      	b.n	8000bb8 <__udivmoddi4+0x11c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <DIGITS_Display>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DIGITS_Display()
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	@ 0x28
 8000d60:	af00      	add	r7, sp, #0
	 uint8_t DIGIT_A = depth/10;
 8000d62:	4b6b      	ldr	r3, [pc, #428]	@ (8000f10 <DIGITS_Display+0x1b4>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	4a6a      	ldr	r2, [pc, #424]	@ (8000f14 <DIGITS_Display+0x1b8>)
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6e:	08db      	lsrs	r3, r3, #3
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	 uint8_t DIGIT_B = depth%10;
 8000d76:	4b66      	ldr	r3, [pc, #408]	@ (8000f10 <DIGITS_Display+0x1b4>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	4b65      	ldr	r3, [pc, #404]	@ (8000f14 <DIGITS_Display+0x1b8>)
 8000d7e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d82:	08d9      	lsrs	r1, r3, #3
 8000d84:	460b      	mov	r3, r1
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	440b      	add	r3, r1
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

//	 sprintf((char *)buffer, "\r\n%d%d", DIGIT_A, DIGIT_B);
//	 HAL_UART_Transmit(&huart6, buffer, strlen((char *)buffer), HAL_MAX_DELAY);
//	 memset(buffer, 0, sizeof(buffer));

	 uint8_t DIGITA_VAL = 0x0F & DIGIT_A; //mask off higher4 bits
 8000d94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d98:	f003 030f 	and.w	r3, r3, #15
 8000d9c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	 int Abit0 = (DIGITA_VAL ) & 1;  	// extract Abit0 of the 4-bit value
 8000da0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	623b      	str	r3, [r7, #32]
	 int Abit1 = (DIGITA_VAL >> 1) & 1;  // extract Abit1 of the 4-bit value
 8000daa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000dae:	085b      	lsrs	r3, r3, #1
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	61fb      	str	r3, [r7, #28]
	 int Abit2 = (DIGITA_VAL >> 2) & 1;  // extract Abit2 of the 4-bit value
 8000db8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	61bb      	str	r3, [r7, #24]
	 int Abit3 = (DIGITA_VAL >> 3) & 1;  // extract Abit3 of the 4-bit value
 8000dc6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000dca:	08db      	lsrs	r3, r3, #3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]

	 uint8_t DIGITB_VAL = 0x0F & DIGIT_B; //mask off higher4 bits
 8000dd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000dd8:	f003 030f 	and.w	r3, r3, #15
 8000ddc:	74fb      	strb	r3, [r7, #19]
	 int Bbit0 = (DIGITB_VAL ) & 1;  	// extract Bbit0 of the 4-bit value
 8000dde:	7cfb      	ldrb	r3, [r7, #19]
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
	 int Bbit1 = (DIGITB_VAL >> 1) & 1;  // extract Bbit1 of the 4-bit value
 8000de6:	7cfb      	ldrb	r3, [r7, #19]
 8000de8:	085b      	lsrs	r3, r3, #1
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	60bb      	str	r3, [r7, #8]
	 int Bbit2 = (DIGITB_VAL >> 2) & 1;  // extract Bbit2 of the 4-bit value
 8000df2:	7cfb      	ldrb	r3, [r7, #19]
 8000df4:	089b      	lsrs	r3, r3, #2
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	607b      	str	r3, [r7, #4]
	 int Bbit3 = (DIGITB_VAL >> 3) & 1;  // extract Bbit3 of the 4-bit value
 8000dfe:	7cfb      	ldrb	r3, [r7, #19]
 8000e00:	08db      	lsrs	r3, r3, #3
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	603b      	str	r3, [r7, #0]

	 if (Abit0 == (0))
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d105      	bne.n	8000e1c <DIGITS_Display+0xc0>
	 {
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A0_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2120      	movs	r1, #32
 8000e14:	4840      	ldr	r0, [pc, #256]	@ (8000f18 <DIGITS_Display+0x1bc>)
 8000e16:	f002 fdb7 	bl	8003988 <HAL_GPIO_WritePin>
 8000e1a:	e004      	b.n	8000e26 <DIGITS_Display+0xca>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A0_Pin, GPIO_PIN_SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2120      	movs	r1, #32
 8000e20:	483d      	ldr	r0, [pc, #244]	@ (8000f18 <DIGITS_Display+0x1bc>)
 8000e22:	f002 fdb1 	bl	8003988 <HAL_GPIO_WritePin>

	 }
	 if (Abit1 == (0))
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d106      	bne.n	8000e3a <DIGITS_Display+0xde>
	 {
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e32:	4839      	ldr	r0, [pc, #228]	@ (8000f18 <DIGITS_Display+0x1bc>)
 8000e34:	f002 fda8 	bl	8003988 <HAL_GPIO_WritePin>
 8000e38:	e005      	b.n	8000e46 <DIGITS_Display+0xea>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e40:	4835      	ldr	r0, [pc, #212]	@ (8000f18 <DIGITS_Display+0x1bc>)
 8000e42:	f002 fda1 	bl	8003988 <HAL_GPIO_WritePin>

	 }
	 if (Abit2 == (0))
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d106      	bne.n	8000e5a <DIGITS_Display+0xfe>
	 {
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e52:	4831      	ldr	r0, [pc, #196]	@ (8000f18 <DIGITS_Display+0x1bc>)
 8000e54:	f002 fd98 	bl	8003988 <HAL_GPIO_WritePin>
 8000e58:	e005      	b.n	8000e66 <DIGITS_Display+0x10a>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e60:	482d      	ldr	r0, [pc, #180]	@ (8000f18 <DIGITS_Display+0x1bc>)
 8000e62:	f002 fd91 	bl	8003988 <HAL_GPIO_WritePin>

	 }
	 if (Abit3 == (0))
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d106      	bne.n	8000e7a <DIGITS_Display+0x11e>
	 {
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A3_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e72:	4829      	ldr	r0, [pc, #164]	@ (8000f18 <DIGITS_Display+0x1bc>)
 8000e74:	f002 fd88 	bl	8003988 <HAL_GPIO_WritePin>
 8000e78:	e005      	b.n	8000e86 <DIGITS_Display+0x12a>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A3_Pin, GPIO_PIN_SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e80:	4825      	ldr	r0, [pc, #148]	@ (8000f18 <DIGITS_Display+0x1bc>)
 8000e82:	f002 fd81 	bl	8003988 <HAL_GPIO_WritePin>

	 }


	 if (Bbit0 == (0))
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d106      	bne.n	8000e9a <DIGITS_Display+0x13e>
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B0_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e92:	4822      	ldr	r0, [pc, #136]	@ (8000f1c <DIGITS_Display+0x1c0>)
 8000e94:	f002 fd78 	bl	8003988 <HAL_GPIO_WritePin>
 8000e98:	e005      	b.n	8000ea6 <DIGITS_Display+0x14a>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B0_Pin, GPIO_PIN_SET);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ea0:	481e      	ldr	r0, [pc, #120]	@ (8000f1c <DIGITS_Display+0x1c0>)
 8000ea2:	f002 fd71 	bl	8003988 <HAL_GPIO_WritePin>

	 }
	 if (Bbit1 == (0))
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d106      	bne.n	8000eba <DIGITS_Display+0x15e>
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B1_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000eb2:	481a      	ldr	r0, [pc, #104]	@ (8000f1c <DIGITS_Display+0x1c0>)
 8000eb4:	f002 fd68 	bl	8003988 <HAL_GPIO_WritePin>
 8000eb8:	e005      	b.n	8000ec6 <DIGITS_Display+0x16a>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B1_Pin, GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ec0:	4816      	ldr	r0, [pc, #88]	@ (8000f1c <DIGITS_Display+0x1c0>)
 8000ec2:	f002 fd61 	bl	8003988 <HAL_GPIO_WritePin>

	 }
	 if (Bbit2 == (0))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d106      	bne.n	8000eda <DIGITS_Display+0x17e>
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B2_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ed2:	4812      	ldr	r0, [pc, #72]	@ (8000f1c <DIGITS_Display+0x1c0>)
 8000ed4:	f002 fd58 	bl	8003988 <HAL_GPIO_WritePin>
 8000ed8:	e005      	b.n	8000ee6 <DIGITS_Display+0x18a>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B2_Pin, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ee0:	480e      	ldr	r0, [pc, #56]	@ (8000f1c <DIGITS_Display+0x1c0>)
 8000ee2:	f002 fd51 	bl	8003988 <HAL_GPIO_WritePin>

	 }
	 if (Bbit3 == (0))
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d106      	bne.n	8000efa <DIGITS_Display+0x19e>
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B3_Pin, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ef2:	480a      	ldr	r0, [pc, #40]	@ (8000f1c <DIGITS_Display+0x1c0>)
 8000ef4:	f002 fd48 	bl	8003988 <HAL_GPIO_WritePin>
	 else
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B3_Pin, GPIO_PIN_SET);

	 }
}
 8000ef8:	e005      	b.n	8000f06 <DIGITS_Display+0x1aa>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B3_Pin, GPIO_PIN_SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f00:	4806      	ldr	r0, [pc, #24]	@ (8000f1c <DIGITS_Display+0x1c0>)
 8000f02:	f002 fd41 	bl	8003988 <HAL_GPIO_WritePin>
}
 8000f06:	bf00      	nop
 8000f08:	3728      	adds	r7, #40	@ 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200000a4 	.word	0x200000a4
 8000f14:	cccccccd 	.word	0xcccccccd
 8000f18:	40020400 	.word	0x40020400
 8000f1c:	40020800 	.word	0x40020800

08000f20 <ADC_Select_CH>:

void ADC_Select_CH(int CH) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
	switch(CH)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	f200 814b 	bhi.w	80011d4 <ADC_Select_CH+0x2b4>
 8000f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f44 <ADC_Select_CH+0x24>)
 8000f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f44:	08000f85 	.word	0x08000f85
 8000f48:	08000fa7 	.word	0x08000fa7
 8000f4c:	08000fc9 	.word	0x08000fc9
 8000f50:	08000feb 	.word	0x08000feb
 8000f54:	0800100d 	.word	0x0800100d
 8000f58:	0800102f 	.word	0x0800102f
 8000f5c:	08001051 	.word	0x08001051
 8000f60:	08001073 	.word	0x08001073
 8000f64:	08001095 	.word	0x08001095
 8000f68:	080010b7 	.word	0x080010b7
 8000f6c:	080010d7 	.word	0x080010d7
 8000f70:	080010f7 	.word	0x080010f7
 8000f74:	08001117 	.word	0x08001117
 8000f78:	08001137 	.word	0x08001137
 8000f7c:	08001157 	.word	0x08001157
 8000f80:	08001177 	.word	0x08001177
	{
	case 0:
	sConfig.Channel = ADC_CHANNEL_0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	4619      	mov	r1, r3
 8000f92:	4892      	ldr	r0, [pc, #584]	@ (80011dc <ADC_Select_CH+0x2bc>)
 8000f94:	f001 ff9a 	bl	8002ecc <HAL_ADC_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 80fb 	beq.w	8001196 <ADC_Select_CH+0x276>
	{
	Error_Handler();
 8000fa0:	f001 fa6e 	bl	8002480 <Error_Handler>
	}
	break;
 8000fa4:	e0f7      	b.n	8001196 <ADC_Select_CH+0x276>
	case 1:
	sConfig.Channel = ADC_CHANNEL_1;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000faa:	2301      	movs	r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4889      	ldr	r0, [pc, #548]	@ (80011dc <ADC_Select_CH+0x2bc>)
 8000fb6:	f001 ff89 	bl	8002ecc <HAL_ADC_ConfigChannel>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80ec 	beq.w	800119a <ADC_Select_CH+0x27a>
	{
	Error_Handler();
 8000fc2:	f001 fa5d 	bl	8002480 <Error_Handler>
	}
	break;
 8000fc6:	e0e8      	b.n	800119a <ADC_Select_CH+0x27a>
	case 2:
	sConfig.Channel = ADC_CHANNEL_2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4881      	ldr	r0, [pc, #516]	@ (80011dc <ADC_Select_CH+0x2bc>)
 8000fd8:	f001 ff78 	bl	8002ecc <HAL_ADC_ConfigChannel>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f000 80dd 	beq.w	800119e <ADC_Select_CH+0x27e>
	{
	Error_Handler();
 8000fe4:	f001 fa4c 	bl	8002480 <Error_Handler>
	}
	break;
 8000fe8:	e0d9      	b.n	800119e <ADC_Select_CH+0x27e>
	case 3:
	sConfig.Channel = ADC_CHANNEL_3;
 8000fea:	2303      	movs	r3, #3
 8000fec:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4878      	ldr	r0, [pc, #480]	@ (80011dc <ADC_Select_CH+0x2bc>)
 8000ffa:	f001 ff67 	bl	8002ecc <HAL_ADC_ConfigChannel>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	f000 80ce 	beq.w	80011a2 <ADC_Select_CH+0x282>
	{
	Error_Handler();
 8001006:	f001 fa3b 	bl	8002480 <Error_Handler>
	}
	break;
 800100a:	e0ca      	b.n	80011a2 <ADC_Select_CH+0x282>
	case 4:
	sConfig.Channel = ADC_CHANNEL_4;
 800100c:	2304      	movs	r3, #4
 800100e:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001010:	2301      	movs	r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	4619      	mov	r1, r3
 800101a:	4870      	ldr	r0, [pc, #448]	@ (80011dc <ADC_Select_CH+0x2bc>)
 800101c:	f001 ff56 	bl	8002ecc <HAL_ADC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 80bf 	beq.w	80011a6 <ADC_Select_CH+0x286>
	{
	Error_Handler();
 8001028:	f001 fa2a 	bl	8002480 <Error_Handler>
	}
	break;
 800102c:	e0bb      	b.n	80011a6 <ADC_Select_CH+0x286>
	case 5:
	sConfig.Channel = ADC_CHANNEL_5;
 800102e:	2305      	movs	r3, #5
 8001030:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001032:	2301      	movs	r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	4619      	mov	r1, r3
 800103c:	4867      	ldr	r0, [pc, #412]	@ (80011dc <ADC_Select_CH+0x2bc>)
 800103e:	f001 ff45 	bl	8002ecc <HAL_ADC_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 80b0 	beq.w	80011aa <ADC_Select_CH+0x28a>
	{
	Error_Handler();
 800104a:	f001 fa19 	bl	8002480 <Error_Handler>
	}
	break;
 800104e:	e0ac      	b.n	80011aa <ADC_Select_CH+0x28a>
	case 6:
	sConfig.Channel = ADC_CHANNEL_6;
 8001050:	2306      	movs	r3, #6
 8001052:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001054:	2301      	movs	r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	4619      	mov	r1, r3
 800105e:	485f      	ldr	r0, [pc, #380]	@ (80011dc <ADC_Select_CH+0x2bc>)
 8001060:	f001 ff34 	bl	8002ecc <HAL_ADC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 80a1 	beq.w	80011ae <ADC_Select_CH+0x28e>
	{
	Error_Handler();
 800106c:	f001 fa08 	bl	8002480 <Error_Handler>
	}
	break;
 8001070:	e09d      	b.n	80011ae <ADC_Select_CH+0x28e>
	case 7:
	sConfig.Channel = ADC_CHANNEL_7;
 8001072:	2307      	movs	r3, #7
 8001074:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107a:	f107 0308 	add.w	r3, r7, #8
 800107e:	4619      	mov	r1, r3
 8001080:	4856      	ldr	r0, [pc, #344]	@ (80011dc <ADC_Select_CH+0x2bc>)
 8001082:	f001 ff23 	bl	8002ecc <HAL_ADC_ConfigChannel>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 8092 	beq.w	80011b2 <ADC_Select_CH+0x292>
	{
	Error_Handler();
 800108e:	f001 f9f7 	bl	8002480 <Error_Handler>
	}
	break;
 8001092:	e08e      	b.n	80011b2 <ADC_Select_CH+0x292>
	case 8:
	sConfig.Channel = ADC_CHANNEL_8;
 8001094:	2308      	movs	r3, #8
 8001096:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001098:	2301      	movs	r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	4619      	mov	r1, r3
 80010a2:	484e      	ldr	r0, [pc, #312]	@ (80011dc <ADC_Select_CH+0x2bc>)
 80010a4:	f001 ff12 	bl	8002ecc <HAL_ADC_ConfigChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 8083 	beq.w	80011b6 <ADC_Select_CH+0x296>
	{
	Error_Handler();
 80010b0:	f001 f9e6 	bl	8002480 <Error_Handler>
	}
	break;
 80010b4:	e07f      	b.n	80011b6 <ADC_Select_CH+0x296>
	case 9:
	sConfig.Channel = ADC_CHANNEL_9;
 80010b6:	2309      	movs	r3, #9
 80010b8:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	4619      	mov	r1, r3
 80010c4:	4845      	ldr	r0, [pc, #276]	@ (80011dc <ADC_Select_CH+0x2bc>)
 80010c6:	f001 ff01 	bl	8002ecc <HAL_ADC_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d074      	beq.n	80011ba <ADC_Select_CH+0x29a>
	{
	Error_Handler();
 80010d0:	f001 f9d6 	bl	8002480 <Error_Handler>
	}
	break;
 80010d4:	e071      	b.n	80011ba <ADC_Select_CH+0x29a>
	case 10:
	sConfig.Channel = ADC_CHANNEL_10;
 80010d6:	230a      	movs	r3, #10
 80010d8:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	4619      	mov	r1, r3
 80010e4:	483d      	ldr	r0, [pc, #244]	@ (80011dc <ADC_Select_CH+0x2bc>)
 80010e6:	f001 fef1 	bl	8002ecc <HAL_ADC_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d066      	beq.n	80011be <ADC_Select_CH+0x29e>
	{
	Error_Handler();
 80010f0:	f001 f9c6 	bl	8002480 <Error_Handler>
	}
	break;
 80010f4:	e063      	b.n	80011be <ADC_Select_CH+0x29e>
	case 11:
	sConfig.Channel = ADC_CHANNEL_11;
 80010f6:	230b      	movs	r3, #11
 80010f8:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80010fa:	2301      	movs	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	4619      	mov	r1, r3
 8001104:	4835      	ldr	r0, [pc, #212]	@ (80011dc <ADC_Select_CH+0x2bc>)
 8001106:	f001 fee1 	bl	8002ecc <HAL_ADC_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d058      	beq.n	80011c2 <ADC_Select_CH+0x2a2>
	{
	Error_Handler();
 8001110:	f001 f9b6 	bl	8002480 <Error_Handler>
	}
	break;
 8001114:	e055      	b.n	80011c2 <ADC_Select_CH+0x2a2>
	case 12:
	sConfig.Channel = ADC_CHANNEL_12;
 8001116:	230c      	movs	r3, #12
 8001118:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800111a:	2301      	movs	r3, #1
 800111c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	4619      	mov	r1, r3
 8001124:	482d      	ldr	r0, [pc, #180]	@ (80011dc <ADC_Select_CH+0x2bc>)
 8001126:	f001 fed1 	bl	8002ecc <HAL_ADC_ConfigChannel>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d04a      	beq.n	80011c6 <ADC_Select_CH+0x2a6>
	{
	Error_Handler();
 8001130:	f001 f9a6 	bl	8002480 <Error_Handler>
	}
	break;
 8001134:	e047      	b.n	80011c6 <ADC_Select_CH+0x2a6>
	case 13:
	sConfig.Channel = ADC_CHANNEL_13;
 8001136:	230d      	movs	r3, #13
 8001138:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800113a:	2301      	movs	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	4619      	mov	r1, r3
 8001144:	4825      	ldr	r0, [pc, #148]	@ (80011dc <ADC_Select_CH+0x2bc>)
 8001146:	f001 fec1 	bl	8002ecc <HAL_ADC_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d03c      	beq.n	80011ca <ADC_Select_CH+0x2aa>
	{
	Error_Handler();
 8001150:	f001 f996 	bl	8002480 <Error_Handler>
	}
	break;
 8001154:	e039      	b.n	80011ca <ADC_Select_CH+0x2aa>
	case 14:
	sConfig.Channel = ADC_CHANNEL_14;
 8001156:	230e      	movs	r3, #14
 8001158:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800115a:	2301      	movs	r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	4619      	mov	r1, r3
 8001164:	481d      	ldr	r0, [pc, #116]	@ (80011dc <ADC_Select_CH+0x2bc>)
 8001166:	f001 feb1 	bl	8002ecc <HAL_ADC_ConfigChannel>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d02e      	beq.n	80011ce <ADC_Select_CH+0x2ae>
	{
	Error_Handler();
 8001170:	f001 f986 	bl	8002480 <Error_Handler>
	}
	break;
 8001174:	e02b      	b.n	80011ce <ADC_Select_CH+0x2ae>
	case 15:
	sConfig.Channel = ADC_CHANNEL_15;
 8001176:	230f      	movs	r3, #15
 8001178:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800117a:	2301      	movs	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	4619      	mov	r1, r3
 8001184:	4815      	ldr	r0, [pc, #84]	@ (80011dc <ADC_Select_CH+0x2bc>)
 8001186:	f001 fea1 	bl	8002ecc <HAL_ADC_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d020      	beq.n	80011d2 <ADC_Select_CH+0x2b2>
	{
	Error_Handler();
 8001190:	f001 f976 	bl	8002480 <Error_Handler>
	}
	break;
 8001194:	e01d      	b.n	80011d2 <ADC_Select_CH+0x2b2>
	break;
 8001196:	bf00      	nop
 8001198:	e01c      	b.n	80011d4 <ADC_Select_CH+0x2b4>
	break;
 800119a:	bf00      	nop
 800119c:	e01a      	b.n	80011d4 <ADC_Select_CH+0x2b4>
	break;
 800119e:	bf00      	nop
 80011a0:	e018      	b.n	80011d4 <ADC_Select_CH+0x2b4>
	break;
 80011a2:	bf00      	nop
 80011a4:	e016      	b.n	80011d4 <ADC_Select_CH+0x2b4>
	break;
 80011a6:	bf00      	nop
 80011a8:	e014      	b.n	80011d4 <ADC_Select_CH+0x2b4>
	break;
 80011aa:	bf00      	nop
 80011ac:	e012      	b.n	80011d4 <ADC_Select_CH+0x2b4>
	break;
 80011ae:	bf00      	nop
 80011b0:	e010      	b.n	80011d4 <ADC_Select_CH+0x2b4>
	break;
 80011b2:	bf00      	nop
 80011b4:	e00e      	b.n	80011d4 <ADC_Select_CH+0x2b4>
	break;
 80011b6:	bf00      	nop
 80011b8:	e00c      	b.n	80011d4 <ADC_Select_CH+0x2b4>
	break;
 80011ba:	bf00      	nop
 80011bc:	e00a      	b.n	80011d4 <ADC_Select_CH+0x2b4>
	break;
 80011be:	bf00      	nop
 80011c0:	e008      	b.n	80011d4 <ADC_Select_CH+0x2b4>
	break;
 80011c2:	bf00      	nop
 80011c4:	e006      	b.n	80011d4 <ADC_Select_CH+0x2b4>
	break;
 80011c6:	bf00      	nop
 80011c8:	e004      	b.n	80011d4 <ADC_Select_CH+0x2b4>
	break;
 80011ca:	bf00      	nop
 80011cc:	e002      	b.n	80011d4 <ADC_Select_CH+0x2b4>
	break;
 80011ce:	bf00      	nop
 80011d0:	e000      	b.n	80011d4 <ADC_Select_CH+0x2b4>
	break;
 80011d2:	bf00      	nop
	}
}
 80011d4:	bf00      	nop
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200000f4 	.word	0x200000f4

080011e0 <user_input>:

void user_input () {
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af02      	add	r7, sp, #8
		sprintf((char*)buffer, "\r\nSETUP Mode");
 80011e6:	4993      	ldr	r1, [pc, #588]	@ (8001434 <user_input+0x254>)
 80011e8:	4893      	ldr	r0, [pc, #588]	@ (8001438 <user_input+0x258>)
 80011ea:	f005 f9bf 	bl	800656c <siprintf>
		HAL_UART_Transmit(&huart6, buffer, strlen((char *)buffer), HAL_MAX_DELAY);
 80011ee:	4892      	ldr	r0, [pc, #584]	@ (8001438 <user_input+0x258>)
 80011f0:	f7fe fff6 	bl	80001e0 <strlen>
 80011f4:	4603      	mov	r3, r0
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
 80011fc:	498e      	ldr	r1, [pc, #568]	@ (8001438 <user_input+0x258>)
 80011fe:	488f      	ldr	r0, [pc, #572]	@ (800143c <user_input+0x25c>)
 8001200:	f004 f926 	bl	8005450 <HAL_UART_Transmit>
		memset(buffer, 0, sizeof(buffer));
 8001204:	2240      	movs	r2, #64	@ 0x40
 8001206:	2100      	movs	r1, #0
 8001208:	488b      	ldr	r0, [pc, #556]	@ (8001438 <user_input+0x258>)
 800120a:	f005 f9cf 	bl	80065ac <memset>
		for (int i = 0; i < 4; i++) {
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	e067      	b.n	80012e4 <user_input+0x104>
			single_digit = 1;
 8001214:	4b8a      	ldr	r3, [pc, #552]	@ (8001440 <user_input+0x260>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]
			rcv_intpt_flag = 00;
 800121a:	4b8a      	ldr	r3, [pc, #552]	@ (8001444 <user_input+0x264>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, double_byte, 1);
 8001220:	2201      	movs	r2, #1
 8001222:	4989      	ldr	r1, [pc, #548]	@ (8001448 <user_input+0x268>)
 8001224:	4885      	ldr	r0, [pc, #532]	@ (800143c <user_input+0x25c>)
 8001226:	f004 f99e 	bl	8005566 <HAL_UART_Receive_IT>
			sprintf((char*)buffer, "\n\r\nEnter Pipeline Choice (0 = INLET, 1-3 = ZONES): ");
 800122a:	4988      	ldr	r1, [pc, #544]	@ (800144c <user_input+0x26c>)
 800122c:	4882      	ldr	r0, [pc, #520]	@ (8001438 <user_input+0x258>)
 800122e:	f005 f99d 	bl	800656c <siprintf>
			HAL_UART_Transmit(&huart6, buffer, strlen((char *)buffer), HAL_MAX_DELAY);
 8001232:	4881      	ldr	r0, [pc, #516]	@ (8001438 <user_input+0x258>)
 8001234:	f7fe ffd4 	bl	80001e0 <strlen>
 8001238:	4603      	mov	r3, r0
 800123a:	b29a      	uxth	r2, r3
 800123c:	f04f 33ff 	mov.w	r3, #4294967295
 8001240:	497d      	ldr	r1, [pc, #500]	@ (8001438 <user_input+0x258>)
 8001242:	487e      	ldr	r0, [pc, #504]	@ (800143c <user_input+0x25c>)
 8001244:	f004 f904 	bl	8005450 <HAL_UART_Transmit>
			while(rcv_intpt_flag == (00)) {};
 8001248:	bf00      	nop
 800124a:	4b7e      	ldr	r3, [pc, #504]	@ (8001444 <user_input+0x264>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0fa      	beq.n	800124a <user_input+0x6a>
			pipe[i] = atoi((char *)&double_byte);
 8001254:	487c      	ldr	r0, [pc, #496]	@ (8001448 <user_input+0x268>)
 8001256:	f005 f901 	bl	800645c <atoi>
 800125a:	4603      	mov	r3, r0
 800125c:	b2d9      	uxtb	r1, r3
 800125e:	4a7c      	ldr	r2, [pc, #496]	@ (8001450 <user_input+0x270>)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	460a      	mov	r2, r1
 8001266:	701a      	strb	r2, [r3, #0]
			memset(buffer, 0, sizeof(buffer));
 8001268:	2240      	movs	r2, #64	@ 0x40
 800126a:	2100      	movs	r1, #0
 800126c:	4872      	ldr	r0, [pc, #456]	@ (8001438 <user_input+0x258>)
 800126e:	f005 f99d 	bl	80065ac <memset>
			memset(double_byte, 0, sizeof(double_byte));
 8001272:	2202      	movs	r2, #2
 8001274:	2100      	movs	r1, #0
 8001276:	4874      	ldr	r0, [pc, #464]	@ (8001448 <user_input+0x268>)
 8001278:	f005 f998 	bl	80065ac <memset>

			rcv_intpt_flag = 00;
 800127c:	4b71      	ldr	r3, [pc, #452]	@ (8001444 <user_input+0x264>)
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, double_byte, 1);
 8001282:	2201      	movs	r2, #1
 8001284:	4970      	ldr	r1, [pc, #448]	@ (8001448 <user_input+0x268>)
 8001286:	486d      	ldr	r0, [pc, #436]	@ (800143c <user_input+0x25c>)
 8001288:	f004 f96d 	bl	8005566 <HAL_UART_Receive_IT>
			sprintf((char*)buffer, "\r\nEnter Pump PWM (0 = INLET, 1-3 = ZONES): ");
 800128c:	4971      	ldr	r1, [pc, #452]	@ (8001454 <user_input+0x274>)
 800128e:	486a      	ldr	r0, [pc, #424]	@ (8001438 <user_input+0x258>)
 8001290:	f005 f96c 	bl	800656c <siprintf>
			HAL_UART_Transmit(&huart6, buffer, strlen((char *)buffer), HAL_MAX_DELAY);
 8001294:	4868      	ldr	r0, [pc, #416]	@ (8001438 <user_input+0x258>)
 8001296:	f7fe ffa3 	bl	80001e0 <strlen>
 800129a:	4603      	mov	r3, r0
 800129c:	b29a      	uxth	r2, r3
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	4965      	ldr	r1, [pc, #404]	@ (8001438 <user_input+0x258>)
 80012a4:	4865      	ldr	r0, [pc, #404]	@ (800143c <user_input+0x25c>)
 80012a6:	f004 f8d3 	bl	8005450 <HAL_UART_Transmit>
			while(rcv_intpt_flag == (00)) {};
 80012aa:	bf00      	nop
 80012ac:	4b65      	ldr	r3, [pc, #404]	@ (8001444 <user_input+0x264>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0fa      	beq.n	80012ac <user_input+0xcc>
			pwm[i] = atoi((char *)&double_byte);
 80012b6:	4864      	ldr	r0, [pc, #400]	@ (8001448 <user_input+0x268>)
 80012b8:	f005 f8d0 	bl	800645c <atoi>
 80012bc:	4603      	mov	r3, r0
 80012be:	b2d9      	uxtb	r1, r3
 80012c0:	4a65      	ldr	r2, [pc, #404]	@ (8001458 <user_input+0x278>)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4413      	add	r3, r2
 80012c6:	460a      	mov	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]
			memset(buffer, 0, sizeof(buffer));
 80012ca:	2240      	movs	r2, #64	@ 0x40
 80012cc:	2100      	movs	r1, #0
 80012ce:	485a      	ldr	r0, [pc, #360]	@ (8001438 <user_input+0x258>)
 80012d0:	f005 f96c 	bl	80065ac <memset>
			memset(double_byte, 0, sizeof(double_byte));
 80012d4:	2202      	movs	r2, #2
 80012d6:	2100      	movs	r1, #0
 80012d8:	485b      	ldr	r0, [pc, #364]	@ (8001448 <user_input+0x268>)
 80012da:	f005 f967 	bl	80065ac <memset>
		for (int i = 0; i < 4; i++) {
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3301      	adds	r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	dd94      	ble.n	8001214 <user_input+0x34>
		}

		for (int i = 0; i < 4; i ++) {
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	e06a      	b.n	80013c6 <user_input+0x1e6>
			single_digit = 0;
 80012f0:	4b53      	ldr	r3, [pc, #332]	@ (8001440 <user_input+0x260>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
			rcv_intpt_flag = 00;
 80012f6:	4b53      	ldr	r3, [pc, #332]	@ (8001444 <user_input+0x264>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, double_byte, 2);
 80012fc:	2202      	movs	r2, #2
 80012fe:	4952      	ldr	r1, [pc, #328]	@ (8001448 <user_input+0x268>)
 8001300:	484e      	ldr	r0, [pc, #312]	@ (800143c <user_input+0x25c>)
 8001302:	f004 f930 	bl	8005566 <HAL_UART_Receive_IT>
			sprintf((char*)buffer, "\n\r\nEnter Start Hour (00 - 23): ");
 8001306:	4955      	ldr	r1, [pc, #340]	@ (800145c <user_input+0x27c>)
 8001308:	484b      	ldr	r0, [pc, #300]	@ (8001438 <user_input+0x258>)
 800130a:	f005 f92f 	bl	800656c <siprintf>
			HAL_UART_Transmit(&huart6, buffer, strlen((char *)buffer), HAL_MAX_DELAY);
 800130e:	484a      	ldr	r0, [pc, #296]	@ (8001438 <user_input+0x258>)
 8001310:	f7fe ff66 	bl	80001e0 <strlen>
 8001314:	4603      	mov	r3, r0
 8001316:	b29a      	uxth	r2, r3
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
 800131c:	4946      	ldr	r1, [pc, #280]	@ (8001438 <user_input+0x258>)
 800131e:	4847      	ldr	r0, [pc, #284]	@ (800143c <user_input+0x25c>)
 8001320:	f004 f896 	bl	8005450 <HAL_UART_Transmit>
			while(rcv_intpt_flag == (00)) {};
 8001324:	bf00      	nop
 8001326:	4b47      	ldr	r3, [pc, #284]	@ (8001444 <user_input+0x264>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0fa      	beq.n	8001326 <user_input+0x146>
			start_time[i] = atoi((char *)&double_byte);
 8001330:	4845      	ldr	r0, [pc, #276]	@ (8001448 <user_input+0x268>)
 8001332:	f005 f893 	bl	800645c <atoi>
 8001336:	4603      	mov	r3, r0
 8001338:	b2d9      	uxtb	r1, r3
 800133a:	4a49      	ldr	r2, [pc, #292]	@ (8001460 <user_input+0x280>)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	4413      	add	r3, r2
 8001340:	460a      	mov	r2, r1
 8001342:	701a      	strb	r2, [r3, #0]
			memset(buffer, 0, sizeof(buffer));
 8001344:	2240      	movs	r2, #64	@ 0x40
 8001346:	2100      	movs	r1, #0
 8001348:	483b      	ldr	r0, [pc, #236]	@ (8001438 <user_input+0x258>)
 800134a:	f005 f92f 	bl	80065ac <memset>
			memset(double_byte, 0, sizeof(double_byte));
 800134e:	2202      	movs	r2, #2
 8001350:	2100      	movs	r1, #0
 8001352:	483d      	ldr	r0, [pc, #244]	@ (8001448 <user_input+0x268>)
 8001354:	f005 f92a 	bl	80065ac <memset>

			rcv_intpt_flag = 00;
 8001358:	4b3a      	ldr	r3, [pc, #232]	@ (8001444 <user_input+0x264>)
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, double_byte, 2);
 800135e:	2202      	movs	r2, #2
 8001360:	4939      	ldr	r1, [pc, #228]	@ (8001448 <user_input+0x268>)
 8001362:	4836      	ldr	r0, [pc, #216]	@ (800143c <user_input+0x25c>)
 8001364:	f004 f8ff 	bl	8005566 <HAL_UART_Receive_IT>
			sprintf((char*)buffer, "\r\nEnter Stop Hour (00 - 23): ");
 8001368:	493e      	ldr	r1, [pc, #248]	@ (8001464 <user_input+0x284>)
 800136a:	4833      	ldr	r0, [pc, #204]	@ (8001438 <user_input+0x258>)
 800136c:	f005 f8fe 	bl	800656c <siprintf>
			HAL_UART_Transmit(&huart6, buffer, strlen((char *)buffer), HAL_MAX_DELAY);
 8001370:	4831      	ldr	r0, [pc, #196]	@ (8001438 <user_input+0x258>)
 8001372:	f7fe ff35 	bl	80001e0 <strlen>
 8001376:	4603      	mov	r3, r0
 8001378:	b29a      	uxth	r2, r3
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
 800137e:	492e      	ldr	r1, [pc, #184]	@ (8001438 <user_input+0x258>)
 8001380:	482e      	ldr	r0, [pc, #184]	@ (800143c <user_input+0x25c>)
 8001382:	f004 f865 	bl	8005450 <HAL_UART_Transmit>
			rcv_intpt_flag = 00;
 8001386:	4b2f      	ldr	r3, [pc, #188]	@ (8001444 <user_input+0x264>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
			while(rcv_intpt_flag == (00)) {};
 800138c:	bf00      	nop
 800138e:	4b2d      	ldr	r3, [pc, #180]	@ (8001444 <user_input+0x264>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0fa      	beq.n	800138e <user_input+0x1ae>
			stop_time[i] = atoi((char *)&double_byte);
 8001398:	482b      	ldr	r0, [pc, #172]	@ (8001448 <user_input+0x268>)
 800139a:	f005 f85f 	bl	800645c <atoi>
 800139e:	4603      	mov	r3, r0
 80013a0:	b2d9      	uxtb	r1, r3
 80013a2:	4a31      	ldr	r2, [pc, #196]	@ (8001468 <user_input+0x288>)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	4413      	add	r3, r2
 80013a8:	460a      	mov	r2, r1
 80013aa:	701a      	strb	r2, [r3, #0]
			memset(buffer, 0, sizeof(buffer));
 80013ac:	2240      	movs	r2, #64	@ 0x40
 80013ae:	2100      	movs	r1, #0
 80013b0:	4821      	ldr	r0, [pc, #132]	@ (8001438 <user_input+0x258>)
 80013b2:	f005 f8fb 	bl	80065ac <memset>
			memset(double_byte, 0, sizeof(double_byte));
 80013b6:	2202      	movs	r2, #2
 80013b8:	2100      	movs	r1, #0
 80013ba:	4823      	ldr	r0, [pc, #140]	@ (8001448 <user_input+0x268>)
 80013bc:	f005 f8f6 	bl	80065ac <memset>
		for (int i = 0; i < 4; i ++) {
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	3301      	adds	r3, #1
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	dd91      	ble.n	80012f0 <user_input+0x110>
		}

			rcv_intpt_flag = 00;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <user_input+0x264>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]

			while(rcv_intpt_flag) {};
 80013d2:	bf00      	nop
 80013d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001444 <user_input+0x264>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1fa      	bne.n	80013d4 <user_input+0x1f4>
			sprintf((char*)buffer, "\n\r\nPrinting SETUP Parameters");
 80013de:	4923      	ldr	r1, [pc, #140]	@ (800146c <user_input+0x28c>)
 80013e0:	4815      	ldr	r0, [pc, #84]	@ (8001438 <user_input+0x258>)
 80013e2:	f005 f8c3 	bl	800656c <siprintf>
			HAL_UART_Transmit(&huart6, buffer, strlen((char *)buffer), HAL_MAX_DELAY);
 80013e6:	4814      	ldr	r0, [pc, #80]	@ (8001438 <user_input+0x258>)
 80013e8:	f7fe fefa 	bl	80001e0 <strlen>
 80013ec:	4603      	mov	r3, r0
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
 80013f4:	4910      	ldr	r1, [pc, #64]	@ (8001438 <user_input+0x258>)
 80013f6:	4811      	ldr	r0, [pc, #68]	@ (800143c <user_input+0x25c>)
 80013f8:	f004 f82a 	bl	8005450 <HAL_UART_Transmit>
			memset(buffer, 0, sizeof(buffer));
 80013fc:	2240      	movs	r2, #64	@ 0x40
 80013fe:	2100      	movs	r1, #0
 8001400:	480d      	ldr	r0, [pc, #52]	@ (8001438 <user_input+0x258>)
 8001402:	f005 f8d3 	bl	80065ac <memset>
			sprintf((char*)buffer, "\r\nCurrent Wall Clock Hour: 00");
 8001406:	491a      	ldr	r1, [pc, #104]	@ (8001470 <user_input+0x290>)
 8001408:	480b      	ldr	r0, [pc, #44]	@ (8001438 <user_input+0x258>)
 800140a:	f005 f8af 	bl	800656c <siprintf>
			HAL_UART_Transmit(&huart6, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 800140e:	480a      	ldr	r0, [pc, #40]	@ (8001438 <user_input+0x258>)
 8001410:	f7fe fee6 	bl	80001e0 <strlen>
 8001414:	4603      	mov	r3, r0
 8001416:	b29a      	uxth	r2, r3
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
 800141c:	4906      	ldr	r1, [pc, #24]	@ (8001438 <user_input+0x258>)
 800141e:	4807      	ldr	r0, [pc, #28]	@ (800143c <user_input+0x25c>)
 8001420:	f004 f816 	bl	8005450 <HAL_UART_Transmit>
			memset(buffer, 0, sizeof(buffer));
 8001424:	2240      	movs	r2, #64	@ 0x40
 8001426:	2100      	movs	r1, #0
 8001428:	4803      	ldr	r0, [pc, #12]	@ (8001438 <user_input+0x258>)
 800142a:	f005 f8bf 	bl	80065ac <memset>

			for (int i = 0; i < 4; i++) {
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	e04d      	b.n	80014d0 <user_input+0x2f0>
 8001434:	08006ec4 	.word	0x08006ec4
 8001438:	200000ac 	.word	0x200000ac
 800143c:	200002a4 	.word	0x200002a4
 8001440:	20000008 	.word	0x20000008
 8001444:	200000a6 	.word	0x200000a6
 8001448:	200000ec 	.word	0x200000ec
 800144c:	08006ed4 	.word	0x08006ed4
 8001450:	20000084 	.word	0x20000084
 8001454:	08006f08 	.word	0x08006f08
 8001458:	20000088 	.word	0x20000088
 800145c:	08006f34 	.word	0x08006f34
 8001460:	20000090 	.word	0x20000090
 8001464:	08006f54 	.word	0x08006f54
 8001468:	20000094 	.word	0x20000094
 800146c:	08006f74 	.word	0x08006f74
 8001470:	08006f94 	.word	0x08006f94
				sprintf((char *)buffer, "\r\nPipeline: %u, Pump PWM: %u, Start Hour: %u, Stop Hour: %u", pipe[i], pwm[i], start_time[i], stop_time[i]);
 8001474:	4a24      	ldr	r2, [pc, #144]	@ (8001508 <user_input+0x328>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	4a23      	ldr	r2, [pc, #140]	@ (800150c <user_input+0x32c>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4413      	add	r3, r2
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461c      	mov	r4, r3
 8001488:	4a21      	ldr	r2, [pc, #132]	@ (8001510 <user_input+0x330>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	4a20      	ldr	r2, [pc, #128]	@ (8001514 <user_input+0x334>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	9100      	str	r1, [sp, #0]
 800149e:	4623      	mov	r3, r4
 80014a0:	4602      	mov	r2, r0
 80014a2:	491d      	ldr	r1, [pc, #116]	@ (8001518 <user_input+0x338>)
 80014a4:	481d      	ldr	r0, [pc, #116]	@ (800151c <user_input+0x33c>)
 80014a6:	f005 f861 	bl	800656c <siprintf>
				HAL_UART_Transmit(&huart6, buffer, strlen((char *)buffer), HAL_MAX_DELAY);
 80014aa:	481c      	ldr	r0, [pc, #112]	@ (800151c <user_input+0x33c>)
 80014ac:	f7fe fe98 	bl	80001e0 <strlen>
 80014b0:	4603      	mov	r3, r0
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
 80014b8:	4918      	ldr	r1, [pc, #96]	@ (800151c <user_input+0x33c>)
 80014ba:	4819      	ldr	r0, [pc, #100]	@ (8001520 <user_input+0x340>)
 80014bc:	f003 ffc8 	bl	8005450 <HAL_UART_Transmit>
				memset(buffer, 0, sizeof(buffer));
 80014c0:	2240      	movs	r2, #64	@ 0x40
 80014c2:	2100      	movs	r1, #0
 80014c4:	4815      	ldr	r0, [pc, #84]	@ (800151c <user_input+0x33c>)
 80014c6:	f005 f871 	bl	80065ac <memset>
			for (int i = 0; i < 4; i++) {
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3301      	adds	r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	ddce      	ble.n	8001474 <user_input+0x294>
			}

			sprintf((char*)buffer, "\n\r\nSETUP is done. Press Blue Button for RUN Mode");
 80014d6:	4913      	ldr	r1, [pc, #76]	@ (8001524 <user_input+0x344>)
 80014d8:	4810      	ldr	r0, [pc, #64]	@ (800151c <user_input+0x33c>)
 80014da:	f005 f847 	bl	800656c <siprintf>
			HAL_UART_Transmit(&huart6, buffer, strlen((char *)buffer), HAL_MAX_DELAY);
 80014de:	480f      	ldr	r0, [pc, #60]	@ (800151c <user_input+0x33c>)
 80014e0:	f7fe fe7e 	bl	80001e0 <strlen>
 80014e4:	4603      	mov	r3, r0
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ec:	490b      	ldr	r1, [pc, #44]	@ (800151c <user_input+0x33c>)
 80014ee:	480c      	ldr	r0, [pc, #48]	@ (8001520 <user_input+0x340>)
 80014f0:	f003 ffae 	bl	8005450 <HAL_UART_Transmit>
			memset(buffer, 0, sizeof(buffer));
 80014f4:	2240      	movs	r2, #64	@ 0x40
 80014f6:	2100      	movs	r1, #0
 80014f8:	4808      	ldr	r0, [pc, #32]	@ (800151c <user_input+0x33c>)
 80014fa:	f005 f857 	bl	80065ac <memset>
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}
 8001506:	bf00      	nop
 8001508:	20000084 	.word	0x20000084
 800150c:	20000088 	.word	0x20000088
 8001510:	20000090 	.word	0x20000090
 8001514:	20000094 	.word	0x20000094
 8001518:	08006fb4 	.word	0x08006fb4
 800151c:	200000ac 	.word	0x200000ac
 8001520:	200002a4 	.word	0x200002a4
 8001524:	08006ff0 	.word	0x08006ff0

08001528 <get_potentio_num>:

uint32_t get_potentio_num() {
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
	ADC_Select_CH(9);
 800152e:	2009      	movs	r0, #9
 8001530:	f7ff fcf6 	bl	8000f20 <ADC_Select_CH>
	HAL_ADC_Start(&hadc1);
 8001534:	4812      	ldr	r0, [pc, #72]	@ (8001580 <get_potentio_num+0x58>)
 8001536:	f001 fb49 	bl	8002bcc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800153a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800153e:	4810      	ldr	r0, [pc, #64]	@ (8001580 <get_potentio_num+0x58>)
 8001540:	f001 fc2b 	bl	8002d9a <HAL_ADC_PollForConversion>
	uint32_t ADC_CH9 = HAL_ADC_GetValue(&hadc1);
 8001544:	480e      	ldr	r0, [pc, #56]	@ (8001580 <get_potentio_num+0x58>)
 8001546:	f001 fcb3 	bl	8002eb0 <HAL_ADC_GetValue>
 800154a:	6078      	str	r0, [r7, #4]
//	sprintf((char*)buffer, "\n\r\n ADC_CH9: %d", ADC_CH9);
//				HAL_UART_Transmit(&huart6, buffer, strlen((char *)buffer), HAL_MAX_DELAY);
//				memset(buffer, 0, sizeof(buffer));
	HAL_ADC_Stop(&hadc1);
 800154c:	480c      	ldr	r0, [pc, #48]	@ (8001580 <get_potentio_num+0x58>)
 800154e:	f001 fbf1 	bl	8002d34 <HAL_ADC_Stop>

	return ADC_CH9/2.55;
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7fe ffde 	bl	8000514 <__aeabi_ui2d>
 8001558:	a307      	add	r3, pc, #28	@ (adr r3, 8001578 <get_potentio_num+0x50>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7ff f97d 	bl	800085c <__aeabi_ddiv>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fa5f 	bl	8000a2c <__aeabi_d2uiz>
 800156e:	4603      	mov	r3, r0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	66666666 	.word	0x66666666
 800157c:	40046666 	.word	0x40046666
 8001580:	200000f4 	.word	0x200000f4

08001584 <servo_num>:

void servo_num(uint16_t pipe_num) {
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
	if (pipe_num == 0) {
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d105      	bne.n	80015a0 <servo_num+0x1c>
		TIM2->CCR1 = 500;
 8001594:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001598:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800159c:	635a      	str	r2, [r3, #52]	@ 0x34
	} else if (pipe_num == 2) {
		TIM2->CCR1 = 1100;
	} else if (pipe_num == 3) {
		TIM2->CCR1 = 1400;
	}
}
 800159e:	e019      	b.n	80015d4 <servo_num+0x50>
	} else if (pipe_num == 1) {
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d105      	bne.n	80015b2 <servo_num+0x2e>
		TIM2->CCR1 = 800;
 80015a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015aa:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80015ae:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80015b0:	e010      	b.n	80015d4 <servo_num+0x50>
	} else if (pipe_num == 2) {
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d105      	bne.n	80015c4 <servo_num+0x40>
		TIM2->CCR1 = 1100;
 80015b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015bc:	f240 424c 	movw	r2, #1100	@ 0x44c
 80015c0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80015c2:	e007      	b.n	80015d4 <servo_num+0x50>
	} else if (pipe_num == 3) {
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d104      	bne.n	80015d4 <servo_num+0x50>
		TIM2->CCR1 = 1400;
 80015ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015ce:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 80015d2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <DC_motor_speed>:

void DC_motor_speed(uint16_t pipe_num, uint16_t pwm_num) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	460a      	mov	r2, r1
 80015ea:	80fb      	strh	r3, [r7, #6]
 80015ec:	4613      	mov	r3, r2
 80015ee:	80bb      	strh	r3, [r7, #4]
	if(pipe_num == 0) {
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d127      	bne.n	8001646 <DC_motor_speed+0x66>
		TIM3->CCR3 = 0;
 80015f6:	4b29      	ldr	r3, [pc, #164]	@ (800169c <DC_motor_speed+0xbc>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	63da      	str	r2, [r3, #60]	@ 0x3c
		if (pwm_num == 0) {
 80015fc:	88bb      	ldrh	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d109      	bne.n	8001616 <DC_motor_speed+0x36>
//			sprintf((char *)buffer, "\r\n val = %lu ", get_potentio_num()*20);
//				HAL_UART_Transmit(&huart6, buffer, strlen((char *)buffer), HAL_MAX_DELAY);
//				memset(buffer, 0, sizeof(buffer));
			TIM3->CCR1 = get_potentio_num()*20;
 8001602:	f7ff ff91 	bl	8001528 <get_potentio_num>
 8001606:	4602      	mov	r2, r0
 8001608:	4924      	ldr	r1, [pc, #144]	@ (800169c <DC_motor_speed+0xbc>)
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	634b      	str	r3, [r1, #52]	@ 0x34
			TIM3->CCR1 = 0.85*2000;
		} else if (pwm_num == 3) {
			TIM3->CCR1 = 0.99*2000;
		}
	}
}
 8001614:	e03e      	b.n	8001694 <DC_motor_speed+0xb4>
		} else if (pwm_num == 1) {
 8001616:	88bb      	ldrh	r3, [r7, #4]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d104      	bne.n	8001626 <DC_motor_speed+0x46>
			TIM3->CCR1 = 0.7*2000;
 800161c:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <DC_motor_speed+0xbc>)
 800161e:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8001622:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001624:	e036      	b.n	8001694 <DC_motor_speed+0xb4>
		} else if (pwm_num == 2) {
 8001626:	88bb      	ldrh	r3, [r7, #4]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d104      	bne.n	8001636 <DC_motor_speed+0x56>
			TIM3->CCR1 = 0.85*2000;
 800162c:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <DC_motor_speed+0xbc>)
 800162e:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8001632:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001634:	e02e      	b.n	8001694 <DC_motor_speed+0xb4>
		} else if (pwm_num == 3) {
 8001636:	88bb      	ldrh	r3, [r7, #4]
 8001638:	2b03      	cmp	r3, #3
 800163a:	d12b      	bne.n	8001694 <DC_motor_speed+0xb4>
			TIM3->CCR1 = 0.99*2000;
 800163c:	4b17      	ldr	r3, [pc, #92]	@ (800169c <DC_motor_speed+0xbc>)
 800163e:	f240 72bc 	movw	r2, #1980	@ 0x7bc
 8001642:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001644:	e026      	b.n	8001694 <DC_motor_speed+0xb4>
		TIM3->CCR3 = 0;
 8001646:	4b15      	ldr	r3, [pc, #84]	@ (800169c <DC_motor_speed+0xbc>)
 8001648:	2200      	movs	r2, #0
 800164a:	63da      	str	r2, [r3, #60]	@ 0x3c
		if (pwm_num == 0) {
 800164c:	88bb      	ldrh	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d109      	bne.n	8001666 <DC_motor_speed+0x86>
			TIM3->CCR1 = get_potentio_num()*20;
 8001652:	f7ff ff69 	bl	8001528 <get_potentio_num>
 8001656:	4602      	mov	r2, r0
 8001658:	4910      	ldr	r1, [pc, #64]	@ (800169c <DC_motor_speed+0xbc>)
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	634b      	str	r3, [r1, #52]	@ 0x34
}
 8001664:	e016      	b.n	8001694 <DC_motor_speed+0xb4>
		} else if (pwm_num == 1) {
 8001666:	88bb      	ldrh	r3, [r7, #4]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d104      	bne.n	8001676 <DC_motor_speed+0x96>
			TIM3->CCR1 = 0.7*2000;
 800166c:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <DC_motor_speed+0xbc>)
 800166e:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8001672:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001674:	e00e      	b.n	8001694 <DC_motor_speed+0xb4>
		} else if (pwm_num == 2) {
 8001676:	88bb      	ldrh	r3, [r7, #4]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d104      	bne.n	8001686 <DC_motor_speed+0xa6>
			TIM3->CCR1 = 0.85*2000;
 800167c:	4b07      	ldr	r3, [pc, #28]	@ (800169c <DC_motor_speed+0xbc>)
 800167e:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8001682:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001684:	e006      	b.n	8001694 <DC_motor_speed+0xb4>
		} else if (pwm_num == 3) {
 8001686:	88bb      	ldrh	r3, [r7, #4]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d103      	bne.n	8001694 <DC_motor_speed+0xb4>
			TIM3->CCR1 = 0.99*2000;
 800168c:	4b03      	ldr	r3, [pc, #12]	@ (800169c <DC_motor_speed+0xbc>)
 800168e:	f240 72bc 	movw	r2, #1980	@ 0x7bc
 8001692:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40000400 	.word	0x40000400

080016a0 <DC_motor_reset>:

void DC_motor_reset() {
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 0;
 80016a4:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <DC_motor_reset+0x1c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR3 = 0;
 80016aa:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <DC_motor_reset+0x1c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40000400 	.word	0x40000400

080016c0 <water_level>:

void water_level() {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	us100_Rx_flag = 00;
 80016c4:	4b28      	ldr	r3, [pc, #160]	@ (8001768 <water_level+0xa8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, us100_buffer, 2);
 80016ca:	2202      	movs	r2, #2
 80016cc:	4927      	ldr	r1, [pc, #156]	@ (800176c <water_level+0xac>)
 80016ce:	4828      	ldr	r0, [pc, #160]	@ (8001770 <water_level+0xb0>)
 80016d0:	f003 ff49 	bl	8005566 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart1, &cmd_dist, 1, HAL_MAX_DELAY);
 80016d4:	f04f 33ff 	mov.w	r3, #4294967295
 80016d8:	2201      	movs	r2, #1
 80016da:	4926      	ldr	r1, [pc, #152]	@ (8001774 <water_level+0xb4>)
 80016dc:	4824      	ldr	r0, [pc, #144]	@ (8001770 <water_level+0xb0>)
 80016de:	f003 feb7 	bl	8005450 <HAL_UART_Transmit>

	while (us100_Rx_flag == (00)) {};
 80016e2:	bf00      	nop
 80016e4:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <water_level+0xa8>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0fb      	beq.n	80016e4 <water_level+0x24>

	distance = (us100_buffer[0] << 8) | us100_buffer[1];
 80016ec:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <water_level+0xac>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	b21a      	sxth	r2, r3
 80016f4:	4b1d      	ldr	r3, [pc, #116]	@ (800176c <water_level+0xac>)
 80016f6:	785b      	ldrb	r3, [r3, #1]
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	4313      	orrs	r3, r2
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	b29a      	uxth	r2, r3
 8001700:	4b1d      	ldr	r3, [pc, #116]	@ (8001778 <water_level+0xb8>)
 8001702:	801a      	strh	r2, [r3, #0]

	if (distance >= max_distance) {
 8001704:	4b1c      	ldr	r3, [pc, #112]	@ (8001778 <water_level+0xb8>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b1c      	ldr	r3, [pc, #112]	@ (800177c <water_level+0xbc>)
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d303      	bcc.n	800171a <water_level+0x5a>
		depth = 0;
 8001712:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <water_level+0xc0>)
 8001714:	2200      	movs	r2, #0
 8001716:	801a      	strh	r2, [r3, #0]
 8001718:	e01f      	b.n	800175a <water_level+0x9a>
	} else if (distance <= min_distance) {
 800171a:	4b17      	ldr	r3, [pc, #92]	@ (8001778 <water_level+0xb8>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	b29a      	uxth	r2, r3
 8001720:	4b18      	ldr	r3, [pc, #96]	@ (8001784 <water_level+0xc4>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d803      	bhi.n	8001730 <water_level+0x70>
		depth = 100;
 8001728:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <water_level+0xc0>)
 800172a:	2264      	movs	r2, #100	@ 0x64
 800172c:	801a      	strh	r2, [r3, #0]
 800172e:	e014      	b.n	800175a <water_level+0x9a>
	} else {
		depth = ((max_distance - distance)*100/(max_distance - min_distance)); // water level in percentage
 8001730:	4b12      	ldr	r3, [pc, #72]	@ (800177c <water_level+0xbc>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b10      	ldr	r3, [pc, #64]	@ (8001778 <water_level+0xb8>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	b29b      	uxth	r3, r3
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2264      	movs	r2, #100	@ 0x64
 8001740:	fb03 f202 	mul.w	r2, r3, r2
 8001744:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <water_level+0xbc>)
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <water_level+0xc4>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	1acb      	subs	r3, r1, r3
 8001750:	fb92 f3f3 	sdiv	r3, r2, r3
 8001754:	b29a      	uxth	r2, r3
 8001756:	4b0a      	ldr	r3, [pc, #40]	@ (8001780 <water_level+0xc0>)
 8001758:	801a      	strh	r2, [r3, #0]
	}

	memset(us100_buffer, 0, sizeof(us100_buffer));
 800175a:	2202      	movs	r2, #2
 800175c:	2100      	movs	r1, #0
 800175e:	4803      	ldr	r0, [pc, #12]	@ (800176c <water_level+0xac>)
 8001760:	f004 ff24 	bl	80065ac <memset>
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	2000009f 	.word	0x2000009f
 800176c:	200000a0 	.word	0x200000a0
 8001770:	20000214 	.word	0x20000214
 8001774:	20000004 	.word	0x20000004
 8001778:	200000a2 	.word	0x200000a2
 800177c:	20000002 	.word	0x20000002
 8001780:	200000a4 	.word	0x200000a4
 8001784:	20000000 	.word	0x20000000

08001788 <get_rpm>:

uint16_t get_rpm() {
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
	uint16_t rpm = rpm_tick_count/4;
 800178e:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <get_rpm+0x24>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	80fb      	strh	r3, [r7, #6]
	rpm_tick_count = 0;
 8001796:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <get_rpm+0x24>)
 8001798:	2200      	movs	r2, #0
 800179a:	801a      	strh	r2, [r3, #0]

	return rpm;
 800179c:	88fb      	ldrh	r3, [r7, #6]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	200000a8 	.word	0x200000a8

080017b0 <run_output>:

void run_output() {
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af04      	add	r7, sp, #16
	uint16_t rpm = get_rpm();
 80017b6:	f7ff ffe7 	bl	8001788 <get_rpm>
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
	uint16_t current_hour = clock_hours - 1;
 80017be:	4b25      	ldr	r3, [pc, #148]	@ (8001854 <run_output+0xa4>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	80bb      	strh	r3, [r7, #4]

	if(empty_zone)
 80017c6:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <run_output+0xa8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d01a      	beq.n	8001804 <run_output+0x54>
	{
		sprintf((char *)buffer, "\r\n%d :   :   : %d : %d", current_hour, rpm, depth);
 80017ce:	88ba      	ldrh	r2, [r7, #4]
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	4922      	ldr	r1, [pc, #136]	@ (800185c <run_output+0xac>)
 80017d4:	8809      	ldrh	r1, [r1, #0]
 80017d6:	b289      	uxth	r1, r1
 80017d8:	9100      	str	r1, [sp, #0]
 80017da:	4921      	ldr	r1, [pc, #132]	@ (8001860 <run_output+0xb0>)
 80017dc:	4821      	ldr	r0, [pc, #132]	@ (8001864 <run_output+0xb4>)
 80017de:	f004 fec5 	bl	800656c <siprintf>
		HAL_UART_Transmit(&huart6, buffer, strlen((char *)buffer), HAL_MAX_DELAY);
 80017e2:	4820      	ldr	r0, [pc, #128]	@ (8001864 <run_output+0xb4>)
 80017e4:	f7fe fcfc 	bl	80001e0 <strlen>
 80017e8:	4603      	mov	r3, r0
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	f04f 33ff 	mov.w	r3, #4294967295
 80017f0:	491c      	ldr	r1, [pc, #112]	@ (8001864 <run_output+0xb4>)
 80017f2:	481d      	ldr	r0, [pc, #116]	@ (8001868 <run_output+0xb8>)
 80017f4:	f003 fe2c 	bl	8005450 <HAL_UART_Transmit>
		memset(buffer, 0, sizeof(buffer));
 80017f8:	2240      	movs	r2, #64	@ 0x40
 80017fa:	2100      	movs	r1, #0
 80017fc:	4819      	ldr	r0, [pc, #100]	@ (8001864 <run_output+0xb4>)
 80017fe:	f004 fed5 	bl	80065ac <memset>
	} else {
		sprintf((char *)buffer, "\r\n%d : %d : %d : %d : %d", current_hour, pipe_num, pwm_num, rpm, depth);
		HAL_UART_Transmit(&huart6, buffer, strlen((char *)buffer), HAL_MAX_DELAY);
		memset(buffer, 0, sizeof(buffer));
	}
}
 8001802:	e022      	b.n	800184a <run_output+0x9a>
		sprintf((char *)buffer, "\r\n%d : %d : %d : %d : %d", current_hour, pipe_num, pwm_num, rpm, depth);
 8001804:	88ba      	ldrh	r2, [r7, #4]
 8001806:	4b19      	ldr	r3, [pc, #100]	@ (800186c <run_output+0xbc>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	461c      	mov	r4, r3
 800180c:	4b18      	ldr	r3, [pc, #96]	@ (8001870 <run_output+0xc0>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	4911      	ldr	r1, [pc, #68]	@ (800185c <run_output+0xac>)
 8001816:	8809      	ldrh	r1, [r1, #0]
 8001818:	b289      	uxth	r1, r1
 800181a:	9102      	str	r1, [sp, #8]
 800181c:	9301      	str	r3, [sp, #4]
 800181e:	9000      	str	r0, [sp, #0]
 8001820:	4623      	mov	r3, r4
 8001822:	4914      	ldr	r1, [pc, #80]	@ (8001874 <run_output+0xc4>)
 8001824:	480f      	ldr	r0, [pc, #60]	@ (8001864 <run_output+0xb4>)
 8001826:	f004 fea1 	bl	800656c <siprintf>
		HAL_UART_Transmit(&huart6, buffer, strlen((char *)buffer), HAL_MAX_DELAY);
 800182a:	480e      	ldr	r0, [pc, #56]	@ (8001864 <run_output+0xb4>)
 800182c:	f7fe fcd8 	bl	80001e0 <strlen>
 8001830:	4603      	mov	r3, r0
 8001832:	b29a      	uxth	r2, r3
 8001834:	f04f 33ff 	mov.w	r3, #4294967295
 8001838:	490a      	ldr	r1, [pc, #40]	@ (8001864 <run_output+0xb4>)
 800183a:	480b      	ldr	r0, [pc, #44]	@ (8001868 <run_output+0xb8>)
 800183c:	f003 fe08 	bl	8005450 <HAL_UART_Transmit>
		memset(buffer, 0, sizeof(buffer));
 8001840:	2240      	movs	r2, #64	@ 0x40
 8001842:	2100      	movs	r1, #0
 8001844:	4807      	ldr	r0, [pc, #28]	@ (8001864 <run_output+0xb4>)
 8001846:	f004 feb1 	bl	80065ac <memset>
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bd90      	pop	{r4, r7, pc}
 8001852:	bf00      	nop
 8001854:	2000009a 	.word	0x2000009a
 8001858:	200000f0 	.word	0x200000f0
 800185c:	200000a4 	.word	0x200000a4
 8001860:	08007024 	.word	0x08007024
 8001864:	200000ac 	.word	0x200000ac
 8001868:	200002a4 	.word	0x200002a4
 800186c:	2000008c 	.word	0x2000008c
 8001870:	20000098 	.word	0x20000098
 8001874:	0800703c 	.word	0x0800703c

08001878 <set_led>:

void set_led(uint16_t pipe_num) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, LED_Blue_Pin|LED_Red_Pin|LED_Green_Pin, GPIO_PIN_RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 8001888:	4825      	ldr	r0, [pc, #148]	@ (8001920 <set_led+0xa8>)
 800188a:	f002 f87d 	bl	8003988 <HAL_GPIO_WritePin>

	if (pipe_num == 0) {
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d106      	bne.n	80018a2 <set_led+0x2a>
		HAL_GPIO_WritePin(GPIOA, LED_Blue_Pin|LED_Red_Pin, GPIO_PIN_SET);
 8001894:	2201      	movs	r2, #1
 8001896:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 800189a:	4821      	ldr	r0, [pc, #132]	@ (8001920 <set_led+0xa8>)
 800189c:	f002 f874 	bl	8003988 <HAL_GPIO_WritePin>
 80018a0:	e01c      	b.n	80018dc <set_led+0x64>
	} else if (pipe_num == 1) {
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d106      	bne.n	80018b6 <set_led+0x3e>
		HAL_GPIO_WritePin(GPIOA, LED_Red_Pin, GPIO_PIN_SET);
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018ae:	481c      	ldr	r0, [pc, #112]	@ (8001920 <set_led+0xa8>)
 80018b0:	f002 f86a 	bl	8003988 <HAL_GPIO_WritePin>
 80018b4:	e012      	b.n	80018dc <set_led+0x64>
	} else if (pipe_num == 2) {
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d106      	bne.n	80018ca <set_led+0x52>
		HAL_GPIO_WritePin(GPIOA, LED_Green_Pin, GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018c2:	4817      	ldr	r0, [pc, #92]	@ (8001920 <set_led+0xa8>)
 80018c4:	f002 f860 	bl	8003988 <HAL_GPIO_WritePin>
 80018c8:	e008      	b.n	80018dc <set_led+0x64>
	} else if (pipe_num == 3) {
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d105      	bne.n	80018dc <set_led+0x64>
		HAL_GPIO_WritePin(GPIOA, LED_Blue_Pin, GPIO_PIN_SET);
 80018d0:	2201      	movs	r2, #1
 80018d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018d6:	4812      	ldr	r0, [pc, #72]	@ (8001920 <set_led+0xa8>)
 80018d8:	f002 f856 	bl	8003988 <HAL_GPIO_WritePin>
	}

	if (pipe_num == 4) {
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d11a      	bne.n	8001918 <set_led+0xa0>
		for (int i = 0; i < 20; i++) {
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	e014      	b.n	8001912 <set_led+0x9a>
			HAL_GPIO_WritePin(GPIOA, LED_Blue_Pin|LED_Red_Pin|LED_Green_Pin, GPIO_PIN_SET);
 80018e8:	2201      	movs	r2, #1
 80018ea:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 80018ee:	480c      	ldr	r0, [pc, #48]	@ (8001920 <set_led+0xa8>)
 80018f0:	f002 f84a 	bl	8003988 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80018f4:	2064      	movs	r0, #100	@ 0x64
 80018f6:	f001 f901 	bl	8002afc <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, LED_Blue_Pin|LED_Red_Pin|LED_Green_Pin, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 8001900:	4807      	ldr	r0, [pc, #28]	@ (8001920 <set_led+0xa8>)
 8001902:	f002 f841 	bl	8003988 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8001906:	2064      	movs	r0, #100	@ 0x64
 8001908:	f001 f8f8 	bl	8002afc <HAL_Delay>
		for (int i = 0; i < 20; i++) {
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3301      	adds	r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b13      	cmp	r3, #19
 8001916:	dde7      	ble.n	80018e8 <set_led+0x70>
		}
	}
}
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40020000 	.word	0x40020000

08001924 <reset_led>:

void reset_led() {
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_Blue_Pin|LED_Red_Pin|LED_Green_Pin, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 800192e:	4802      	ldr	r0, [pc, #8]	@ (8001938 <reset_led+0x14>)
 8001930:	f002 f82a 	bl	8003988 <HAL_GPIO_WritePin>
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40020000 	.word	0x40020000

0800193c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001942:	f001 f869 	bl	8002a18 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001946:	f000 f9fd 	bl	8001d44 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800194a:	f000 fc73 	bl	8002234 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800194e:	f000 fc1d 	bl	800218c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001952:	f000 fa57 	bl	8001e04 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001956:	f000 faa7 	bl	8001ea8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800195a:	f000 fb1b 	bl	8001f94 <MX_TIM3_Init>
  MX_TIM5_Init();
 800195e:	f000 fb9d 	bl	800209c <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001962:	f000 fbe9 	bl	8002138 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001966:	f000 fc3b 	bl	80021e0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim2);
 800196a:	4893      	ldr	r0, [pc, #588]	@ (8001bb8 <main+0x27c>)
 800196c:	f002 fcd6 	bl	800431c <HAL_TIM_Base_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001970:	2100      	movs	r1, #0
 8001972:	4891      	ldr	r0, [pc, #580]	@ (8001bb8 <main+0x27c>)
 8001974:	f002 fe0c 	bl	8004590 <HAL_TIM_PWM_Start>
  TIM2->PSC = 16;
 8001978:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800197c:	2210      	movs	r2, #16
 800197e:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM2->ARR = 20000;
 8001980:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001984:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001988:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM2->CCR1 = 500;
 800198a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800198e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001992:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_TIM_Base_Init(&htim3);
 8001994:	4889      	ldr	r0, [pc, #548]	@ (8001bbc <main+0x280>)
 8001996:	f002 fcc1 	bl	800431c <HAL_TIM_Base_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800199a:	2100      	movs	r1, #0
 800199c:	4887      	ldr	r0, [pc, #540]	@ (8001bbc <main+0x280>)
 800199e:	f002 fdf7 	bl	8004590 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80019a2:	2108      	movs	r1, #8
 80019a4:	4885      	ldr	r0, [pc, #532]	@ (8001bbc <main+0x280>)
 80019a6:	f002 fdf3 	bl	8004590 <HAL_TIM_PWM_Start>
  TIM3->PSC = 16;
 80019aa:	4b85      	ldr	r3, [pc, #532]	@ (8001bc0 <main+0x284>)
 80019ac:	2210      	movs	r2, #16
 80019ae:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM3->ARR = 2000;
 80019b0:	4b83      	ldr	r3, [pc, #524]	@ (8001bc0 <main+0x284>)
 80019b2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80019b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM3->CCR1 = 0;
 80019b8:	4b81      	ldr	r3, [pc, #516]	@ (8001bc0 <main+0x284>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3->CCR3 = 0;
 80019be:	4b80      	ldr	r3, [pc, #512]	@ (8001bc0 <main+0x284>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2120      	movs	r1, #32
 80019c8:	487e      	ldr	r0, [pc, #504]	@ (8001bc4 <main+0x288>)
 80019ca:	f001 ffdd 	bl	8003988 <HAL_GPIO_WritePin>
  user_input();
 80019ce:	f7ff fc07 	bl	80011e0 <user_input>

  while(HAL_GPIO_ReadPin(GPIOC, USER_Button_Pin) == GPIO_PIN_SET) {
 80019d2:	e00f      	b.n	80019f4 <main+0xb8>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80019d4:	2201      	movs	r2, #1
 80019d6:	2120      	movs	r1, #32
 80019d8:	487a      	ldr	r0, [pc, #488]	@ (8001bc4 <main+0x288>)
 80019da:	f001 ffd5 	bl	8003988 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80019de:	2064      	movs	r0, #100	@ 0x64
 80019e0:	f001 f88c 	bl	8002afc <HAL_Delay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2120      	movs	r1, #32
 80019e8:	4876      	ldr	r0, [pc, #472]	@ (8001bc4 <main+0x288>)
 80019ea:	f001 ffcd 	bl	8003988 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80019ee:	2064      	movs	r0, #100	@ 0x64
 80019f0:	f001 f884 	bl	8002afc <HAL_Delay>
  while(HAL_GPIO_ReadPin(GPIOC, USER_Button_Pin) == GPIO_PIN_SET) {
 80019f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019f8:	4873      	ldr	r0, [pc, #460]	@ (8001bc8 <main+0x28c>)
 80019fa:	f001 ffad 	bl	8003958 <HAL_GPIO_ReadPin>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d0e7      	beq.n	80019d4 <main+0x98>
  }

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001a04:	2201      	movs	r2, #1
 8001a06:	2120      	movs	r1, #32
 8001a08:	486e      	ldr	r0, [pc, #440]	@ (8001bc4 <main+0x288>)
 8001a0a:	f001 ffbd 	bl	8003988 <HAL_GPIO_WritePin>

  // RUN Mode
  sprintf((char *)buffer, "\n\r\nRUN MODE");
 8001a0e:	496f      	ldr	r1, [pc, #444]	@ (8001bcc <main+0x290>)
 8001a10:	486f      	ldr	r0, [pc, #444]	@ (8001bd0 <main+0x294>)
 8001a12:	f004 fdab 	bl	800656c <siprintf>
  HAL_UART_Transmit(&huart6, buffer, strlen((char *)buffer), HAL_MAX_DELAY);
 8001a16:	486e      	ldr	r0, [pc, #440]	@ (8001bd0 <main+0x294>)
 8001a18:	f7fe fbe2 	bl	80001e0 <strlen>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	f04f 33ff 	mov.w	r3, #4294967295
 8001a24:	496a      	ldr	r1, [pc, #424]	@ (8001bd0 <main+0x294>)
 8001a26:	486b      	ldr	r0, [pc, #428]	@ (8001bd4 <main+0x298>)
 8001a28:	f003 fd12 	bl	8005450 <HAL_UART_Transmit>
  memset(buffer, 0, sizeof(buffer));
 8001a2c:	2240      	movs	r2, #64	@ 0x40
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4867      	ldr	r0, [pc, #412]	@ (8001bd0 <main+0x294>)
 8001a32:	f004 fdbb 	bl	80065ac <memset>
  sprintf((char *)buffer, "\r\nHOUR : PIPE : PWM : RPM : DEPTH");
 8001a36:	4968      	ldr	r1, [pc, #416]	@ (8001bd8 <main+0x29c>)
 8001a38:	4865      	ldr	r0, [pc, #404]	@ (8001bd0 <main+0x294>)
 8001a3a:	f004 fd97 	bl	800656c <siprintf>
  HAL_UART_Transmit(&huart6, buffer, strlen((char*) buffer), HAL_MAX_DELAY);
 8001a3e:	4864      	ldr	r0, [pc, #400]	@ (8001bd0 <main+0x294>)
 8001a40:	f7fe fbce 	bl	80001e0 <strlen>
 8001a44:	4603      	mov	r3, r0
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4c:	4960      	ldr	r1, [pc, #384]	@ (8001bd0 <main+0x294>)
 8001a4e:	4861      	ldr	r0, [pc, #388]	@ (8001bd4 <main+0x298>)
 8001a50:	f003 fcfe 	bl	8005450 <HAL_UART_Transmit>
  memset(buffer, 0, sizeof(buffer));
 8001a54:	2240      	movs	r2, #64	@ 0x40
 8001a56:	2100      	movs	r1, #0
 8001a58:	485d      	ldr	r0, [pc, #372]	@ (8001bd0 <main+0x294>)
 8001a5a:	f004 fda7 	bl	80065ac <memset>
  sprintf((char *)buffer, "\r\n---------------------------------------------");
 8001a5e:	495f      	ldr	r1, [pc, #380]	@ (8001bdc <main+0x2a0>)
 8001a60:	485b      	ldr	r0, [pc, #364]	@ (8001bd0 <main+0x294>)
 8001a62:	f004 fd83 	bl	800656c <siprintf>
  HAL_UART_Transmit(&huart6, buffer, strlen((char *)buffer), HAL_MAX_DELAY);
 8001a66:	485a      	ldr	r0, [pc, #360]	@ (8001bd0 <main+0x294>)
 8001a68:	f7fe fbba 	bl	80001e0 <strlen>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295
 8001a74:	4956      	ldr	r1, [pc, #344]	@ (8001bd0 <main+0x294>)
 8001a76:	4857      	ldr	r0, [pc, #348]	@ (8001bd4 <main+0x298>)
 8001a78:	f003 fcea 	bl	8005450 <HAL_UART_Transmit>
  memset(buffer, 0, sizeof(buffer));
 8001a7c:	2240      	movs	r2, #64	@ 0x40
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4853      	ldr	r0, [pc, #332]	@ (8001bd0 <main+0x294>)
 8001a82:	f004 fd93 	bl	80065ac <memset>

  clock_hours = 0;
 8001a86:	4b56      	ldr	r3, [pc, #344]	@ (8001be0 <main+0x2a4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	801a      	strh	r2, [r3, #0]
  clock_secs = 0;
 8001a8c:	4b55      	ldr	r3, [pc, #340]	@ (8001be4 <main+0x2a8>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	801a      	strh	r2, [r3, #0]
  last_hour = 0;
 8001a92:	4b55      	ldr	r3, [pc, #340]	@ (8001be8 <main+0x2ac>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim5);
 8001a98:	4854      	ldr	r0, [pc, #336]	@ (8001bec <main+0x2b0>)
 8001a9a:	f002 fc8f 	bl	80043bc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {
	  empty_zone = 1;
 8001a9e:	4b54      	ldr	r3, [pc, #336]	@ (8001bf0 <main+0x2b4>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

	  if (clock_hours == start_time[0]) {
 8001aa4:	4b53      	ldr	r3, [pc, #332]	@ (8001bf4 <main+0x2b8>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b4d      	ldr	r3, [pc, #308]	@ (8001be0 <main+0x2a4>)
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d108      	bne.n	8001ac4 <main+0x188>
		  pipe_num = pipe[0];
 8001ab2:	4b51      	ldr	r3, [pc, #324]	@ (8001bf8 <main+0x2bc>)
 8001ab4:	781a      	ldrb	r2, [r3, #0]
 8001ab6:	4b51      	ldr	r3, [pc, #324]	@ (8001bfc <main+0x2c0>)
 8001ab8:	701a      	strb	r2, [r3, #0]
		  pwm_num = pwm[0];
 8001aba:	4b51      	ldr	r3, [pc, #324]	@ (8001c00 <main+0x2c4>)
 8001abc:	781a      	ldrb	r2, [r3, #0]
 8001abe:	4b51      	ldr	r3, [pc, #324]	@ (8001c04 <main+0x2c8>)
 8001ac0:	701a      	strb	r2, [r3, #0]
 8001ac2:	e02e      	b.n	8001b22 <main+0x1e6>
	  } else if (clock_hours == start_time[1]) {
 8001ac4:	4b4b      	ldr	r3, [pc, #300]	@ (8001bf4 <main+0x2b8>)
 8001ac6:	785b      	ldrb	r3, [r3, #1]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b45      	ldr	r3, [pc, #276]	@ (8001be0 <main+0x2a4>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d108      	bne.n	8001ae4 <main+0x1a8>
		  pipe_num = pipe[1];
 8001ad2:	4b49      	ldr	r3, [pc, #292]	@ (8001bf8 <main+0x2bc>)
 8001ad4:	785a      	ldrb	r2, [r3, #1]
 8001ad6:	4b49      	ldr	r3, [pc, #292]	@ (8001bfc <main+0x2c0>)
 8001ad8:	701a      	strb	r2, [r3, #0]
		  pwm_num = pwm[1];
 8001ada:	4b49      	ldr	r3, [pc, #292]	@ (8001c00 <main+0x2c4>)
 8001adc:	785a      	ldrb	r2, [r3, #1]
 8001ade:	4b49      	ldr	r3, [pc, #292]	@ (8001c04 <main+0x2c8>)
 8001ae0:	701a      	strb	r2, [r3, #0]
 8001ae2:	e01e      	b.n	8001b22 <main+0x1e6>
	  } else if (clock_hours == start_time[2]) {
 8001ae4:	4b43      	ldr	r3, [pc, #268]	@ (8001bf4 <main+0x2b8>)
 8001ae6:	789b      	ldrb	r3, [r3, #2]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b3d      	ldr	r3, [pc, #244]	@ (8001be0 <main+0x2a4>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d108      	bne.n	8001b04 <main+0x1c8>
		  pipe_num = pipe[2];
 8001af2:	4b41      	ldr	r3, [pc, #260]	@ (8001bf8 <main+0x2bc>)
 8001af4:	789a      	ldrb	r2, [r3, #2]
 8001af6:	4b41      	ldr	r3, [pc, #260]	@ (8001bfc <main+0x2c0>)
 8001af8:	701a      	strb	r2, [r3, #0]
		  pwm_num = pwm[2];
 8001afa:	4b41      	ldr	r3, [pc, #260]	@ (8001c00 <main+0x2c4>)
 8001afc:	789a      	ldrb	r2, [r3, #2]
 8001afe:	4b41      	ldr	r3, [pc, #260]	@ (8001c04 <main+0x2c8>)
 8001b00:	701a      	strb	r2, [r3, #0]
 8001b02:	e00e      	b.n	8001b22 <main+0x1e6>
	  } else if (clock_hours == start_time[3]) {
 8001b04:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf4 <main+0x2b8>)
 8001b06:	78db      	ldrb	r3, [r3, #3]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b35      	ldr	r3, [pc, #212]	@ (8001be0 <main+0x2a4>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d107      	bne.n	8001b22 <main+0x1e6>
		  pipe_num = pipe[3];
 8001b12:	4b39      	ldr	r3, [pc, #228]	@ (8001bf8 <main+0x2bc>)
 8001b14:	78da      	ldrb	r2, [r3, #3]
 8001b16:	4b39      	ldr	r3, [pc, #228]	@ (8001bfc <main+0x2c0>)
 8001b18:	701a      	strb	r2, [r3, #0]
		  pwm_num = pwm[3];
 8001b1a:	4b39      	ldr	r3, [pc, #228]	@ (8001c00 <main+0x2c4>)
 8001b1c:	78da      	ldrb	r2, [r3, #3]
 8001b1e:	4b39      	ldr	r3, [pc, #228]	@ (8001c04 <main+0x2c8>)
 8001b20:	701a      	strb	r2, [r3, #0]
	  }

	  for (int i = 0; i < 4; i++) {
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	e017      	b.n	8001b58 <main+0x21c>
		  if(start_time[i] <= clock_hours && stop_time[i] >= clock_hours) {
 8001b28:	4a32      	ldr	r2, [pc, #200]	@ (8001bf4 <main+0x2b8>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b2b      	ldr	r3, [pc, #172]	@ (8001be0 <main+0x2a4>)
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d80b      	bhi.n	8001b52 <main+0x216>
 8001b3a:	4a33      	ldr	r2, [pc, #204]	@ (8001c08 <main+0x2cc>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b26      	ldr	r3, [pc, #152]	@ (8001be0 <main+0x2a4>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d302      	bcc.n	8001b52 <main+0x216>
			  empty_zone = 0;
 8001b4c:	4b28      	ldr	r3, [pc, #160]	@ (8001bf0 <main+0x2b4>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
	  for (int i = 0; i < 4; i++) {
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3301      	adds	r3, #1
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	dde4      	ble.n	8001b28 <main+0x1ec>
		  }
	  }

	  if (!empty_zone) {
 8001b5e:	4b24      	ldr	r3, [pc, #144]	@ (8001bf0 <main+0x2b4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d152      	bne.n	8001c0c <main+0x2d0>
		  servo_num(pipe_num);
 8001b66:	4b25      	ldr	r3, [pc, #148]	@ (8001bfc <main+0x2c0>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fd0a 	bl	8001584 <servo_num>
		  set_led(pipe_num);
 8001b70:	4b22      	ldr	r3, [pc, #136]	@ (8001bfc <main+0x2c0>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fe7f 	bl	8001878 <set_led>
		  DC_motor_speed(pipe_num, pwm_num);
 8001b7a:	4b20      	ldr	r3, [pc, #128]	@ (8001bfc <main+0x2c0>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4b20      	ldr	r3, [pc, #128]	@ (8001c04 <main+0x2c8>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	4610      	mov	r0, r2
 8001b88:	f7ff fd2a 	bl	80015e0 <DC_motor_speed>
		  if (pwm_num == 0) {
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c04 <main+0x2c8>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d143      	bne.n	8001c1c <main+0x2e0>
			  while (clock_hours == last_hour) {
 8001b94:	e008      	b.n	8001ba8 <main+0x26c>
				  DC_motor_speed(pipe_num, pwm_num);
 8001b96:	4b19      	ldr	r3, [pc, #100]	@ (8001bfc <main+0x2c0>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <main+0x2c8>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	f7ff fd1c 	bl	80015e0 <DC_motor_speed>
			  while (clock_hours == last_hour) {
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <main+0x2ac>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <main+0x2a4>)
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d0ef      	beq.n	8001b96 <main+0x25a>
 8001bb6:	e031      	b.n	8001c1c <main+0x2e0>
 8001bb8:	2000013c 	.word	0x2000013c
 8001bbc:	20000184 	.word	0x20000184
 8001bc0:	40000400 	.word	0x40000400
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40020800 	.word	0x40020800
 8001bcc:	08007058 	.word	0x08007058
 8001bd0:	200000ac 	.word	0x200000ac
 8001bd4:	200002a4 	.word	0x200002a4
 8001bd8:	08007064 	.word	0x08007064
 8001bdc:	08007088 	.word	0x08007088
 8001be0:	2000009a 	.word	0x2000009a
 8001be4:	2000009c 	.word	0x2000009c
 8001be8:	2000009e 	.word	0x2000009e
 8001bec:	200001cc 	.word	0x200001cc
 8001bf0:	200000f0 	.word	0x200000f0
 8001bf4:	20000090 	.word	0x20000090
 8001bf8:	20000084 	.word	0x20000084
 8001bfc:	2000008c 	.word	0x2000008c
 8001c00:	20000088 	.word	0x20000088
 8001c04:	20000098 	.word	0x20000098
 8001c08:	20000094 	.word	0x20000094
			  }
		  }
	  } else if (empty_zone) {
 8001c0c:	4b41      	ldr	r3, [pc, #260]	@ (8001d14 <main+0x3d8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <main+0x2e0>
		  DC_motor_reset();
 8001c14:	f7ff fd44 	bl	80016a0 <DC_motor_reset>
		  reset_led();
 8001c18:	f7ff fe84 	bl	8001924 <reset_led>
	  }

	  while (clock_hours == last_hour){};
 8001c1c:	bf00      	nop
 8001c1e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d18 <main+0x3dc>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b3d      	ldr	r3, [pc, #244]	@ (8001d1c <main+0x3e0>)
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d0f8      	beq.n	8001c1e <main+0x2e2>

	  last_hour = clock_hours;
 8001c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d1c <main+0x3e0>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4b39      	ldr	r3, [pc, #228]	@ (8001d18 <main+0x3dc>)
 8001c34:	701a      	strb	r2, [r3, #0]
	  water_level();
 8001c36:	f7ff fd43 	bl	80016c0 <water_level>

	  if (depth == 0) {
 8001c3a:	4b39      	ldr	r3, [pc, #228]	@ (8001d20 <main+0x3e4>)
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d122      	bne.n	8001c8a <main+0x34e>
		  DC_motor_reset();
 8001c44:	f7ff fd2c 	bl	80016a0 <DC_motor_reset>
		  TIM2->CCR1 = 0;
 8001c48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	635a      	str	r2, [r3, #52]	@ 0x34
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c50:	2200      	movs	r2, #0
 8001c52:	2120      	movs	r1, #32
 8001c54:	4833      	ldr	r0, [pc, #204]	@ (8001d24 <main+0x3e8>)
 8001c56:	f001 fe97 	bl	8003988 <HAL_GPIO_WritePin>
		  sprintf((char *)buffer, "\n\r\nReservoir is empty");
 8001c5a:	4933      	ldr	r1, [pc, #204]	@ (8001d28 <main+0x3ec>)
 8001c5c:	4833      	ldr	r0, [pc, #204]	@ (8001d2c <main+0x3f0>)
 8001c5e:	f004 fc85 	bl	800656c <siprintf>
		  HAL_UART_Transmit(&huart6, buffer, strlen((char *)buffer), HAL_MAX_DELAY);
 8001c62:	4832      	ldr	r0, [pc, #200]	@ (8001d2c <main+0x3f0>)
 8001c64:	f7fe fabc 	bl	80001e0 <strlen>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c70:	492e      	ldr	r1, [pc, #184]	@ (8001d2c <main+0x3f0>)
 8001c72:	482f      	ldr	r0, [pc, #188]	@ (8001d30 <main+0x3f4>)
 8001c74:	f003 fbec 	bl	8005450 <HAL_UART_Transmit>
		  memset(buffer, 0, sizeof(buffer));
 8001c78:	2240      	movs	r2, #64	@ 0x40
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	482b      	ldr	r0, [pc, #172]	@ (8001d2c <main+0x3f0>)
 8001c7e:	f004 fc95 	bl	80065ac <memset>
		  set_led(4);
 8001c82:	2004      	movs	r0, #4
 8001c84:	f7ff fdf8 	bl	8001878 <set_led>

		  break;
 8001c88:	e029      	b.n	8001cde <main+0x3a2>
	  }

	  DIGITS_Display();
 8001c8a:	f7ff f867 	bl	8000d5c <DIGITS_Display>
	  run_output();
 8001c8e:	f7ff fd8f 	bl	80017b0 <run_output>

	  if (clock_hours == 24) {
 8001c92:	4b22      	ldr	r3, [pc, #136]	@ (8001d1c <main+0x3e0>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	2b18      	cmp	r3, #24
 8001c98:	f47f af01 	bne.w	8001a9e <main+0x162>
		  DC_motor_reset();
 8001c9c:	f7ff fd00 	bl	80016a0 <DC_motor_reset>
		  reset_led();
 8001ca0:	f7ff fe40 	bl	8001924 <reset_led>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2120      	movs	r1, #32
 8001ca8:	481e      	ldr	r0, [pc, #120]	@ (8001d24 <main+0x3e8>)
 8001caa:	f001 fe6d 	bl	8003988 <HAL_GPIO_WritePin>
		  TIM2->CCR1 = 0;
 8001cae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	635a      	str	r2, [r3, #52]	@ 0x34
		  sprintf((char *)buffer, "\n\r\nIrrigation complete");
 8001cb6:	491f      	ldr	r1, [pc, #124]	@ (8001d34 <main+0x3f8>)
 8001cb8:	481c      	ldr	r0, [pc, #112]	@ (8001d2c <main+0x3f0>)
 8001cba:	f004 fc57 	bl	800656c <siprintf>
		  HAL_UART_Transmit(&huart6, buffer, strlen((char *)buffer), HAL_MAX_DELAY);
 8001cbe:	481b      	ldr	r0, [pc, #108]	@ (8001d2c <main+0x3f0>)
 8001cc0:	f7fe fa8e 	bl	80001e0 <strlen>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ccc:	4917      	ldr	r1, [pc, #92]	@ (8001d2c <main+0x3f0>)
 8001cce:	4818      	ldr	r0, [pc, #96]	@ (8001d30 <main+0x3f4>)
 8001cd0:	f003 fbbe 	bl	8005450 <HAL_UART_Transmit>
		  memset(buffer, 0, sizeof(buffer));
 8001cd4:	2240      	movs	r2, #64	@ 0x40
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4814      	ldr	r0, [pc, #80]	@ (8001d2c <main+0x3f0>)
 8001cda:	f004 fc67 	bl	80065ac <memset>
	  }
  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin(GPIOA, LED_Blue_Pin|LED_Red_Pin|LED_Green_Pin, GPIO_PIN_RESET);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 8001ce4:	480f      	ldr	r0, [pc, #60]	@ (8001d24 <main+0x3e8>)
 8001ce6:	f001 fe4f 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001cea:	2100      	movs	r1, #0
 8001cec:	4812      	ldr	r0, [pc, #72]	@ (8001d38 <main+0x3fc>)
 8001cee:	f002 fcff 	bl	80046f0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001cf2:	2108      	movs	r1, #8
 8001cf4:	4810      	ldr	r0, [pc, #64]	@ (8001d38 <main+0x3fc>)
 8001cf6:	f002 fcfb 	bl	80046f0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	480f      	ldr	r0, [pc, #60]	@ (8001d3c <main+0x400>)
 8001cfe:	f002 fcf7 	bl	80046f0 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim5);
 8001d02:	480f      	ldr	r0, [pc, #60]	@ (8001d40 <main+0x404>)
 8001d04:	f002 fbbc 	bl	8004480 <HAL_TIM_Base_Stop_IT>

	return 0;
 8001d08:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200000f0 	.word	0x200000f0
 8001d18:	2000009e 	.word	0x2000009e
 8001d1c:	2000009a 	.word	0x2000009a
 8001d20:	200000a4 	.word	0x200000a4
 8001d24:	40020000 	.word	0x40020000
 8001d28:	080070b8 	.word	0x080070b8
 8001d2c:	200000ac 	.word	0x200000ac
 8001d30:	200002a4 	.word	0x200002a4
 8001d34:	080070d0 	.word	0x080070d0
 8001d38:	20000184 	.word	0x20000184
 8001d3c:	2000013c 	.word	0x2000013c
 8001d40:	200001cc 	.word	0x200001cc

08001d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b094      	sub	sp, #80	@ 0x50
 8001d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d4a:	f107 0320 	add.w	r3, r7, #32
 8001d4e:	2230      	movs	r2, #48	@ 0x30
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f004 fc2a 	bl	80065ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	4b23      	ldr	r3, [pc, #140]	@ (8001dfc <SystemClock_Config+0xb8>)
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d70:	4a22      	ldr	r2, [pc, #136]	@ (8001dfc <SystemClock_Config+0xb8>)
 8001d72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d76:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d78:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <SystemClock_Config+0xb8>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d84:	2300      	movs	r3, #0
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	4b1d      	ldr	r3, [pc, #116]	@ (8001e00 <SystemClock_Config+0xbc>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d90:	4a1b      	ldr	r2, [pc, #108]	@ (8001e00 <SystemClock_Config+0xbc>)
 8001d92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4b19      	ldr	r3, [pc, #100]	@ (8001e00 <SystemClock_Config+0xbc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001da4:	2302      	movs	r3, #2
 8001da6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001da8:	2301      	movs	r3, #1
 8001daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dac:	2310      	movs	r3, #16
 8001dae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001db4:	f107 0320 	add.w	r3, r7, #32
 8001db8:	4618      	mov	r0, r3
 8001dba:	f001 fe17 	bl	80039ec <HAL_RCC_OscConfig>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001dc4:	f000 fb5c 	bl	8002480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc8:	230f      	movs	r3, #15
 8001dca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	2100      	movs	r1, #0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 f87a 	bl	8003edc <HAL_RCC_ClockConfig>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001dee:	f000 fb47 	bl	8002480 <Error_Handler>
  }
}
 8001df2:	bf00      	nop
 8001df4:	3750      	adds	r7, #80	@ 0x50
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40007000 	.word	0x40007000

08001e04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e16:	4b21      	ldr	r3, [pc, #132]	@ (8001e9c <MX_ADC1_Init+0x98>)
 8001e18:	4a21      	ldr	r2, [pc, #132]	@ (8001ea0 <MX_ADC1_Init+0x9c>)
 8001e1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e9c <MX_ADC1_Init+0x98>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001e22:	4b1e      	ldr	r3, [pc, #120]	@ (8001e9c <MX_ADC1_Init+0x98>)
 8001e24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e9c <MX_ADC1_Init+0x98>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e30:	4b1a      	ldr	r3, [pc, #104]	@ (8001e9c <MX_ADC1_Init+0x98>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e36:	4b19      	ldr	r3, [pc, #100]	@ (8001e9c <MX_ADC1_Init+0x98>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e3e:	4b17      	ldr	r3, [pc, #92]	@ (8001e9c <MX_ADC1_Init+0x98>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e44:	4b15      	ldr	r3, [pc, #84]	@ (8001e9c <MX_ADC1_Init+0x98>)
 8001e46:	4a17      	ldr	r2, [pc, #92]	@ (8001ea4 <MX_ADC1_Init+0xa0>)
 8001e48:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e4a:	4b14      	ldr	r3, [pc, #80]	@ (8001e9c <MX_ADC1_Init+0x98>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e50:	4b12      	ldr	r3, [pc, #72]	@ (8001e9c <MX_ADC1_Init+0x98>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e56:	4b11      	ldr	r3, [pc, #68]	@ (8001e9c <MX_ADC1_Init+0x98>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e9c <MX_ADC1_Init+0x98>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e64:	480d      	ldr	r0, [pc, #52]	@ (8001e9c <MX_ADC1_Init+0x98>)
 8001e66:	f000 fe6d 	bl	8002b44 <HAL_ADC_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e70:	f000 fb06 	bl	8002480 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001e74:	2309      	movs	r3, #9
 8001e76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e80:	463b      	mov	r3, r7
 8001e82:	4619      	mov	r1, r3
 8001e84:	4805      	ldr	r0, [pc, #20]	@ (8001e9c <MX_ADC1_Init+0x98>)
 8001e86:	f001 f821 	bl	8002ecc <HAL_ADC_ConfigChannel>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e90:	f000 faf6 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	200000f4 	.word	0x200000f4
 8001ea0:	40012000 	.word	0x40012000
 8001ea4:	0f000001 	.word	0x0f000001

08001ea8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08e      	sub	sp, #56	@ 0x38
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ebc:	f107 0320 	add.w	r3, r7, #32
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
 8001ed4:	615a      	str	r2, [r3, #20]
 8001ed6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f90 <MX_TIM2_Init+0xe8>)
 8001eda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ede:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8001ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f90 <MX_TIM2_Init+0xe8>)
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f90 <MX_TIM2_Init+0xe8>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001eec:	4b28      	ldr	r3, [pc, #160]	@ (8001f90 <MX_TIM2_Init+0xe8>)
 8001eee:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001ef2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef4:	4b26      	ldr	r3, [pc, #152]	@ (8001f90 <MX_TIM2_Init+0xe8>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001efa:	4b25      	ldr	r3, [pc, #148]	@ (8001f90 <MX_TIM2_Init+0xe8>)
 8001efc:	2280      	movs	r2, #128	@ 0x80
 8001efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f00:	4823      	ldr	r0, [pc, #140]	@ (8001f90 <MX_TIM2_Init+0xe8>)
 8001f02:	f002 fa0b 	bl	800431c <HAL_TIM_Base_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001f0c:	f000 fab8 	bl	8002480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f14:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	481c      	ldr	r0, [pc, #112]	@ (8001f90 <MX_TIM2_Init+0xe8>)
 8001f1e:	f002 fdfd 	bl	8004b1c <HAL_TIM_ConfigClockSource>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001f28:	f000 faaa 	bl	8002480 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f2c:	4818      	ldr	r0, [pc, #96]	@ (8001f90 <MX_TIM2_Init+0xe8>)
 8001f2e:	f002 fad6 	bl	80044de <HAL_TIM_PWM_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001f38:	f000 faa2 	bl	8002480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f44:	f107 0320 	add.w	r3, r7, #32
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4811      	ldr	r0, [pc, #68]	@ (8001f90 <MX_TIM2_Init+0xe8>)
 8001f4c:	f003 f9ae 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001f56:	f000 fa93 	bl	8002480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f5a:	2360      	movs	r3, #96	@ 0x60
 8001f5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001f5e:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001f62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	2200      	movs	r2, #0
 8001f70:	4619      	mov	r1, r3
 8001f72:	4807      	ldr	r0, [pc, #28]	@ (8001f90 <MX_TIM2_Init+0xe8>)
 8001f74:	f002 fd10 	bl	8004998 <HAL_TIM_PWM_ConfigChannel>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001f7e:	f000 fa7f 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f82:	4803      	ldr	r0, [pc, #12]	@ (8001f90 <MX_TIM2_Init+0xe8>)
 8001f84:	f000 fb42 	bl	800260c <HAL_TIM_MspPostInit>

}
 8001f88:	bf00      	nop
 8001f8a:	3738      	adds	r7, #56	@ 0x38
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	2000013c 	.word	0x2000013c

08001f94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08e      	sub	sp, #56	@ 0x38
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa8:	f107 0320 	add.w	r3, r7, #32
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
 8001fc0:	615a      	str	r2, [r3, #20]
 8001fc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fc4:	4b33      	ldr	r3, [pc, #204]	@ (8002094 <MX_TIM3_Init+0x100>)
 8001fc6:	4a34      	ldr	r2, [pc, #208]	@ (8002098 <MX_TIM3_Init+0x104>)
 8001fc8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8001fca:	4b32      	ldr	r3, [pc, #200]	@ (8002094 <MX_TIM3_Init+0x100>)
 8001fcc:	220f      	movs	r2, #15
 8001fce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd0:	4b30      	ldr	r3, [pc, #192]	@ (8002094 <MX_TIM3_Init+0x100>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8001fd6:	4b2f      	ldr	r3, [pc, #188]	@ (8002094 <MX_TIM3_Init+0x100>)
 8001fd8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001fdc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fde:	4b2d      	ldr	r3, [pc, #180]	@ (8002094 <MX_TIM3_Init+0x100>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8002094 <MX_TIM3_Init+0x100>)
 8001fe6:	2280      	movs	r2, #128	@ 0x80
 8001fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fea:	482a      	ldr	r0, [pc, #168]	@ (8002094 <MX_TIM3_Init+0x100>)
 8001fec:	f002 f996 	bl	800431c <HAL_TIM_Base_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ff6:	f000 fa43 	bl	8002480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ffa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002000:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002004:	4619      	mov	r1, r3
 8002006:	4823      	ldr	r0, [pc, #140]	@ (8002094 <MX_TIM3_Init+0x100>)
 8002008:	f002 fd88 	bl	8004b1c <HAL_TIM_ConfigClockSource>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002012:	f000 fa35 	bl	8002480 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002016:	481f      	ldr	r0, [pc, #124]	@ (8002094 <MX_TIM3_Init+0x100>)
 8002018:	f002 fa61 	bl	80044de <HAL_TIM_PWM_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002022:	f000 fa2d 	bl	8002480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800202e:	f107 0320 	add.w	r3, r7, #32
 8002032:	4619      	mov	r1, r3
 8002034:	4817      	ldr	r0, [pc, #92]	@ (8002094 <MX_TIM3_Init+0x100>)
 8002036:	f003 f939 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002040:	f000 fa1e 	bl	8002480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002044:	2360      	movs	r3, #96	@ 0x60
 8002046:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1200-1;
 8002048:	f240 43af 	movw	r3, #1199	@ 0x4af
 800204c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	2200      	movs	r2, #0
 800205a:	4619      	mov	r1, r3
 800205c:	480d      	ldr	r0, [pc, #52]	@ (8002094 <MX_TIM3_Init+0x100>)
 800205e:	f002 fc9b 	bl	8004998 <HAL_TIM_PWM_ConfigChannel>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002068:	f000 fa0a 	bl	8002480 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	2208      	movs	r2, #8
 8002074:	4619      	mov	r1, r3
 8002076:	4807      	ldr	r0, [pc, #28]	@ (8002094 <MX_TIM3_Init+0x100>)
 8002078:	f002 fc8e 	bl	8004998 <HAL_TIM_PWM_ConfigChannel>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8002082:	f000 f9fd 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002086:	4803      	ldr	r0, [pc, #12]	@ (8002094 <MX_TIM3_Init+0x100>)
 8002088:	f000 fac0 	bl	800260c <HAL_TIM_MspPostInit>

}
 800208c:	bf00      	nop
 800208e:	3738      	adds	r7, #56	@ 0x38
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000184 	.word	0x20000184
 8002098:	40000400 	.word	0x40000400

0800209c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */
  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a2:	f107 0308 	add.w	r3, r7, #8
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b0:	463b      	mov	r3, r7
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */
  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80020b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002130 <MX_TIM5_Init+0x94>)
 80020ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002134 <MX_TIM5_Init+0x98>)
 80020bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16000-1;
 80020be:	4b1c      	ldr	r3, [pc, #112]	@ (8002130 <MX_TIM5_Init+0x94>)
 80020c0:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80020c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002130 <MX_TIM5_Init+0x94>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80020cc:	4b18      	ldr	r3, [pc, #96]	@ (8002130 <MX_TIM5_Init+0x94>)
 80020ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d4:	4b16      	ldr	r3, [pc, #88]	@ (8002130 <MX_TIM5_Init+0x94>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020da:	4b15      	ldr	r3, [pc, #84]	@ (8002130 <MX_TIM5_Init+0x94>)
 80020dc:	2280      	movs	r2, #128	@ 0x80
 80020de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020e0:	4813      	ldr	r0, [pc, #76]	@ (8002130 <MX_TIM5_Init+0x94>)
 80020e2:	f002 f91b 	bl	800431c <HAL_TIM_Base_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80020ec:	f000 f9c8 	bl	8002480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80020f6:	f107 0308 	add.w	r3, r7, #8
 80020fa:	4619      	mov	r1, r3
 80020fc:	480c      	ldr	r0, [pc, #48]	@ (8002130 <MX_TIM5_Init+0x94>)
 80020fe:	f002 fd0d 	bl	8004b1c <HAL_TIM_ConfigClockSource>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002108:	f000 f9ba 	bl	8002480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210c:	2300      	movs	r3, #0
 800210e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002114:	463b      	mov	r3, r7
 8002116:	4619      	mov	r1, r3
 8002118:	4805      	ldr	r0, [pc, #20]	@ (8002130 <MX_TIM5_Init+0x94>)
 800211a:	f003 f8c7 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002124:	f000 f9ac 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  /* USER CODE END TIM5_Init 2 */

}
 8002128:	bf00      	nop
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	200001cc 	.word	0x200001cc
 8002134:	40000c00 	.word	0x40000c00

08002138 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800213c:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <MX_USART1_UART_Init+0x4c>)
 800213e:	4a12      	ldr	r2, [pc, #72]	@ (8002188 <MX_USART1_UART_Init+0x50>)
 8002140:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002142:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <MX_USART1_UART_Init+0x4c>)
 8002144:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002148:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800214a:	4b0e      	ldr	r3, [pc, #56]	@ (8002184 <MX_USART1_UART_Init+0x4c>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002150:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <MX_USART1_UART_Init+0x4c>)
 8002152:	2200      	movs	r2, #0
 8002154:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002156:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <MX_USART1_UART_Init+0x4c>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800215c:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <MX_USART1_UART_Init+0x4c>)
 800215e:	220c      	movs	r2, #12
 8002160:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002162:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <MX_USART1_UART_Init+0x4c>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002168:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <MX_USART1_UART_Init+0x4c>)
 800216a:	2200      	movs	r2, #0
 800216c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800216e:	4805      	ldr	r0, [pc, #20]	@ (8002184 <MX_USART1_UART_Init+0x4c>)
 8002170:	f003 f91e 	bl	80053b0 <HAL_UART_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800217a:	f000 f981 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000214 	.word	0x20000214
 8002188:	40011000 	.word	0x40011000

0800218c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002190:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <MX_USART2_UART_Init+0x4c>)
 8002192:	4a12      	ldr	r2, [pc, #72]	@ (80021dc <MX_USART2_UART_Init+0x50>)
 8002194:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002196:	4b10      	ldr	r3, [pc, #64]	@ (80021d8 <MX_USART2_UART_Init+0x4c>)
 8002198:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800219c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800219e:	4b0e      	ldr	r3, [pc, #56]	@ (80021d8 <MX_USART2_UART_Init+0x4c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021a4:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <MX_USART2_UART_Init+0x4c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021aa:	4b0b      	ldr	r3, [pc, #44]	@ (80021d8 <MX_USART2_UART_Init+0x4c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021b0:	4b09      	ldr	r3, [pc, #36]	@ (80021d8 <MX_USART2_UART_Init+0x4c>)
 80021b2:	220c      	movs	r2, #12
 80021b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b6:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <MX_USART2_UART_Init+0x4c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021bc:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <MX_USART2_UART_Init+0x4c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021c2:	4805      	ldr	r0, [pc, #20]	@ (80021d8 <MX_USART2_UART_Init+0x4c>)
 80021c4:	f003 f8f4 	bl	80053b0 <HAL_UART_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021ce:	f000 f957 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	2000025c 	.word	0x2000025c
 80021dc:	40004400 	.word	0x40004400

080021e0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_Init 0 */
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */
  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80021e4:	4b11      	ldr	r3, [pc, #68]	@ (800222c <MX_USART6_UART_Init+0x4c>)
 80021e6:	4a12      	ldr	r2, [pc, #72]	@ (8002230 <MX_USART6_UART_Init+0x50>)
 80021e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80021ea:	4b10      	ldr	r3, [pc, #64]	@ (800222c <MX_USART6_UART_Init+0x4c>)
 80021ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80021f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80021f2:	4b0e      	ldr	r3, [pc, #56]	@ (800222c <MX_USART6_UART_Init+0x4c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80021f8:	4b0c      	ldr	r3, [pc, #48]	@ (800222c <MX_USART6_UART_Init+0x4c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80021fe:	4b0b      	ldr	r3, [pc, #44]	@ (800222c <MX_USART6_UART_Init+0x4c>)
 8002200:	2200      	movs	r2, #0
 8002202:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002204:	4b09      	ldr	r3, [pc, #36]	@ (800222c <MX_USART6_UART_Init+0x4c>)
 8002206:	220c      	movs	r2, #12
 8002208:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800220a:	4b08      	ldr	r3, [pc, #32]	@ (800222c <MX_USART6_UART_Init+0x4c>)
 800220c:	2200      	movs	r2, #0
 800220e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002210:	4b06      	ldr	r3, [pc, #24]	@ (800222c <MX_USART6_UART_Init+0x4c>)
 8002212:	2200      	movs	r2, #0
 8002214:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002216:	4805      	ldr	r0, [pc, #20]	@ (800222c <MX_USART6_UART_Init+0x4c>)
 8002218:	f003 f8ca 	bl	80053b0 <HAL_UART_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002222:	f000 f92d 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */
  /* USER CODE END USART6_Init 2 */

}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200002a4 	.word	0x200002a4
 8002230:	40011400 	.word	0x40011400

08002234 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	@ 0x28
 8002238:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223a:	f107 0314 	add.w	r3, r7, #20
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	609a      	str	r2, [r3, #8]
 8002246:	60da      	str	r2, [r3, #12]
 8002248:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	4b4d      	ldr	r3, [pc, #308]	@ (8002384 <MX_GPIO_Init+0x150>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	4a4c      	ldr	r2, [pc, #304]	@ (8002384 <MX_GPIO_Init+0x150>)
 8002254:	f043 0304 	orr.w	r3, r3, #4
 8002258:	6313      	str	r3, [r2, #48]	@ 0x30
 800225a:	4b4a      	ldr	r3, [pc, #296]	@ (8002384 <MX_GPIO_Init+0x150>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	4b46      	ldr	r3, [pc, #280]	@ (8002384 <MX_GPIO_Init+0x150>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	4a45      	ldr	r2, [pc, #276]	@ (8002384 <MX_GPIO_Init+0x150>)
 8002270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002274:	6313      	str	r3, [r2, #48]	@ 0x30
 8002276:	4b43      	ldr	r3, [pc, #268]	@ (8002384 <MX_GPIO_Init+0x150>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	4b3f      	ldr	r3, [pc, #252]	@ (8002384 <MX_GPIO_Init+0x150>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	4a3e      	ldr	r2, [pc, #248]	@ (8002384 <MX_GPIO_Init+0x150>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6313      	str	r3, [r2, #48]	@ 0x30
 8002292:	4b3c      	ldr	r3, [pc, #240]	@ (8002384 <MX_GPIO_Init+0x150>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	4b38      	ldr	r3, [pc, #224]	@ (8002384 <MX_GPIO_Init+0x150>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	4a37      	ldr	r2, [pc, #220]	@ (8002384 <MX_GPIO_Init+0x150>)
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ae:	4b35      	ldr	r3, [pc, #212]	@ (8002384 <MX_GPIO_Init+0x150>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_Blue_Pin|LED_Green_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 80022ba:	2200      	movs	r2, #0
 80022bc:	f44f 51c9 	mov.w	r1, #6432	@ 0x1920
 80022c0:	4831      	ldr	r0, [pc, #196]	@ (8002388 <MX_GPIO_Init+0x154>)
 80022c2:	f001 fb61 	bl	8003988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGIT_A3_Pin|DIGIT_A0_Pin|DIGIT_A1_Pin|DIGIT_A2_Pin, GPIO_PIN_RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
 80022cc:	482f      	ldr	r0, [pc, #188]	@ (800238c <MX_GPIO_Init+0x158>)
 80022ce:	f001 fb5b 	bl	8003988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIGIT_B0_Pin|DIGIT_B1_Pin|DIGIT_B2_Pin|DIGIT_B3_Pin, GPIO_PIN_RESET);
 80022d2:	2200      	movs	r2, #0
 80022d4:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 80022d8:	482d      	ldr	r0, [pc, #180]	@ (8002390 <MX_GPIO_Init+0x15c>)
 80022da:	f001 fb55 	bl	8003988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 80022de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	4619      	mov	r1, r3
 80022f2:	4827      	ldr	r0, [pc, #156]	@ (8002390 <MX_GPIO_Init+0x15c>)
 80022f4:	f001 f9ac 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED_Blue_Pin LED_Green_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_Blue_Pin|LED_Green_Pin|LED_Red_Pin;
 80022f8:	f44f 53c9 	mov.w	r3, #6432	@ 0x1920
 80022fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fe:	2301      	movs	r3, #1
 8002300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	2300      	movs	r3, #0
 8002308:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	4619      	mov	r1, r3
 8002310:	481d      	ldr	r0, [pc, #116]	@ (8002388 <MX_GPIO_Init+0x154>)
 8002312:	f001 f99d 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pin : RPM_TICK_Pin */
  GPIO_InitStruct.Pin = RPM_TICK_Pin;
 8002316:	2304      	movs	r3, #4
 8002318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800231a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800231e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_TICK_GPIO_Port, &GPIO_InitStruct);
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	4619      	mov	r1, r3
 800232a:	4818      	ldr	r0, [pc, #96]	@ (800238c <MX_GPIO_Init+0x158>)
 800232c:	f001 f990 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT_A3_Pin DIGIT_A0_Pin DIGIT_A1_Pin DIGIT_A2_Pin */
  GPIO_InitStruct.Pin = DIGIT_A3_Pin|DIGIT_A0_Pin|DIGIT_A1_Pin|DIGIT_A2_Pin;
 8002330:	f44f 63e4 	mov.w	r3, #1824	@ 0x720
 8002334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002336:	2301      	movs	r3, #1
 8002338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	2300      	movs	r3, #0
 8002340:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002342:	f107 0314 	add.w	r3, r7, #20
 8002346:	4619      	mov	r1, r3
 8002348:	4810      	ldr	r0, [pc, #64]	@ (800238c <MX_GPIO_Init+0x158>)
 800234a:	f001 f981 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT_B0_Pin DIGIT_B1_Pin DIGIT_B2_Pin DIGIT_B3_Pin */
  GPIO_InitStruct.Pin = DIGIT_B0_Pin|DIGIT_B1_Pin|DIGIT_B2_Pin|DIGIT_B3_Pin;
 800234e:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8002352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002354:	2301      	movs	r3, #1
 8002356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	4619      	mov	r1, r3
 8002366:	480a      	ldr	r0, [pc, #40]	@ (8002390 <MX_GPIO_Init+0x15c>)
 8002368:	f001 f972 	bl	8003650 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800236c:	2200      	movs	r2, #0
 800236e:	2100      	movs	r1, #0
 8002370:	2008      	movs	r0, #8
 8002372:	f001 f8a4 	bl	80034be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002376:	2008      	movs	r0, #8
 8002378:	f001 f8bd 	bl	80034f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800237c:	bf00      	nop
 800237e:	3728      	adds	r7, #40	@ 0x28
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40023800 	.word	0x40023800
 8002388:	40020000 	.word	0x40020000
 800238c:	40020400 	.word	0x40020400
 8002390:	40020800 	.word	0x40020800

08002394 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART6) {
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a12      	ldr	r2, [pc, #72]	@ (80023ec <HAL_UART_RxCpltCallback+0x58>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d115      	bne.n	80023d2 <HAL_UART_RxCpltCallback+0x3e>
		if (single_digit) {
 80023a6:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <HAL_UART_RxCpltCallback+0x5c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d007      	beq.n	80023be <HAL_UART_RxCpltCallback+0x2a>
			HAL_UART_Transmit(&huart6, double_byte, 1, HAL_MAX_DELAY);
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295
 80023b2:	2201      	movs	r2, #1
 80023b4:	490f      	ldr	r1, [pc, #60]	@ (80023f4 <HAL_UART_RxCpltCallback+0x60>)
 80023b6:	4810      	ldr	r0, [pc, #64]	@ (80023f8 <HAL_UART_RxCpltCallback+0x64>)
 80023b8:	f003 f84a 	bl	8005450 <HAL_UART_Transmit>
 80023bc:	e006      	b.n	80023cc <HAL_UART_RxCpltCallback+0x38>
		} else {
			HAL_UART_Transmit(&huart6, double_byte, 2, HAL_MAX_DELAY);
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	2202      	movs	r2, #2
 80023c4:	490b      	ldr	r1, [pc, #44]	@ (80023f4 <HAL_UART_RxCpltCallback+0x60>)
 80023c6:	480c      	ldr	r0, [pc, #48]	@ (80023f8 <HAL_UART_RxCpltCallback+0x64>)
 80023c8:	f003 f842 	bl	8005450 <HAL_UART_Transmit>
		}
		rcv_intpt_flag = 1;
 80023cc:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <HAL_UART_RxCpltCallback+0x68>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	701a      	strb	r2, [r3, #0]
	}

	if (huart->Instance == USART1) {
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002400 <HAL_UART_RxCpltCallback+0x6c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d102      	bne.n	80023e2 <HAL_UART_RxCpltCallback+0x4e>
		us100_Rx_flag = 1;
 80023dc:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <HAL_UART_RxCpltCallback+0x70>)
 80023de:	2201      	movs	r2, #1
 80023e0:	701a      	strb	r2, [r3, #0]
	}
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40011400 	.word	0x40011400
 80023f0:	20000008 	.word	0x20000008
 80023f4:	200000ec 	.word	0x200000ec
 80023f8:	200002a4 	.word	0x200002a4
 80023fc:	200000a6 	.word	0x200000a6
 8002400:	40011000 	.word	0x40011000
 8002404:	2000009f 	.word	0x2000009f

08002408 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin) {
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == RPM_TICK_Pin) {
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	2b04      	cmp	r3, #4
 8002416:	d105      	bne.n	8002424 <HAL_GPIO_EXTI_Callback+0x1c>
		rpm_tick_count++;
 8002418:	4b05      	ldr	r3, [pc, #20]	@ (8002430 <HAL_GPIO_EXTI_Callback+0x28>)
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	3301      	adds	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	4b03      	ldr	r3, [pc, #12]	@ (8002430 <HAL_GPIO_EXTI_Callback+0x28>)
 8002422:	801a      	strh	r2, [r3, #0]
	}
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	200000a8 	.word	0x200000a8

08002434 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0b      	ldr	r2, [pc, #44]	@ (8002470 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d10e      	bne.n	8002464 <HAL_TIM_PeriodElapsedCallback+0x30>
		clock_secs++;
 8002446:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	3301      	adds	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	4b09      	ldr	r3, [pc, #36]	@ (8002474 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002450:	801a      	strh	r2, [r3, #0]
		clock_hours = clock_secs/12;
 8002452:	4b08      	ldr	r3, [pc, #32]	@ (8002474 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	4a08      	ldr	r2, [pc, #32]	@ (8002478 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	08db      	lsrs	r3, r3, #3
 800245e:	b29a      	uxth	r2, r3
 8002460:	4b06      	ldr	r3, [pc, #24]	@ (800247c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002462:	801a      	strh	r2, [r3, #0]
	}
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	40000c00 	.word	0x40000c00
 8002474:	2000009c 	.word	0x2000009c
 8002478:	aaaaaaab 	.word	0xaaaaaaab
 800247c:	2000009a 	.word	0x2000009a

08002480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	607b      	str	r3, [r7, #4]
 800249a:	4b10      	ldr	r3, [pc, #64]	@ (80024dc <HAL_MspInit+0x4c>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	4a0f      	ldr	r2, [pc, #60]	@ (80024dc <HAL_MspInit+0x4c>)
 80024a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024a6:	4b0d      	ldr	r3, [pc, #52]	@ (80024dc <HAL_MspInit+0x4c>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	603b      	str	r3, [r7, #0]
 80024b6:	4b09      	ldr	r3, [pc, #36]	@ (80024dc <HAL_MspInit+0x4c>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	4a08      	ldr	r2, [pc, #32]	@ (80024dc <HAL_MspInit+0x4c>)
 80024bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024c2:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <HAL_MspInit+0x4c>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024ce:	2007      	movs	r0, #7
 80024d0:	f000 ffea 	bl	80034a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40023800 	.word	0x40023800

080024e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	@ 0x28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0314 	add.w	r3, r7, #20
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a17      	ldr	r2, [pc, #92]	@ (800255c <HAL_ADC_MspInit+0x7c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d127      	bne.n	8002552 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	4b16      	ldr	r3, [pc, #88]	@ (8002560 <HAL_ADC_MspInit+0x80>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	4a15      	ldr	r2, [pc, #84]	@ (8002560 <HAL_ADC_MspInit+0x80>)
 800250c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002510:	6453      	str	r3, [r2, #68]	@ 0x44
 8002512:	4b13      	ldr	r3, [pc, #76]	@ (8002560 <HAL_ADC_MspInit+0x80>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	4b0f      	ldr	r3, [pc, #60]	@ (8002560 <HAL_ADC_MspInit+0x80>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	4a0e      	ldr	r2, [pc, #56]	@ (8002560 <HAL_ADC_MspInit+0x80>)
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	6313      	str	r3, [r2, #48]	@ 0x30
 800252e:	4b0c      	ldr	r3, [pc, #48]	@ (8002560 <HAL_ADC_MspInit+0x80>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800253a:	2302      	movs	r3, #2
 800253c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800253e:	2303      	movs	r3, #3
 8002540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	4619      	mov	r1, r3
 800254c:	4805      	ldr	r0, [pc, #20]	@ (8002564 <HAL_ADC_MspInit+0x84>)
 800254e:	f001 f87f 	bl	8003650 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002552:	bf00      	nop
 8002554:	3728      	adds	r7, #40	@ 0x28
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40012000 	.word	0x40012000
 8002560:	40023800 	.word	0x40023800
 8002564:	40020400 	.word	0x40020400

08002568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002578:	d10e      	bne.n	8002598 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	4b20      	ldr	r3, [pc, #128]	@ (8002600 <HAL_TIM_Base_MspInit+0x98>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	4a1f      	ldr	r2, [pc, #124]	@ (8002600 <HAL_TIM_Base_MspInit+0x98>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6413      	str	r3, [r2, #64]	@ 0x40
 800258a:	4b1d      	ldr	r3, [pc, #116]	@ (8002600 <HAL_TIM_Base_MspInit+0x98>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002596:	e02e      	b.n	80025f6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a19      	ldr	r2, [pc, #100]	@ (8002604 <HAL_TIM_Base_MspInit+0x9c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d10e      	bne.n	80025c0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	4b16      	ldr	r3, [pc, #88]	@ (8002600 <HAL_TIM_Base_MspInit+0x98>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	4a15      	ldr	r2, [pc, #84]	@ (8002600 <HAL_TIM_Base_MspInit+0x98>)
 80025ac:	f043 0302 	orr.w	r3, r3, #2
 80025b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025b2:	4b13      	ldr	r3, [pc, #76]	@ (8002600 <HAL_TIM_Base_MspInit+0x98>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	693b      	ldr	r3, [r7, #16]
}
 80025be:	e01a      	b.n	80025f6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a10      	ldr	r2, [pc, #64]	@ (8002608 <HAL_TIM_Base_MspInit+0xa0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d115      	bne.n	80025f6 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <HAL_TIM_Base_MspInit+0x98>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002600 <HAL_TIM_Base_MspInit+0x98>)
 80025d4:	f043 0308 	orr.w	r3, r3, #8
 80025d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025da:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <HAL_TIM_Base_MspInit+0x98>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80025e6:	2200      	movs	r2, #0
 80025e8:	2100      	movs	r1, #0
 80025ea:	2032      	movs	r0, #50	@ 0x32
 80025ec:	f000 ff67 	bl	80034be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80025f0:	2032      	movs	r0, #50	@ 0x32
 80025f2:	f000 ff80 	bl	80034f6 <HAL_NVIC_EnableIRQ>
}
 80025f6:	bf00      	nop
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40023800 	.word	0x40023800
 8002604:	40000400 	.word	0x40000400
 8002608:	40000c00 	.word	0x40000c00

0800260c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	@ 0x28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800262c:	d11e      	bne.n	800266c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	4b31      	ldr	r3, [pc, #196]	@ (80026f8 <HAL_TIM_MspPostInit+0xec>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002636:	4a30      	ldr	r2, [pc, #192]	@ (80026f8 <HAL_TIM_MspPostInit+0xec>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6313      	str	r3, [r2, #48]	@ 0x30
 800263e:	4b2e      	ldr	r3, [pc, #184]	@ (80026f8 <HAL_TIM_MspPostInit+0xec>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Servo_Motor_Pin;
 800264a:	2301      	movs	r3, #1
 800264c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002656:	2300      	movs	r3, #0
 8002658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800265a:	2301      	movs	r3, #1
 800265c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Servo_Motor_GPIO_Port, &GPIO_InitStruct);
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	4619      	mov	r1, r3
 8002664:	4825      	ldr	r0, [pc, #148]	@ (80026fc <HAL_TIM_MspPostInit+0xf0>)
 8002666:	f000 fff3 	bl	8003650 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800266a:	e040      	b.n	80026ee <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a23      	ldr	r2, [pc, #140]	@ (8002700 <HAL_TIM_MspPostInit+0xf4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d13b      	bne.n	80026ee <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	4b1f      	ldr	r3, [pc, #124]	@ (80026f8 <HAL_TIM_MspPostInit+0xec>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	4a1e      	ldr	r2, [pc, #120]	@ (80026f8 <HAL_TIM_MspPostInit+0xec>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6313      	str	r3, [r2, #48]	@ 0x30
 8002686:	4b1c      	ldr	r3, [pc, #112]	@ (80026f8 <HAL_TIM_MspPostInit+0xec>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	4b18      	ldr	r3, [pc, #96]	@ (80026f8 <HAL_TIM_MspPostInit+0xec>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	4a17      	ldr	r2, [pc, #92]	@ (80026f8 <HAL_TIM_MspPostInit+0xec>)
 800269c:	f043 0302 	orr.w	r3, r3, #2
 80026a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a2:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <HAL_TIM_MspPostInit+0xec>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DC_Motor_CH1_Pin;
 80026ae:	2340      	movs	r3, #64	@ 0x40
 80026b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ba:	2300      	movs	r3, #0
 80026bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026be:	2302      	movs	r3, #2
 80026c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DC_Motor_CH1_GPIO_Port, &GPIO_InitStruct);
 80026c2:	f107 0314 	add.w	r3, r7, #20
 80026c6:	4619      	mov	r1, r3
 80026c8:	480c      	ldr	r0, [pc, #48]	@ (80026fc <HAL_TIM_MspPostInit+0xf0>)
 80026ca:	f000 ffc1 	bl	8003650 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DC_Motor_CH3_Pin;
 80026ce:	2301      	movs	r3, #1
 80026d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	2300      	movs	r3, #0
 80026dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026de:	2302      	movs	r3, #2
 80026e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DC_Motor_CH3_GPIO_Port, &GPIO_InitStruct);
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	4619      	mov	r1, r3
 80026e8:	4806      	ldr	r0, [pc, #24]	@ (8002704 <HAL_TIM_MspPostInit+0xf8>)
 80026ea:	f000 ffb1 	bl	8003650 <HAL_GPIO_Init>
}
 80026ee:	bf00      	nop
 80026f0:	3728      	adds	r7, #40	@ 0x28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40020000 	.word	0x40020000
 8002700:	40000400 	.word	0x40000400
 8002704:	40020400 	.word	0x40020400

08002708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08e      	sub	sp, #56	@ 0x38
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a53      	ldr	r2, [pc, #332]	@ (8002874 <HAL_UART_MspInit+0x16c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d135      	bne.n	8002796 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	623b      	str	r3, [r7, #32]
 800272e:	4b52      	ldr	r3, [pc, #328]	@ (8002878 <HAL_UART_MspInit+0x170>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002732:	4a51      	ldr	r2, [pc, #324]	@ (8002878 <HAL_UART_MspInit+0x170>)
 8002734:	f043 0310 	orr.w	r3, r3, #16
 8002738:	6453      	str	r3, [r2, #68]	@ 0x44
 800273a:	4b4f      	ldr	r3, [pc, #316]	@ (8002878 <HAL_UART_MspInit+0x170>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	623b      	str	r3, [r7, #32]
 8002744:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	4b4b      	ldr	r3, [pc, #300]	@ (8002878 <HAL_UART_MspInit+0x170>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	4a4a      	ldr	r2, [pc, #296]	@ (8002878 <HAL_UART_MspInit+0x170>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6313      	str	r3, [r2, #48]	@ 0x30
 8002756:	4b48      	ldr	r3, [pc, #288]	@ (8002878 <HAL_UART_MspInit+0x170>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	61fb      	str	r3, [r7, #28]
 8002760:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = US100_TRIG_Pin|US100_ECHO_Pin;
 8002762:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002766:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002768:	2302      	movs	r3, #2
 800276a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002770:	2303      	movs	r3, #3
 8002772:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002774:	2307      	movs	r3, #7
 8002776:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800277c:	4619      	mov	r1, r3
 800277e:	483f      	ldr	r0, [pc, #252]	@ (800287c <HAL_UART_MspInit+0x174>)
 8002780:	f000 ff66 	bl	8003650 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002784:	2200      	movs	r2, #0
 8002786:	2100      	movs	r1, #0
 8002788:	2025      	movs	r0, #37	@ 0x25
 800278a:	f000 fe98 	bl	80034be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800278e:	2025      	movs	r0, #37	@ 0x25
 8002790:	f000 feb1 	bl	80034f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002794:	e06a      	b.n	800286c <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a39      	ldr	r2, [pc, #228]	@ (8002880 <HAL_UART_MspInit+0x178>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d12c      	bne.n	80027fa <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027a0:	2300      	movs	r3, #0
 80027a2:	61bb      	str	r3, [r7, #24]
 80027a4:	4b34      	ldr	r3, [pc, #208]	@ (8002878 <HAL_UART_MspInit+0x170>)
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	4a33      	ldr	r2, [pc, #204]	@ (8002878 <HAL_UART_MspInit+0x170>)
 80027aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80027b0:	4b31      	ldr	r3, [pc, #196]	@ (8002878 <HAL_UART_MspInit+0x170>)
 80027b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002878 <HAL_UART_MspInit+0x170>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002878 <HAL_UART_MspInit+0x170>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80027cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002878 <HAL_UART_MspInit+0x170>)
 80027ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027d8:	230c      	movs	r3, #12
 80027da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027dc:	2302      	movs	r3, #2
 80027de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e4:	2300      	movs	r3, #0
 80027e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027e8:	2307      	movs	r3, #7
 80027ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027f0:	4619      	mov	r1, r3
 80027f2:	4822      	ldr	r0, [pc, #136]	@ (800287c <HAL_UART_MspInit+0x174>)
 80027f4:	f000 ff2c 	bl	8003650 <HAL_GPIO_Init>
}
 80027f8:	e038      	b.n	800286c <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a21      	ldr	r2, [pc, #132]	@ (8002884 <HAL_UART_MspInit+0x17c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d133      	bne.n	800286c <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002804:	2300      	movs	r3, #0
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <HAL_UART_MspInit+0x170>)
 800280a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280c:	4a1a      	ldr	r2, [pc, #104]	@ (8002878 <HAL_UART_MspInit+0x170>)
 800280e:	f043 0320 	orr.w	r3, r3, #32
 8002812:	6453      	str	r3, [r2, #68]	@ 0x44
 8002814:	4b18      	ldr	r3, [pc, #96]	@ (8002878 <HAL_UART_MspInit+0x170>)
 8002816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	4b14      	ldr	r3, [pc, #80]	@ (8002878 <HAL_UART_MspInit+0x170>)
 8002826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002828:	4a13      	ldr	r2, [pc, #76]	@ (8002878 <HAL_UART_MspInit+0x170>)
 800282a:	f043 0304 	orr.w	r3, r3, #4
 800282e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002830:	4b11      	ldr	r3, [pc, #68]	@ (8002878 <HAL_UART_MspInit+0x170>)
 8002832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800283c:	23c0      	movs	r3, #192	@ 0xc0
 800283e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002848:	2303      	movs	r3, #3
 800284a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800284c:	2308      	movs	r3, #8
 800284e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002854:	4619      	mov	r1, r3
 8002856:	480c      	ldr	r0, [pc, #48]	@ (8002888 <HAL_UART_MspInit+0x180>)
 8002858:	f000 fefa 	bl	8003650 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800285c:	2200      	movs	r2, #0
 800285e:	2100      	movs	r1, #0
 8002860:	2047      	movs	r0, #71	@ 0x47
 8002862:	f000 fe2c 	bl	80034be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002866:	2047      	movs	r0, #71	@ 0x47
 8002868:	f000 fe45 	bl	80034f6 <HAL_NVIC_EnableIRQ>
}
 800286c:	bf00      	nop
 800286e:	3738      	adds	r7, #56	@ 0x38
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40011000 	.word	0x40011000
 8002878:	40023800 	.word	0x40023800
 800287c:	40020000 	.word	0x40020000
 8002880:	40004400 	.word	0x40004400
 8002884:	40011400 	.word	0x40011400
 8002888:	40020800 	.word	0x40020800

0800288c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002890:	bf00      	nop
 8002892:	e7fd      	b.n	8002890 <NMI_Handler+0x4>

08002894 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002898:	bf00      	nop
 800289a:	e7fd      	b.n	8002898 <HardFault_Handler+0x4>

0800289c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028a0:	bf00      	nop
 80028a2:	e7fd      	b.n	80028a0 <MemManage_Handler+0x4>

080028a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <BusFault_Handler+0x4>

080028ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <UsageFault_Handler+0x4>

080028b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028e2:	f000 f8eb 	bl	8002abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}

080028ea <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPM_TICK_Pin);
 80028ee:	2004      	movs	r0, #4
 80028f0:	f001 f864 	bl	80039bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028fc:	4802      	ldr	r0, [pc, #8]	@ (8002908 <USART1_IRQHandler+0x10>)
 80028fe:	f002 fe57 	bl	80055b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000214 	.word	0x20000214

0800290c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002910:	4802      	ldr	r0, [pc, #8]	@ (800291c <TIM5_IRQHandler+0x10>)
 8002912:	f001 ff51 	bl	80047b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	200001cc 	.word	0x200001cc

08002920 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002924:	4802      	ldr	r0, [pc, #8]	@ (8002930 <USART6_IRQHandler+0x10>)
 8002926:	f002 fe43 	bl	80055b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	200002a4 	.word	0x200002a4

08002934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800293c:	4a14      	ldr	r2, [pc, #80]	@ (8002990 <_sbrk+0x5c>)
 800293e:	4b15      	ldr	r3, [pc, #84]	@ (8002994 <_sbrk+0x60>)
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002948:	4b13      	ldr	r3, [pc, #76]	@ (8002998 <_sbrk+0x64>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d102      	bne.n	8002956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002950:	4b11      	ldr	r3, [pc, #68]	@ (8002998 <_sbrk+0x64>)
 8002952:	4a12      	ldr	r2, [pc, #72]	@ (800299c <_sbrk+0x68>)
 8002954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002956:	4b10      	ldr	r3, [pc, #64]	@ (8002998 <_sbrk+0x64>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	429a      	cmp	r2, r3
 8002962:	d207      	bcs.n	8002974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002964:	f003 fe2a 	bl	80065bc <__errno>
 8002968:	4603      	mov	r3, r0
 800296a:	220c      	movs	r2, #12
 800296c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800296e:	f04f 33ff 	mov.w	r3, #4294967295
 8002972:	e009      	b.n	8002988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002974:	4b08      	ldr	r3, [pc, #32]	@ (8002998 <_sbrk+0x64>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800297a:	4b07      	ldr	r3, [pc, #28]	@ (8002998 <_sbrk+0x64>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4413      	add	r3, r2
 8002982:	4a05      	ldr	r2, [pc, #20]	@ (8002998 <_sbrk+0x64>)
 8002984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002986:	68fb      	ldr	r3, [r7, #12]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20018000 	.word	0x20018000
 8002994:	00000400 	.word	0x00000400
 8002998:	200002ec 	.word	0x200002ec
 800299c:	20000440 	.word	0x20000440

080029a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029a4:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <SystemInit+0x20>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029aa:	4a05      	ldr	r2, [pc, #20]	@ (80029c0 <SystemInit+0x20>)
 80029ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80029c8:	f7ff ffea 	bl	80029a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029cc:	480c      	ldr	r0, [pc, #48]	@ (8002a00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029ce:	490d      	ldr	r1, [pc, #52]	@ (8002a04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029d4:	e002      	b.n	80029dc <LoopCopyDataInit>

080029d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029da:	3304      	adds	r3, #4

080029dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e0:	d3f9      	bcc.n	80029d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029e2:	4a0a      	ldr	r2, [pc, #40]	@ (8002a0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002a10 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e8:	e001      	b.n	80029ee <LoopFillZerobss>

080029ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029ec:	3204      	adds	r2, #4

080029ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f0:	d3fb      	bcc.n	80029ea <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80029f2:	f003 fde9 	bl	80065c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029f6:	f7fe ffa1 	bl	800193c <main>
  bx  lr    
 80029fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a04:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002a08:	08007244 	.word	0x08007244
  ldr r2, =_sbss
 8002a0c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002a10:	2000043c 	.word	0x2000043c

08002a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a14:	e7fe      	b.n	8002a14 <ADC_IRQHandler>
	...

08002a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a58 <HAL_Init+0x40>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a0d      	ldr	r2, [pc, #52]	@ (8002a58 <HAL_Init+0x40>)
 8002a22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a28:	4b0b      	ldr	r3, [pc, #44]	@ (8002a58 <HAL_Init+0x40>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a58 <HAL_Init+0x40>)
 8002a2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a34:	4b08      	ldr	r3, [pc, #32]	@ (8002a58 <HAL_Init+0x40>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a07      	ldr	r2, [pc, #28]	@ (8002a58 <HAL_Init+0x40>)
 8002a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a40:	2003      	movs	r0, #3
 8002a42:	f000 fd31 	bl	80034a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a46:	2000      	movs	r0, #0
 8002a48:	f000 f808 	bl	8002a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a4c:	f7ff fd20 	bl	8002490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40023c00 	.word	0x40023c00

08002a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a64:	4b12      	ldr	r3, [pc, #72]	@ (8002ab0 <HAL_InitTick+0x54>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b12      	ldr	r3, [pc, #72]	@ (8002ab4 <HAL_InitTick+0x58>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fd49 	bl	8003512 <HAL_SYSTICK_Config>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e00e      	b.n	8002aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b0f      	cmp	r3, #15
 8002a8e:	d80a      	bhi.n	8002aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a90:	2200      	movs	r2, #0
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295
 8002a98:	f000 fd11 	bl	80034be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a9c:	4a06      	ldr	r2, [pc, #24]	@ (8002ab8 <HAL_InitTick+0x5c>)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	e000      	b.n	8002aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	2000000c 	.word	0x2000000c
 8002ab4:	20000014 	.word	0x20000014
 8002ab8:	20000010 	.word	0x20000010

08002abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <HAL_IncTick+0x20>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <HAL_IncTick+0x24>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	4a04      	ldr	r2, [pc, #16]	@ (8002ae0 <HAL_IncTick+0x24>)
 8002ace:	6013      	str	r3, [r2, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000014 	.word	0x20000014
 8002ae0:	200002f0 	.word	0x200002f0

08002ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	@ (8002af8 <HAL_GetTick+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	200002f0 	.word	0x200002f0

08002afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b04:	f7ff ffee 	bl	8002ae4 <HAL_GetTick>
 8002b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d005      	beq.n	8002b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b16:	4b0a      	ldr	r3, [pc, #40]	@ (8002b40 <HAL_Delay+0x44>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b22:	bf00      	nop
 8002b24:	f7ff ffde 	bl	8002ae4 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d8f7      	bhi.n	8002b24 <HAL_Delay+0x28>
  {
  }
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000014 	.word	0x20000014

08002b44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e033      	b.n	8002bc2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d109      	bne.n	8002b76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff fcbc 	bl	80024e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d118      	bne.n	8002bb4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b86:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b8a:	f023 0302 	bic.w	r3, r3, #2
 8002b8e:	f043 0202 	orr.w	r2, r3, #2
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 faba 	bl	8003110 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	f023 0303 	bic.w	r3, r3, #3
 8002baa:	f043 0201 	orr.w	r2, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bb2:	e001      	b.n	8002bb8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_ADC_Start+0x1a>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e097      	b.n	8002d16 <HAL_ADC_Start+0x14a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d018      	beq.n	8002c2e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c0c:	4b45      	ldr	r3, [pc, #276]	@ (8002d24 <HAL_ADC_Start+0x158>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a45      	ldr	r2, [pc, #276]	@ (8002d28 <HAL_ADC_Start+0x15c>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	0c9a      	lsrs	r2, r3, #18
 8002c18:	4613      	mov	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002c20:	e002      	b.n	8002c28 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	3b01      	subs	r3, #1
 8002c26:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f9      	bne.n	8002c22 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d15f      	bne.n	8002cfc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d007      	beq.n	8002c6e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c62:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c66:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c7a:	d106      	bne.n	8002c8a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c80:	f023 0206 	bic.w	r2, r3, #6
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c88:	e002      	b.n	8002c90 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c98:	4b24      	ldr	r3, [pc, #144]	@ (8002d2c <HAL_ADC_Start+0x160>)
 8002c9a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002ca4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10f      	bne.n	8002cd2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d129      	bne.n	8002d14 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	e020      	b.n	8002d14 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a16      	ldr	r2, [pc, #88]	@ (8002d30 <HAL_ADC_Start+0x164>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d11b      	bne.n	8002d14 <HAL_ADC_Start+0x148>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d114      	bne.n	8002d14 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	e00b      	b.n	8002d14 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d00:	f043 0210 	orr.w	r2, r3, #16
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0c:	f043 0201 	orr.w	r2, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	2000000c 	.word	0x2000000c
 8002d28:	431bde83 	.word	0x431bde83
 8002d2c:	40012300 	.word	0x40012300
 8002d30:	40012000 	.word	0x40012000

08002d34 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_Stop+0x16>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e021      	b.n	8002d8e <HAL_ADC_Stop+0x5a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0201 	bic.w	r2, r2, #1
 8002d60:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d109      	bne.n	8002d84 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d74:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	f043 0201 	orr.w	r2, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b084      	sub	sp, #16
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002db6:	d113      	bne.n	8002de0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dc6:	d10b      	bne.n	8002de0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dcc:	f043 0220 	orr.w	r2, r3, #32
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e063      	b.n	8002ea8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002de0:	f7ff fe80 	bl	8002ae4 <HAL_GetTick>
 8002de4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002de6:	e021      	b.n	8002e2c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dee:	d01d      	beq.n	8002e2c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d007      	beq.n	8002e06 <HAL_ADC_PollForConversion+0x6c>
 8002df6:	f7ff fe75 	bl	8002ae4 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d212      	bcs.n	8002e2c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d00b      	beq.n	8002e2c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	f043 0204 	orr.w	r2, r3, #4
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e03d      	b.n	8002ea8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d1d6      	bne.n	8002de8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f06f 0212 	mvn.w	r2, #18
 8002e42:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e48:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d123      	bne.n	8002ea6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d11f      	bne.n	8002ea6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d006      	beq.n	8002e82 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d111      	bne.n	8002ea6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d105      	bne.n	8002ea6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	f043 0201 	orr.w	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
	...

08002ecc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x1c>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e105      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x228>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b09      	cmp	r3, #9
 8002ef6:	d925      	bls.n	8002f44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68d9      	ldr	r1, [r3, #12]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3b1e      	subs	r3, #30
 8002f0e:	2207      	movs	r2, #7
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43da      	mvns	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	400a      	ands	r2, r1
 8002f1c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68d9      	ldr	r1, [r3, #12]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	4618      	mov	r0, r3
 8002f30:	4603      	mov	r3, r0
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4403      	add	r3, r0
 8002f36:	3b1e      	subs	r3, #30
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	e022      	b.n	8002f8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6919      	ldr	r1, [r3, #16]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	4613      	mov	r3, r2
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4413      	add	r3, r2
 8002f58:	2207      	movs	r2, #7
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	400a      	ands	r2, r1
 8002f66:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6919      	ldr	r1, [r3, #16]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	4618      	mov	r0, r3
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4403      	add	r3, r0
 8002f80:	409a      	lsls	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b06      	cmp	r3, #6
 8002f90:	d824      	bhi.n	8002fdc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3b05      	subs	r3, #5
 8002fa4:	221f      	movs	r2, #31
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43da      	mvns	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	400a      	ands	r2, r1
 8002fb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	3b05      	subs	r3, #5
 8002fce:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fda:	e04c      	b.n	8003076 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b0c      	cmp	r3, #12
 8002fe2:	d824      	bhi.n	800302e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3b23      	subs	r3, #35	@ 0x23
 8002ff6:	221f      	movs	r2, #31
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43da      	mvns	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	400a      	ands	r2, r1
 8003004:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	b29b      	uxth	r3, r3
 8003012:	4618      	mov	r0, r3
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	3b23      	subs	r3, #35	@ 0x23
 8003020:	fa00 f203 	lsl.w	r2, r0, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	631a      	str	r2, [r3, #48]	@ 0x30
 800302c:	e023      	b.n	8003076 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	3b41      	subs	r3, #65	@ 0x41
 8003040:	221f      	movs	r2, #31
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43da      	mvns	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	400a      	ands	r2, r1
 800304e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	b29b      	uxth	r3, r3
 800305c:	4618      	mov	r0, r3
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	3b41      	subs	r3, #65	@ 0x41
 800306a:	fa00 f203 	lsl.w	r2, r0, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003076:	4b22      	ldr	r3, [pc, #136]	@ (8003100 <HAL_ADC_ConfigChannel+0x234>)
 8003078:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a21      	ldr	r2, [pc, #132]	@ (8003104 <HAL_ADC_ConfigChannel+0x238>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d109      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x1cc>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b12      	cmp	r3, #18
 800308a:	d105      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a19      	ldr	r2, [pc, #100]	@ (8003104 <HAL_ADC_ConfigChannel+0x238>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d123      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x21e>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b10      	cmp	r3, #16
 80030a8:	d003      	beq.n	80030b2 <HAL_ADC_ConfigChannel+0x1e6>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b11      	cmp	r3, #17
 80030b0:	d11b      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b10      	cmp	r3, #16
 80030c4:	d111      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030c6:	4b10      	ldr	r3, [pc, #64]	@ (8003108 <HAL_ADC_ConfigChannel+0x23c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a10      	ldr	r2, [pc, #64]	@ (800310c <HAL_ADC_ConfigChannel+0x240>)
 80030cc:	fba2 2303 	umull	r2, r3, r2, r3
 80030d0:	0c9a      	lsrs	r2, r3, #18
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80030dc:	e002      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f9      	bne.n	80030de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	40012300 	.word	0x40012300
 8003104:	40012000 	.word	0x40012000
 8003108:	2000000c 	.word	0x2000000c
 800310c:	431bde83 	.word	0x431bde83

08003110 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003118:	4b79      	ldr	r3, [pc, #484]	@ (8003300 <ADC_Init+0x1f0>)
 800311a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	431a      	orrs	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003144:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	021a      	lsls	r2, r3, #8
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003168:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800318a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6899      	ldr	r1, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a2:	4a58      	ldr	r2, [pc, #352]	@ (8003304 <ADC_Init+0x1f4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d022      	beq.n	80031ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6899      	ldr	r1, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80031d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6899      	ldr	r1, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	e00f      	b.n	800320e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800320c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0202 	bic.w	r2, r2, #2
 800321c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6899      	ldr	r1, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	7e1b      	ldrb	r3, [r3, #24]
 8003228:	005a      	lsls	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01b      	beq.n	8003274 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800324a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800325a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6859      	ldr	r1, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	3b01      	subs	r3, #1
 8003268:	035a      	lsls	r2, r3, #13
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	e007      	b.n	8003284 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003282:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003292:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	3b01      	subs	r3, #1
 80032a0:	051a      	lsls	r2, r3, #20
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80032b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6899      	ldr	r1, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80032c6:	025a      	lsls	r2, r3, #9
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6899      	ldr	r1, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	029a      	lsls	r2, r3, #10
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	609a      	str	r2, [r3, #8]
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	40012300 	.word	0x40012300
 8003304:	0f000001 	.word	0x0f000001

08003308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003318:	4b0c      	ldr	r3, [pc, #48]	@ (800334c <__NVIC_SetPriorityGrouping+0x44>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003324:	4013      	ands	r3, r2
 8003326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003330:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800333a:	4a04      	ldr	r2, [pc, #16]	@ (800334c <__NVIC_SetPriorityGrouping+0x44>)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	60d3      	str	r3, [r2, #12]
}
 8003340:	bf00      	nop
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003354:	4b04      	ldr	r3, [pc, #16]	@ (8003368 <__NVIC_GetPriorityGrouping+0x18>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	0a1b      	lsrs	r3, r3, #8
 800335a:	f003 0307 	and.w	r3, r3, #7
}
 800335e:	4618      	mov	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337a:	2b00      	cmp	r3, #0
 800337c:	db0b      	blt.n	8003396 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	f003 021f 	and.w	r2, r3, #31
 8003384:	4907      	ldr	r1, [pc, #28]	@ (80033a4 <__NVIC_EnableIRQ+0x38>)
 8003386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	2001      	movs	r0, #1
 800338e:	fa00 f202 	lsl.w	r2, r0, r2
 8003392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	e000e100 	.word	0xe000e100

080033a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	6039      	str	r1, [r7, #0]
 80033b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	db0a      	blt.n	80033d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	490c      	ldr	r1, [pc, #48]	@ (80033f4 <__NVIC_SetPriority+0x4c>)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	0112      	lsls	r2, r2, #4
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	440b      	add	r3, r1
 80033cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033d0:	e00a      	b.n	80033e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4908      	ldr	r1, [pc, #32]	@ (80033f8 <__NVIC_SetPriority+0x50>)
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	3b04      	subs	r3, #4
 80033e0:	0112      	lsls	r2, r2, #4
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	440b      	add	r3, r1
 80033e6:	761a      	strb	r2, [r3, #24]
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000e100 	.word	0xe000e100
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b089      	sub	sp, #36	@ 0x24
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f1c3 0307 	rsb	r3, r3, #7
 8003416:	2b04      	cmp	r3, #4
 8003418:	bf28      	it	cs
 800341a:	2304      	movcs	r3, #4
 800341c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	3304      	adds	r3, #4
 8003422:	2b06      	cmp	r3, #6
 8003424:	d902      	bls.n	800342c <NVIC_EncodePriority+0x30>
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	3b03      	subs	r3, #3
 800342a:	e000      	b.n	800342e <NVIC_EncodePriority+0x32>
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003430:	f04f 32ff 	mov.w	r2, #4294967295
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43da      	mvns	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	401a      	ands	r2, r3
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003444:	f04f 31ff 	mov.w	r1, #4294967295
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	fa01 f303 	lsl.w	r3, r1, r3
 800344e:	43d9      	mvns	r1, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003454:	4313      	orrs	r3, r2
         );
}
 8003456:	4618      	mov	r0, r3
 8003458:	3724      	adds	r7, #36	@ 0x24
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3b01      	subs	r3, #1
 8003470:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003474:	d301      	bcc.n	800347a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003476:	2301      	movs	r3, #1
 8003478:	e00f      	b.n	800349a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800347a:	4a0a      	ldr	r2, [pc, #40]	@ (80034a4 <SysTick_Config+0x40>)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3b01      	subs	r3, #1
 8003480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003482:	210f      	movs	r1, #15
 8003484:	f04f 30ff 	mov.w	r0, #4294967295
 8003488:	f7ff ff8e 	bl	80033a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800348c:	4b05      	ldr	r3, [pc, #20]	@ (80034a4 <SysTick_Config+0x40>)
 800348e:	2200      	movs	r2, #0
 8003490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003492:	4b04      	ldr	r3, [pc, #16]	@ (80034a4 <SysTick_Config+0x40>)
 8003494:	2207      	movs	r2, #7
 8003496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	e000e010 	.word	0xe000e010

080034a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff ff29 	bl	8003308 <__NVIC_SetPriorityGrouping>
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034be:	b580      	push	{r7, lr}
 80034c0:	b086      	sub	sp, #24
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	4603      	mov	r3, r0
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
 80034ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034d0:	f7ff ff3e 	bl	8003350 <__NVIC_GetPriorityGrouping>
 80034d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	6978      	ldr	r0, [r7, #20]
 80034dc:	f7ff ff8e 	bl	80033fc <NVIC_EncodePriority>
 80034e0:	4602      	mov	r2, r0
 80034e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e6:	4611      	mov	r1, r2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff5d 	bl	80033a8 <__NVIC_SetPriority>
}
 80034ee:	bf00      	nop
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	4603      	mov	r3, r0
 80034fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff31 	bl	800336c <__NVIC_EnableIRQ>
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff ffa2 	bl	8003464 <SysTick_Config>
 8003520:	4603      	mov	r3, r0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003536:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003538:	f7ff fad4 	bl	8002ae4 <HAL_GetTick>
 800353c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d008      	beq.n	800355c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2280      	movs	r2, #128	@ 0x80
 800354e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e052      	b.n	8003602 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0216 	bic.w	r2, r2, #22
 800356a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695a      	ldr	r2, [r3, #20]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800357a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	d103      	bne.n	800358c <HAL_DMA_Abort+0x62>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0208 	bic.w	r2, r2, #8
 800359a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0201 	bic.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035ac:	e013      	b.n	80035d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035ae:	f7ff fa99 	bl	8002ae4 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b05      	cmp	r3, #5
 80035ba:	d90c      	bls.n	80035d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2203      	movs	r2, #3
 80035c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e015      	b.n	8003602 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1e4      	bne.n	80035ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e8:	223f      	movs	r2, #63	@ 0x3f
 80035ea:	409a      	lsls	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d004      	beq.n	8003628 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2280      	movs	r2, #128	@ 0x80
 8003622:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e00c      	b.n	8003642 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2205      	movs	r2, #5
 800362c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
	...

08003650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003650:	b480      	push	{r7}
 8003652:	b089      	sub	sp, #36	@ 0x24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800365e:	2300      	movs	r3, #0
 8003660:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003662:	2300      	movs	r3, #0
 8003664:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	e159      	b.n	8003920 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800366c:	2201      	movs	r2, #1
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4013      	ands	r3, r2
 800367e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	429a      	cmp	r2, r3
 8003686:	f040 8148 	bne.w	800391a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b01      	cmp	r3, #1
 8003694:	d005      	beq.n	80036a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d130      	bne.n	8003704 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	2203      	movs	r2, #3
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4013      	ands	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036d8:	2201      	movs	r2, #1
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 0201 	and.w	r2, r3, #1
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	2b03      	cmp	r3, #3
 800370e:	d017      	beq.n	8003740 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	2203      	movs	r2, #3
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	43db      	mvns	r3, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4013      	ands	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4313      	orrs	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 0303 	and.w	r3, r3, #3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d123      	bne.n	8003794 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	08da      	lsrs	r2, r3, #3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3208      	adds	r2, #8
 8003754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003758:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	220f      	movs	r2, #15
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	08da      	lsrs	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3208      	adds	r2, #8
 800378e:	69b9      	ldr	r1, [r7, #24]
 8003790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	2203      	movs	r2, #3
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 0203 	and.w	r2, r3, #3
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4313      	orrs	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 80a2 	beq.w	800391a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	4b57      	ldr	r3, [pc, #348]	@ (8003938 <HAL_GPIO_Init+0x2e8>)
 80037dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037de:	4a56      	ldr	r2, [pc, #344]	@ (8003938 <HAL_GPIO_Init+0x2e8>)
 80037e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80037e6:	4b54      	ldr	r3, [pc, #336]	@ (8003938 <HAL_GPIO_Init+0x2e8>)
 80037e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037f2:	4a52      	ldr	r2, [pc, #328]	@ (800393c <HAL_GPIO_Init+0x2ec>)
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	089b      	lsrs	r3, r3, #2
 80037f8:	3302      	adds	r3, #2
 80037fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	220f      	movs	r2, #15
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43db      	mvns	r3, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4013      	ands	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a49      	ldr	r2, [pc, #292]	@ (8003940 <HAL_GPIO_Init+0x2f0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d019      	beq.n	8003852 <HAL_GPIO_Init+0x202>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a48      	ldr	r2, [pc, #288]	@ (8003944 <HAL_GPIO_Init+0x2f4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d013      	beq.n	800384e <HAL_GPIO_Init+0x1fe>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a47      	ldr	r2, [pc, #284]	@ (8003948 <HAL_GPIO_Init+0x2f8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00d      	beq.n	800384a <HAL_GPIO_Init+0x1fa>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a46      	ldr	r2, [pc, #280]	@ (800394c <HAL_GPIO_Init+0x2fc>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d007      	beq.n	8003846 <HAL_GPIO_Init+0x1f6>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a45      	ldr	r2, [pc, #276]	@ (8003950 <HAL_GPIO_Init+0x300>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d101      	bne.n	8003842 <HAL_GPIO_Init+0x1f2>
 800383e:	2304      	movs	r3, #4
 8003840:	e008      	b.n	8003854 <HAL_GPIO_Init+0x204>
 8003842:	2307      	movs	r3, #7
 8003844:	e006      	b.n	8003854 <HAL_GPIO_Init+0x204>
 8003846:	2303      	movs	r3, #3
 8003848:	e004      	b.n	8003854 <HAL_GPIO_Init+0x204>
 800384a:	2302      	movs	r3, #2
 800384c:	e002      	b.n	8003854 <HAL_GPIO_Init+0x204>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <HAL_GPIO_Init+0x204>
 8003852:	2300      	movs	r3, #0
 8003854:	69fa      	ldr	r2, [r7, #28]
 8003856:	f002 0203 	and.w	r2, r2, #3
 800385a:	0092      	lsls	r2, r2, #2
 800385c:	4093      	lsls	r3, r2
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4313      	orrs	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003864:	4935      	ldr	r1, [pc, #212]	@ (800393c <HAL_GPIO_Init+0x2ec>)
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	089b      	lsrs	r3, r3, #2
 800386a:	3302      	adds	r3, #2
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003872:	4b38      	ldr	r3, [pc, #224]	@ (8003954 <HAL_GPIO_Init+0x304>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	43db      	mvns	r3, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4013      	ands	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003896:	4a2f      	ldr	r2, [pc, #188]	@ (8003954 <HAL_GPIO_Init+0x304>)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800389c:	4b2d      	ldr	r3, [pc, #180]	@ (8003954 <HAL_GPIO_Init+0x304>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	43db      	mvns	r3, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038c0:	4a24      	ldr	r2, [pc, #144]	@ (8003954 <HAL_GPIO_Init+0x304>)
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038c6:	4b23      	ldr	r3, [pc, #140]	@ (8003954 <HAL_GPIO_Init+0x304>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	43db      	mvns	r3, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4013      	ands	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003954 <HAL_GPIO_Init+0x304>)
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038f0:	4b18      	ldr	r3, [pc, #96]	@ (8003954 <HAL_GPIO_Init+0x304>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003914:	4a0f      	ldr	r2, [pc, #60]	@ (8003954 <HAL_GPIO_Init+0x304>)
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3301      	adds	r3, #1
 800391e:	61fb      	str	r3, [r7, #28]
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	2b0f      	cmp	r3, #15
 8003924:	f67f aea2 	bls.w	800366c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	3724      	adds	r7, #36	@ 0x24
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40023800 	.word	0x40023800
 800393c:	40013800 	.word	0x40013800
 8003940:	40020000 	.word	0x40020000
 8003944:	40020400 	.word	0x40020400
 8003948:	40020800 	.word	0x40020800
 800394c:	40020c00 	.word	0x40020c00
 8003950:	40021000 	.word	0x40021000
 8003954:	40013c00 	.word	0x40013c00

08003958 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	887b      	ldrh	r3, [r7, #2]
 800396a:	4013      	ands	r3, r2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003970:	2301      	movs	r3, #1
 8003972:	73fb      	strb	r3, [r7, #15]
 8003974:	e001      	b.n	800397a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003976:	2300      	movs	r3, #0
 8003978:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800397a:	7bfb      	ldrb	r3, [r7, #15]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	807b      	strh	r3, [r7, #2]
 8003994:	4613      	mov	r3, r2
 8003996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003998:	787b      	ldrb	r3, [r7, #1]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800399e:	887a      	ldrh	r2, [r7, #2]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039a4:	e003      	b.n	80039ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039a6:	887b      	ldrh	r3, [r7, #2]
 80039a8:	041a      	lsls	r2, r3, #16
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	619a      	str	r2, [r3, #24]
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
	...

080039bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039c6:	4b08      	ldr	r3, [pc, #32]	@ (80039e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d006      	beq.n	80039e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039d2:	4a05      	ldr	r2, [pc, #20]	@ (80039e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe fd14 	bl	8002408 <HAL_GPIO_EXTI_Callback>
  }
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40013c00 	.word	0x40013c00

080039ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e267      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d075      	beq.n	8003af6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a0a:	4b88      	ldr	r3, [pc, #544]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d00c      	beq.n	8003a30 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a16:	4b85      	ldr	r3, [pc, #532]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d112      	bne.n	8003a48 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a22:	4b82      	ldr	r3, [pc, #520]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a2e:	d10b      	bne.n	8003a48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a30:	4b7e      	ldr	r3, [pc, #504]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d05b      	beq.n	8003af4 <HAL_RCC_OscConfig+0x108>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d157      	bne.n	8003af4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e242      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a50:	d106      	bne.n	8003a60 <HAL_RCC_OscConfig+0x74>
 8003a52:	4b76      	ldr	r3, [pc, #472]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a75      	ldr	r2, [pc, #468]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e01d      	b.n	8003a9c <HAL_RCC_OscConfig+0xb0>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x98>
 8003a6a:	4b70      	ldr	r3, [pc, #448]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a6f      	ldr	r2, [pc, #444]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	4b6d      	ldr	r3, [pc, #436]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e00b      	b.n	8003a9c <HAL_RCC_OscConfig+0xb0>
 8003a84:	4b69      	ldr	r3, [pc, #420]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a68      	ldr	r2, [pc, #416]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	4b66      	ldr	r3, [pc, #408]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a65      	ldr	r2, [pc, #404]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d013      	beq.n	8003acc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa4:	f7ff f81e 	bl	8002ae4 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aac:	f7ff f81a 	bl	8002ae4 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	@ 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e207      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abe:	4b5b      	ldr	r3, [pc, #364]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0xc0>
 8003aca:	e014      	b.n	8003af6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003acc:	f7ff f80a 	bl	8002ae4 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad4:	f7ff f806 	bl	8002ae4 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b64      	cmp	r3, #100	@ 0x64
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e1f3      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ae6:	4b51      	ldr	r3, [pc, #324]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0xe8>
 8003af2:	e000      	b.n	8003af6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d063      	beq.n	8003bca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b02:	4b4a      	ldr	r3, [pc, #296]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00b      	beq.n	8003b26 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b0e:	4b47      	ldr	r3, [pc, #284]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d11c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b1a:	4b44      	ldr	r3, [pc, #272]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d116      	bne.n	8003b54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b26:	4b41      	ldr	r3, [pc, #260]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d005      	beq.n	8003b3e <HAL_RCC_OscConfig+0x152>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d001      	beq.n	8003b3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e1c7      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	4937      	ldr	r1, [pc, #220]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b52:	e03a      	b.n	8003bca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d020      	beq.n	8003b9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b5c:	4b34      	ldr	r3, [pc, #208]	@ (8003c30 <HAL_RCC_OscConfig+0x244>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b62:	f7fe ffbf 	bl	8002ae4 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b6a:	f7fe ffbb 	bl	8002ae4 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e1a8      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b88:	4b28      	ldr	r3, [pc, #160]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4925      	ldr	r1, [pc, #148]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	600b      	str	r3, [r1, #0]
 8003b9c:	e015      	b.n	8003bca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b9e:	4b24      	ldr	r3, [pc, #144]	@ (8003c30 <HAL_RCC_OscConfig+0x244>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fe ff9e 	bl	8002ae4 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bac:	f7fe ff9a 	bl	8002ae4 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e187      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d036      	beq.n	8003c44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d016      	beq.n	8003c0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bde:	4b15      	ldr	r3, [pc, #84]	@ (8003c34 <HAL_RCC_OscConfig+0x248>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be4:	f7fe ff7e 	bl	8002ae4 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bec:	f7fe ff7a 	bl	8002ae4 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e167      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0x200>
 8003c0a:	e01b      	b.n	8003c44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c0c:	4b09      	ldr	r3, [pc, #36]	@ (8003c34 <HAL_RCC_OscConfig+0x248>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c12:	f7fe ff67 	bl	8002ae4 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c18:	e00e      	b.n	8003c38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c1a:	f7fe ff63 	bl	8002ae4 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d907      	bls.n	8003c38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e150      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	42470000 	.word	0x42470000
 8003c34:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c38:	4b88      	ldr	r3, [pc, #544]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1ea      	bne.n	8003c1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 8097 	beq.w	8003d80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c52:	2300      	movs	r3, #0
 8003c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c56:	4b81      	ldr	r3, [pc, #516]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10f      	bne.n	8003c82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	4b7d      	ldr	r3, [pc, #500]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	4a7c      	ldr	r2, [pc, #496]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c72:	4b7a      	ldr	r3, [pc, #488]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c7a:	60bb      	str	r3, [r7, #8]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c82:	4b77      	ldr	r3, [pc, #476]	@ (8003e60 <HAL_RCC_OscConfig+0x474>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d118      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c8e:	4b74      	ldr	r3, [pc, #464]	@ (8003e60 <HAL_RCC_OscConfig+0x474>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a73      	ldr	r2, [pc, #460]	@ (8003e60 <HAL_RCC_OscConfig+0x474>)
 8003c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c9a:	f7fe ff23 	bl	8002ae4 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca2:	f7fe ff1f 	bl	8002ae4 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e10c      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb4:	4b6a      	ldr	r3, [pc, #424]	@ (8003e60 <HAL_RCC_OscConfig+0x474>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d106      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x2ea>
 8003cc8:	4b64      	ldr	r3, [pc, #400]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ccc:	4a63      	ldr	r2, [pc, #396]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cd4:	e01c      	b.n	8003d10 <HAL_RCC_OscConfig+0x324>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b05      	cmp	r3, #5
 8003cdc:	d10c      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x30c>
 8003cde:	4b5f      	ldr	r3, [pc, #380]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce2:	4a5e      	ldr	r2, [pc, #376]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003ce4:	f043 0304 	orr.w	r3, r3, #4
 8003ce8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cea:	4b5c      	ldr	r3, [pc, #368]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cee:	4a5b      	ldr	r2, [pc, #364]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cf6:	e00b      	b.n	8003d10 <HAL_RCC_OscConfig+0x324>
 8003cf8:	4b58      	ldr	r3, [pc, #352]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfc:	4a57      	ldr	r2, [pc, #348]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cfe:	f023 0301 	bic.w	r3, r3, #1
 8003d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d04:	4b55      	ldr	r3, [pc, #340]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d08:	4a54      	ldr	r2, [pc, #336]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d0a:	f023 0304 	bic.w	r3, r3, #4
 8003d0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d015      	beq.n	8003d44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d18:	f7fe fee4 	bl	8002ae4 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1e:	e00a      	b.n	8003d36 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d20:	f7fe fee0 	bl	8002ae4 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e0cb      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d36:	4b49      	ldr	r3, [pc, #292]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0ee      	beq.n	8003d20 <HAL_RCC_OscConfig+0x334>
 8003d42:	e014      	b.n	8003d6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d44:	f7fe fece 	bl	8002ae4 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d4a:	e00a      	b.n	8003d62 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4c:	f7fe feca 	bl	8002ae4 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e0b5      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d62:	4b3e      	ldr	r3, [pc, #248]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1ee      	bne.n	8003d4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d6e:	7dfb      	ldrb	r3, [r7, #23]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d105      	bne.n	8003d80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d74:	4b39      	ldr	r3, [pc, #228]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d78:	4a38      	ldr	r2, [pc, #224]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80a1 	beq.w	8003ecc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d8a:	4b34      	ldr	r3, [pc, #208]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d05c      	beq.n	8003e50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d141      	bne.n	8003e22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9e:	4b31      	ldr	r3, [pc, #196]	@ (8003e64 <HAL_RCC_OscConfig+0x478>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da4:	f7fe fe9e 	bl	8002ae4 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dac:	f7fe fe9a 	bl	8002ae4 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e087      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbe:	4b27      	ldr	r3, [pc, #156]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69da      	ldr	r2, [r3, #28]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd8:	019b      	lsls	r3, r3, #6
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de0:	085b      	lsrs	r3, r3, #1
 8003de2:	3b01      	subs	r3, #1
 8003de4:	041b      	lsls	r3, r3, #16
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dec:	061b      	lsls	r3, r3, #24
 8003dee:	491b      	ldr	r1, [pc, #108]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003df4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e64 <HAL_RCC_OscConfig+0x478>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfa:	f7fe fe73 	bl	8002ae4 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e02:	f7fe fe6f 	bl	8002ae4 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e05c      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e14:	4b11      	ldr	r3, [pc, #68]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x416>
 8003e20:	e054      	b.n	8003ecc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e22:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <HAL_RCC_OscConfig+0x478>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e28:	f7fe fe5c 	bl	8002ae4 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e30:	f7fe fe58 	bl	8002ae4 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e045      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e42:	4b06      	ldr	r3, [pc, #24]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x444>
 8003e4e:	e03d      	b.n	8003ecc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d107      	bne.n	8003e68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e038      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	40007000 	.word	0x40007000
 8003e64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e68:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ec>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d028      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d121      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d11a      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e98:	4013      	ands	r3, r2
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d111      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eae:	085b      	lsrs	r3, r3, #1
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d107      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023800 	.word	0x40023800

08003edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0cc      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ef0:	4b68      	ldr	r3, [pc, #416]	@ (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d90c      	bls.n	8003f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efe:	4b65      	ldr	r3, [pc, #404]	@ (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f06:	4b63      	ldr	r3, [pc, #396]	@ (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d001      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0b8      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d020      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f30:	4b59      	ldr	r3, [pc, #356]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4a58      	ldr	r2, [pc, #352]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f48:	4b53      	ldr	r3, [pc, #332]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	4a52      	ldr	r2, [pc, #328]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f54:	4b50      	ldr	r3, [pc, #320]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	494d      	ldr	r1, [pc, #308]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d044      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d107      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7a:	4b47      	ldr	r3, [pc, #284]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d119      	bne.n	8003fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e07f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d003      	beq.n	8003f9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	d107      	bne.n	8003faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f9a:	4b3f      	ldr	r3, [pc, #252]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e06f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003faa:	4b3b      	ldr	r3, [pc, #236]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e067      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fba:	4b37      	ldr	r3, [pc, #220]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f023 0203 	bic.w	r2, r3, #3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	4934      	ldr	r1, [pc, #208]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fcc:	f7fe fd8a 	bl	8002ae4 <HAL_GetTick>
 8003fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd2:	e00a      	b.n	8003fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd4:	f7fe fd86 	bl	8002ae4 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e04f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fea:	4b2b      	ldr	r3, [pc, #172]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 020c 	and.w	r2, r3, #12
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d1eb      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b25      	ldr	r3, [pc, #148]	@ (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d20c      	bcs.n	8004024 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b22      	ldr	r3, [pc, #136]	@ (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004012:	4b20      	ldr	r3, [pc, #128]	@ (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d001      	beq.n	8004024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e032      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004030:	4b19      	ldr	r3, [pc, #100]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	4916      	ldr	r1, [pc, #88]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d009      	beq.n	8004062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800404e:	4b12      	ldr	r3, [pc, #72]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	490e      	ldr	r1, [pc, #56]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	4313      	orrs	r3, r2
 8004060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004062:	f000 f821 	bl	80040a8 <HAL_RCC_GetSysClockFreq>
 8004066:	4602      	mov	r2, r0
 8004068:	4b0b      	ldr	r3, [pc, #44]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	490a      	ldr	r1, [pc, #40]	@ (800409c <HAL_RCC_ClockConfig+0x1c0>)
 8004074:	5ccb      	ldrb	r3, [r1, r3]
 8004076:	fa22 f303 	lsr.w	r3, r2, r3
 800407a:	4a09      	ldr	r2, [pc, #36]	@ (80040a0 <HAL_RCC_ClockConfig+0x1c4>)
 800407c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800407e:	4b09      	ldr	r3, [pc, #36]	@ (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe fcea 	bl	8002a5c <HAL_InitTick>

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40023c00 	.word	0x40023c00
 8004098:	40023800 	.word	0x40023800
 800409c:	080070e8 	.word	0x080070e8
 80040a0:	2000000c 	.word	0x2000000c
 80040a4:	20000010 	.word	0x20000010

080040a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ac:	b094      	sub	sp, #80	@ 0x50
 80040ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040c0:	4b79      	ldr	r3, [pc, #484]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 030c 	and.w	r3, r3, #12
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d00d      	beq.n	80040e8 <HAL_RCC_GetSysClockFreq+0x40>
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	f200 80e1 	bhi.w	8004294 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_RCC_GetSysClockFreq+0x34>
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d003      	beq.n	80040e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80040da:	e0db      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040dc:	4b73      	ldr	r3, [pc, #460]	@ (80042ac <HAL_RCC_GetSysClockFreq+0x204>)
 80040de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040e0:	e0db      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040e2:	4b73      	ldr	r3, [pc, #460]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80040e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040e6:	e0d8      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040e8:	4b6f      	ldr	r3, [pc, #444]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040f2:	4b6d      	ldr	r3, [pc, #436]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d063      	beq.n	80041c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040fe:	4b6a      	ldr	r3, [pc, #424]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	099b      	lsrs	r3, r3, #6
 8004104:	2200      	movs	r2, #0
 8004106:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004108:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800410a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004110:	633b      	str	r3, [r7, #48]	@ 0x30
 8004112:	2300      	movs	r3, #0
 8004114:	637b      	str	r3, [r7, #52]	@ 0x34
 8004116:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800411a:	4622      	mov	r2, r4
 800411c:	462b      	mov	r3, r5
 800411e:	f04f 0000 	mov.w	r0, #0
 8004122:	f04f 0100 	mov.w	r1, #0
 8004126:	0159      	lsls	r1, r3, #5
 8004128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800412c:	0150      	lsls	r0, r2, #5
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	4621      	mov	r1, r4
 8004134:	1a51      	subs	r1, r2, r1
 8004136:	6139      	str	r1, [r7, #16]
 8004138:	4629      	mov	r1, r5
 800413a:	eb63 0301 	sbc.w	r3, r3, r1
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800414c:	4659      	mov	r1, fp
 800414e:	018b      	lsls	r3, r1, #6
 8004150:	4651      	mov	r1, sl
 8004152:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004156:	4651      	mov	r1, sl
 8004158:	018a      	lsls	r2, r1, #6
 800415a:	4651      	mov	r1, sl
 800415c:	ebb2 0801 	subs.w	r8, r2, r1
 8004160:	4659      	mov	r1, fp
 8004162:	eb63 0901 	sbc.w	r9, r3, r1
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800417a:	4690      	mov	r8, r2
 800417c:	4699      	mov	r9, r3
 800417e:	4623      	mov	r3, r4
 8004180:	eb18 0303 	adds.w	r3, r8, r3
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	462b      	mov	r3, r5
 8004188:	eb49 0303 	adc.w	r3, r9, r3
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800419a:	4629      	mov	r1, r5
 800419c:	024b      	lsls	r3, r1, #9
 800419e:	4621      	mov	r1, r4
 80041a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041a4:	4621      	mov	r1, r4
 80041a6:	024a      	lsls	r2, r1, #9
 80041a8:	4610      	mov	r0, r2
 80041aa:	4619      	mov	r1, r3
 80041ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ae:	2200      	movs	r2, #0
 80041b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041b8:	f7fc fc58 	bl	8000a6c <__aeabi_uldivmod>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4613      	mov	r3, r2
 80041c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041c4:	e058      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c6:	4b38      	ldr	r3, [pc, #224]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	099b      	lsrs	r3, r3, #6
 80041cc:	2200      	movs	r2, #0
 80041ce:	4618      	mov	r0, r3
 80041d0:	4611      	mov	r1, r2
 80041d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041d6:	623b      	str	r3, [r7, #32]
 80041d8:	2300      	movs	r3, #0
 80041da:	627b      	str	r3, [r7, #36]	@ 0x24
 80041dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041e0:	4642      	mov	r2, r8
 80041e2:	464b      	mov	r3, r9
 80041e4:	f04f 0000 	mov.w	r0, #0
 80041e8:	f04f 0100 	mov.w	r1, #0
 80041ec:	0159      	lsls	r1, r3, #5
 80041ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f2:	0150      	lsls	r0, r2, #5
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4641      	mov	r1, r8
 80041fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80041fe:	4649      	mov	r1, r9
 8004200:	eb63 0b01 	sbc.w	fp, r3, r1
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004210:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004214:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004218:	ebb2 040a 	subs.w	r4, r2, sl
 800421c:	eb63 050b 	sbc.w	r5, r3, fp
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	00eb      	lsls	r3, r5, #3
 800422a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800422e:	00e2      	lsls	r2, r4, #3
 8004230:	4614      	mov	r4, r2
 8004232:	461d      	mov	r5, r3
 8004234:	4643      	mov	r3, r8
 8004236:	18e3      	adds	r3, r4, r3
 8004238:	603b      	str	r3, [r7, #0]
 800423a:	464b      	mov	r3, r9
 800423c:	eb45 0303 	adc.w	r3, r5, r3
 8004240:	607b      	str	r3, [r7, #4]
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800424e:	4629      	mov	r1, r5
 8004250:	028b      	lsls	r3, r1, #10
 8004252:	4621      	mov	r1, r4
 8004254:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004258:	4621      	mov	r1, r4
 800425a:	028a      	lsls	r2, r1, #10
 800425c:	4610      	mov	r0, r2
 800425e:	4619      	mov	r1, r3
 8004260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004262:	2200      	movs	r2, #0
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	61fa      	str	r2, [r7, #28]
 8004268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800426c:	f7fc fbfe 	bl	8000a6c <__aeabi_uldivmod>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4613      	mov	r3, r2
 8004276:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004278:	4b0b      	ldr	r3, [pc, #44]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	0c1b      	lsrs	r3, r3, #16
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	3301      	adds	r3, #1
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004288:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800428a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800428c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004290:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004292:	e002      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004294:	4b05      	ldr	r3, [pc, #20]	@ (80042ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004296:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800429a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800429c:	4618      	mov	r0, r3
 800429e:	3750      	adds	r7, #80	@ 0x50
 80042a0:	46bd      	mov	sp, r7
 80042a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042a6:	bf00      	nop
 80042a8:	40023800 	.word	0x40023800
 80042ac:	00f42400 	.word	0x00f42400
 80042b0:	007a1200 	.word	0x007a1200

080042b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042b8:	4b03      	ldr	r3, [pc, #12]	@ (80042c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042ba:	681b      	ldr	r3, [r3, #0]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	2000000c 	.word	0x2000000c

080042cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042d0:	f7ff fff0 	bl	80042b4 <HAL_RCC_GetHCLKFreq>
 80042d4:	4602      	mov	r2, r0
 80042d6:	4b05      	ldr	r3, [pc, #20]	@ (80042ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	0a9b      	lsrs	r3, r3, #10
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	4903      	ldr	r1, [pc, #12]	@ (80042f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042e2:	5ccb      	ldrb	r3, [r1, r3]
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40023800 	.word	0x40023800
 80042f0:	080070f8 	.word	0x080070f8

080042f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042f8:	f7ff ffdc 	bl	80042b4 <HAL_RCC_GetHCLKFreq>
 80042fc:	4602      	mov	r2, r0
 80042fe:	4b05      	ldr	r3, [pc, #20]	@ (8004314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	0b5b      	lsrs	r3, r3, #13
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	4903      	ldr	r1, [pc, #12]	@ (8004318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800430a:	5ccb      	ldrb	r3, [r1, r3]
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40023800 	.word	0x40023800
 8004318:	080070f8 	.word	0x080070f8

0800431c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e041      	b.n	80043b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fe f910 	bl	8002568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3304      	adds	r3, #4
 8004358:	4619      	mov	r1, r3
 800435a:	4610      	mov	r0, r2
 800435c:	f000 fcce 	bl	8004cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d001      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e044      	b.n	800445e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0201 	orr.w	r2, r2, #1
 80043ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a1e      	ldr	r2, [pc, #120]	@ (800446c <HAL_TIM_Base_Start_IT+0xb0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d018      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0x6c>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043fe:	d013      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0x6c>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1a      	ldr	r2, [pc, #104]	@ (8004470 <HAL_TIM_Base_Start_IT+0xb4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d00e      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0x6c>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a19      	ldr	r2, [pc, #100]	@ (8004474 <HAL_TIM_Base_Start_IT+0xb8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d009      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0x6c>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a17      	ldr	r2, [pc, #92]	@ (8004478 <HAL_TIM_Base_Start_IT+0xbc>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d004      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0x6c>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a16      	ldr	r2, [pc, #88]	@ (800447c <HAL_TIM_Base_Start_IT+0xc0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d111      	bne.n	800444c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b06      	cmp	r3, #6
 8004438:	d010      	beq.n	800445c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 0201 	orr.w	r2, r2, #1
 8004448:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444a:	e007      	b.n	800445c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	40010000 	.word	0x40010000
 8004470:	40000400 	.word	0x40000400
 8004474:	40000800 	.word	0x40000800
 8004478:	40000c00 	.word	0x40000c00
 800447c:	40014000 	.word	0x40014000

08004480 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0201 	bic.w	r2, r2, #1
 8004496:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6a1a      	ldr	r2, [r3, #32]
 800449e:	f241 1311 	movw	r3, #4369	@ 0x1111
 80044a2:	4013      	ands	r3, r2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10f      	bne.n	80044c8 <HAL_TIM_Base_Stop_IT+0x48>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6a1a      	ldr	r2, [r3, #32]
 80044ae:	f240 4344 	movw	r3, #1092	@ 0x444
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d107      	bne.n	80044c8 <HAL_TIM_Base_Stop_IT+0x48>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0201 	bic.w	r2, r2, #1
 80044c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b082      	sub	sp, #8
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e041      	b.n	8004574 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d106      	bne.n	800450a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f839 	bl	800457c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2202      	movs	r2, #2
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3304      	adds	r3, #4
 800451a:	4619      	mov	r1, r3
 800451c:	4610      	mov	r0, r2
 800451e:	f000 fbed 	bl	8004cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d109      	bne.n	80045b4 <HAL_TIM_PWM_Start+0x24>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	bf14      	ite	ne
 80045ac:	2301      	movne	r3, #1
 80045ae:	2300      	moveq	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	e022      	b.n	80045fa <HAL_TIM_PWM_Start+0x6a>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d109      	bne.n	80045ce <HAL_TIM_PWM_Start+0x3e>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	bf14      	ite	ne
 80045c6:	2301      	movne	r3, #1
 80045c8:	2300      	moveq	r3, #0
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	e015      	b.n	80045fa <HAL_TIM_PWM_Start+0x6a>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d109      	bne.n	80045e8 <HAL_TIM_PWM_Start+0x58>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	bf14      	ite	ne
 80045e0:	2301      	movne	r3, #1
 80045e2:	2300      	moveq	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	e008      	b.n	80045fa <HAL_TIM_PWM_Start+0x6a>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	bf14      	ite	ne
 80045f4:	2301      	movne	r3, #1
 80045f6:	2300      	moveq	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e068      	b.n	80046d4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d104      	bne.n	8004612 <HAL_TIM_PWM_Start+0x82>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004610:	e013      	b.n	800463a <HAL_TIM_PWM_Start+0xaa>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b04      	cmp	r3, #4
 8004616:	d104      	bne.n	8004622 <HAL_TIM_PWM_Start+0x92>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004620:	e00b      	b.n	800463a <HAL_TIM_PWM_Start+0xaa>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b08      	cmp	r3, #8
 8004626:	d104      	bne.n	8004632 <HAL_TIM_PWM_Start+0xa2>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004630:	e003      	b.n	800463a <HAL_TIM_PWM_Start+0xaa>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2202      	movs	r2, #2
 8004636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2201      	movs	r2, #1
 8004640:	6839      	ldr	r1, [r7, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fe0c 	bl	8005260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a23      	ldr	r2, [pc, #140]	@ (80046dc <HAL_TIM_PWM_Start+0x14c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d107      	bne.n	8004662 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004660:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1d      	ldr	r2, [pc, #116]	@ (80046dc <HAL_TIM_PWM_Start+0x14c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d018      	beq.n	800469e <HAL_TIM_PWM_Start+0x10e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004674:	d013      	beq.n	800469e <HAL_TIM_PWM_Start+0x10e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a19      	ldr	r2, [pc, #100]	@ (80046e0 <HAL_TIM_PWM_Start+0x150>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00e      	beq.n	800469e <HAL_TIM_PWM_Start+0x10e>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a17      	ldr	r2, [pc, #92]	@ (80046e4 <HAL_TIM_PWM_Start+0x154>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d009      	beq.n	800469e <HAL_TIM_PWM_Start+0x10e>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a16      	ldr	r2, [pc, #88]	@ (80046e8 <HAL_TIM_PWM_Start+0x158>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d004      	beq.n	800469e <HAL_TIM_PWM_Start+0x10e>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a14      	ldr	r2, [pc, #80]	@ (80046ec <HAL_TIM_PWM_Start+0x15c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d111      	bne.n	80046c2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b06      	cmp	r3, #6
 80046ae:	d010      	beq.n	80046d2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c0:	e007      	b.n	80046d2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f042 0201 	orr.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40010000 	.word	0x40010000
 80046e0:	40000400 	.word	0x40000400
 80046e4:	40000800 	.word	0x40000800
 80046e8:	40000c00 	.word	0x40000c00
 80046ec:	40014000 	.word	0x40014000

080046f0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2200      	movs	r2, #0
 8004700:	6839      	ldr	r1, [r7, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fdac 	bl	8005260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a29      	ldr	r2, [pc, #164]	@ (80047b4 <HAL_TIM_PWM_Stop+0xc4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d117      	bne.n	8004742 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6a1a      	ldr	r2, [r3, #32]
 8004718:	f241 1311 	movw	r3, #4369	@ 0x1111
 800471c:	4013      	ands	r3, r2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10f      	bne.n	8004742 <HAL_TIM_PWM_Stop+0x52>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6a1a      	ldr	r2, [r3, #32]
 8004728:	f240 4344 	movw	r3, #1092	@ 0x444
 800472c:	4013      	ands	r3, r2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d107      	bne.n	8004742 <HAL_TIM_PWM_Stop+0x52>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004740:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6a1a      	ldr	r2, [r3, #32]
 8004748:	f241 1311 	movw	r3, #4369	@ 0x1111
 800474c:	4013      	ands	r3, r2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10f      	bne.n	8004772 <HAL_TIM_PWM_Stop+0x82>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6a1a      	ldr	r2, [r3, #32]
 8004758:	f240 4344 	movw	r3, #1092	@ 0x444
 800475c:	4013      	ands	r3, r2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d107      	bne.n	8004772 <HAL_TIM_PWM_Stop+0x82>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0201 	bic.w	r2, r2, #1
 8004770:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d104      	bne.n	8004782 <HAL_TIM_PWM_Stop+0x92>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004780:	e013      	b.n	80047aa <HAL_TIM_PWM_Stop+0xba>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b04      	cmp	r3, #4
 8004786:	d104      	bne.n	8004792 <HAL_TIM_PWM_Stop+0xa2>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004790:	e00b      	b.n	80047aa <HAL_TIM_PWM_Stop+0xba>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d104      	bne.n	80047a2 <HAL_TIM_PWM_Stop+0xb2>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047a0:	e003      	b.n	80047aa <HAL_TIM_PWM_Stop+0xba>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40010000 	.word	0x40010000

080047b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d020      	beq.n	800481c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01b      	beq.n	800481c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0202 	mvn.w	r2, #2
 80047ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fa5b 	bl	8004cbe <HAL_TIM_IC_CaptureCallback>
 8004808:	e005      	b.n	8004816 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fa4d 	bl	8004caa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fa5e 	bl	8004cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d020      	beq.n	8004868 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01b      	beq.n	8004868 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0204 	mvn.w	r2, #4
 8004838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fa35 	bl	8004cbe <HAL_TIM_IC_CaptureCallback>
 8004854:	e005      	b.n	8004862 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 fa27 	bl	8004caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 fa38 	bl	8004cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d020      	beq.n	80048b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01b      	beq.n	80048b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0208 	mvn.w	r2, #8
 8004884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2204      	movs	r2, #4
 800488a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fa0f 	bl	8004cbe <HAL_TIM_IC_CaptureCallback>
 80048a0:	e005      	b.n	80048ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fa01 	bl	8004caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fa12 	bl	8004cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 0310 	and.w	r3, r3, #16
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d020      	beq.n	8004900 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01b      	beq.n	8004900 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0210 	mvn.w	r2, #16
 80048d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2208      	movs	r2, #8
 80048d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f9e9 	bl	8004cbe <HAL_TIM_IC_CaptureCallback>
 80048ec:	e005      	b.n	80048fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f9db 	bl	8004caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f9ec 	bl	8004cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00c      	beq.n	8004924 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0201 	mvn.w	r2, #1
 800491c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fd fd88 	bl	8002434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00c      	beq.n	8004948 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004934:	2b00      	cmp	r3, #0
 8004936:	d007      	beq.n	8004948 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fd2a 	bl	800539c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00c      	beq.n	800496c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004958:	2b00      	cmp	r3, #0
 800495a:	d007      	beq.n	800496c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f9bd 	bl	8004ce6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00c      	beq.n	8004990 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b00      	cmp	r3, #0
 800497e:	d007      	beq.n	8004990 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0220 	mvn.w	r2, #32
 8004988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fcfc 	bl	8005388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004990:	bf00      	nop
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d101      	bne.n	80049b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049b2:	2302      	movs	r3, #2
 80049b4:	e0ae      	b.n	8004b14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b0c      	cmp	r3, #12
 80049c2:	f200 809f 	bhi.w	8004b04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049c6:	a201      	add	r2, pc, #4	@ (adr r2, 80049cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049cc:	08004a01 	.word	0x08004a01
 80049d0:	08004b05 	.word	0x08004b05
 80049d4:	08004b05 	.word	0x08004b05
 80049d8:	08004b05 	.word	0x08004b05
 80049dc:	08004a41 	.word	0x08004a41
 80049e0:	08004b05 	.word	0x08004b05
 80049e4:	08004b05 	.word	0x08004b05
 80049e8:	08004b05 	.word	0x08004b05
 80049ec:	08004a83 	.word	0x08004a83
 80049f0:	08004b05 	.word	0x08004b05
 80049f4:	08004b05 	.word	0x08004b05
 80049f8:	08004b05 	.word	0x08004b05
 80049fc:	08004ac3 	.word	0x08004ac3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fa04 	bl	8004e14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0208 	orr.w	r2, r2, #8
 8004a1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0204 	bic.w	r2, r2, #4
 8004a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6999      	ldr	r1, [r3, #24]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	691a      	ldr	r2, [r3, #16]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	619a      	str	r2, [r3, #24]
      break;
 8004a3e:	e064      	b.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fa4a 	bl	8004ee0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699a      	ldr	r2, [r3, #24]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6999      	ldr	r1, [r3, #24]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	021a      	lsls	r2, r3, #8
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	619a      	str	r2, [r3, #24]
      break;
 8004a80:	e043      	b.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fa95 	bl	8004fb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69da      	ldr	r2, [r3, #28]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0208 	orr.w	r2, r2, #8
 8004a9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69da      	ldr	r2, [r3, #28]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0204 	bic.w	r2, r2, #4
 8004aac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69d9      	ldr	r1, [r3, #28]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	61da      	str	r2, [r3, #28]
      break;
 8004ac0:	e023      	b.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fadf 	bl	800508c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69da      	ldr	r2, [r3, #28]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69d9      	ldr	r1, [r3, #28]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	021a      	lsls	r2, r3, #8
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	61da      	str	r2, [r3, #28]
      break;
 8004b02:	e002      	b.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	75fb      	strb	r3, [r7, #23]
      break;
 8004b08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_TIM_ConfigClockSource+0x1c>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e0b4      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x186>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b70:	d03e      	beq.n	8004bf0 <HAL_TIM_ConfigClockSource+0xd4>
 8004b72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b76:	f200 8087 	bhi.w	8004c88 <HAL_TIM_ConfigClockSource+0x16c>
 8004b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b7e:	f000 8086 	beq.w	8004c8e <HAL_TIM_ConfigClockSource+0x172>
 8004b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b86:	d87f      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x16c>
 8004b88:	2b70      	cmp	r3, #112	@ 0x70
 8004b8a:	d01a      	beq.n	8004bc2 <HAL_TIM_ConfigClockSource+0xa6>
 8004b8c:	2b70      	cmp	r3, #112	@ 0x70
 8004b8e:	d87b      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x16c>
 8004b90:	2b60      	cmp	r3, #96	@ 0x60
 8004b92:	d050      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0x11a>
 8004b94:	2b60      	cmp	r3, #96	@ 0x60
 8004b96:	d877      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x16c>
 8004b98:	2b50      	cmp	r3, #80	@ 0x50
 8004b9a:	d03c      	beq.n	8004c16 <HAL_TIM_ConfigClockSource+0xfa>
 8004b9c:	2b50      	cmp	r3, #80	@ 0x50
 8004b9e:	d873      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba0:	2b40      	cmp	r3, #64	@ 0x40
 8004ba2:	d058      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0x13a>
 8004ba4:	2b40      	cmp	r3, #64	@ 0x40
 8004ba6:	d86f      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba8:	2b30      	cmp	r3, #48	@ 0x30
 8004baa:	d064      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x15a>
 8004bac:	2b30      	cmp	r3, #48	@ 0x30
 8004bae:	d86b      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	d060      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x15a>
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	d867      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d05c      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x15a>
 8004bbc:	2b10      	cmp	r3, #16
 8004bbe:	d05a      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x15a>
 8004bc0:	e062      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bd2:	f000 fb25 	bl	8005220 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004be4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	609a      	str	r2, [r3, #8]
      break;
 8004bee:	e04f      	b.n	8004c90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c00:	f000 fb0e 	bl	8005220 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c12:	609a      	str	r2, [r3, #8]
      break;
 8004c14:	e03c      	b.n	8004c90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c22:	461a      	mov	r2, r3
 8004c24:	f000 fa82 	bl	800512c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2150      	movs	r1, #80	@ 0x50
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fadb 	bl	80051ea <TIM_ITRx_SetConfig>
      break;
 8004c34:	e02c      	b.n	8004c90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c42:	461a      	mov	r2, r3
 8004c44:	f000 faa1 	bl	800518a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2160      	movs	r1, #96	@ 0x60
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 facb 	bl	80051ea <TIM_ITRx_SetConfig>
      break;
 8004c54:	e01c      	b.n	8004c90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c62:	461a      	mov	r2, r3
 8004c64:	f000 fa62 	bl	800512c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2140      	movs	r1, #64	@ 0x40
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fabb 	bl	80051ea <TIM_ITRx_SetConfig>
      break;
 8004c74:	e00c      	b.n	8004c90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4610      	mov	r0, r2
 8004c82:	f000 fab2 	bl	80051ea <TIM_ITRx_SetConfig>
      break;
 8004c86:	e003      	b.n	8004c90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c8c:	e000      	b.n	8004c90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
	...

08004cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a3a      	ldr	r2, [pc, #232]	@ (8004df8 <TIM_Base_SetConfig+0xfc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00f      	beq.n	8004d34 <TIM_Base_SetConfig+0x38>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d1a:	d00b      	beq.n	8004d34 <TIM_Base_SetConfig+0x38>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a37      	ldr	r2, [pc, #220]	@ (8004dfc <TIM_Base_SetConfig+0x100>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d007      	beq.n	8004d34 <TIM_Base_SetConfig+0x38>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a36      	ldr	r2, [pc, #216]	@ (8004e00 <TIM_Base_SetConfig+0x104>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d003      	beq.n	8004d34 <TIM_Base_SetConfig+0x38>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a35      	ldr	r2, [pc, #212]	@ (8004e04 <TIM_Base_SetConfig+0x108>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d108      	bne.n	8004d46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a2b      	ldr	r2, [pc, #172]	@ (8004df8 <TIM_Base_SetConfig+0xfc>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d01b      	beq.n	8004d86 <TIM_Base_SetConfig+0x8a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d54:	d017      	beq.n	8004d86 <TIM_Base_SetConfig+0x8a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a28      	ldr	r2, [pc, #160]	@ (8004dfc <TIM_Base_SetConfig+0x100>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d013      	beq.n	8004d86 <TIM_Base_SetConfig+0x8a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a27      	ldr	r2, [pc, #156]	@ (8004e00 <TIM_Base_SetConfig+0x104>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00f      	beq.n	8004d86 <TIM_Base_SetConfig+0x8a>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a26      	ldr	r2, [pc, #152]	@ (8004e04 <TIM_Base_SetConfig+0x108>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00b      	beq.n	8004d86 <TIM_Base_SetConfig+0x8a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a25      	ldr	r2, [pc, #148]	@ (8004e08 <TIM_Base_SetConfig+0x10c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d007      	beq.n	8004d86 <TIM_Base_SetConfig+0x8a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a24      	ldr	r2, [pc, #144]	@ (8004e0c <TIM_Base_SetConfig+0x110>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d003      	beq.n	8004d86 <TIM_Base_SetConfig+0x8a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a23      	ldr	r2, [pc, #140]	@ (8004e10 <TIM_Base_SetConfig+0x114>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d108      	bne.n	8004d98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a0e      	ldr	r2, [pc, #56]	@ (8004df8 <TIM_Base_SetConfig+0xfc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d103      	bne.n	8004dcc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d105      	bne.n	8004dea <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f023 0201 	bic.w	r2, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	611a      	str	r2, [r3, #16]
  }
}
 8004dea:	bf00      	nop
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40010000 	.word	0x40010000
 8004dfc:	40000400 	.word	0x40000400
 8004e00:	40000800 	.word	0x40000800
 8004e04:	40000c00 	.word	0x40000c00
 8004e08:	40014000 	.word	0x40014000
 8004e0c:	40014400 	.word	0x40014400
 8004e10:	40014800 	.word	0x40014800

08004e14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f023 0201 	bic.w	r2, r3, #1
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0303 	bic.w	r3, r3, #3
 8004e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f023 0302 	bic.w	r3, r3, #2
 8004e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8004edc <TIM_OC1_SetConfig+0xc8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d10c      	bne.n	8004e8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f023 0308 	bic.w	r3, r3, #8
 8004e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f023 0304 	bic.w	r3, r3, #4
 8004e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a13      	ldr	r2, [pc, #76]	@ (8004edc <TIM_OC1_SetConfig+0xc8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d111      	bne.n	8004eb6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	621a      	str	r2, [r3, #32]
}
 8004ed0:	bf00      	nop
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	40010000 	.word	0x40010000

08004ee0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f023 0210 	bic.w	r2, r3, #16
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f023 0320 	bic.w	r3, r3, #32
 8004f2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8004fb4 <TIM_OC2_SetConfig+0xd4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d10d      	bne.n	8004f5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a15      	ldr	r2, [pc, #84]	@ (8004fb4 <TIM_OC2_SetConfig+0xd4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d113      	bne.n	8004f8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	621a      	str	r2, [r3, #32]
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40010000 	.word	0x40010000

08004fb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0303 	bic.w	r3, r3, #3
 8004fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	021b      	lsls	r3, r3, #8
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	4313      	orrs	r3, r2
 800500c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a1d      	ldr	r2, [pc, #116]	@ (8005088 <TIM_OC3_SetConfig+0xd0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d10d      	bne.n	8005032 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800501c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	021b      	lsls	r3, r3, #8
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a14      	ldr	r2, [pc, #80]	@ (8005088 <TIM_OC3_SetConfig+0xd0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d113      	bne.n	8005062 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	621a      	str	r2, [r3, #32]
}
 800507c:	bf00      	nop
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	40010000 	.word	0x40010000

0800508c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	021b      	lsls	r3, r3, #8
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	031b      	lsls	r3, r3, #12
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a10      	ldr	r2, [pc, #64]	@ (8005128 <TIM_OC4_SetConfig+0x9c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d109      	bne.n	8005100 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	019b      	lsls	r3, r3, #6
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	621a      	str	r2, [r3, #32]
}
 800511a:	bf00      	nop
 800511c:	371c      	adds	r7, #28
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40010000 	.word	0x40010000

0800512c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f023 0201 	bic.w	r2, r3, #1
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	4313      	orrs	r3, r2
 8005160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f023 030a 	bic.w	r3, r3, #10
 8005168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4313      	orrs	r3, r2
 8005170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	621a      	str	r2, [r3, #32]
}
 800517e:	bf00      	nop
 8005180:	371c      	adds	r7, #28
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800518a:	b480      	push	{r7}
 800518c:	b087      	sub	sp, #28
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	f023 0210 	bic.w	r2, r3, #16
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	031b      	lsls	r3, r3, #12
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	621a      	str	r2, [r3, #32]
}
 80051de:	bf00      	nop
 80051e0:	371c      	adds	r7, #28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b085      	sub	sp, #20
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	f043 0307 	orr.w	r3, r3, #7
 800520c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	609a      	str	r2, [r3, #8]
}
 8005214:	bf00      	nop
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800523a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	021a      	lsls	r2, r3, #8
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	431a      	orrs	r2, r3
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4313      	orrs	r3, r2
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	4313      	orrs	r3, r2
 800524c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	609a      	str	r2, [r3, #8]
}
 8005254:	bf00      	nop
 8005256:	371c      	adds	r7, #28
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f003 031f 	and.w	r3, r3, #31
 8005272:	2201      	movs	r2, #1
 8005274:	fa02 f303 	lsl.w	r3, r2, r3
 8005278:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a1a      	ldr	r2, [r3, #32]
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	43db      	mvns	r3, r3
 8005282:	401a      	ands	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a1a      	ldr	r2, [r3, #32]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 031f 	and.w	r3, r3, #31
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	fa01 f303 	lsl.w	r3, r1, r3
 8005298:	431a      	orrs	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
	...

080052ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e050      	b.n	8005366 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a1c      	ldr	r2, [pc, #112]	@ (8005374 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d018      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005310:	d013      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a18      	ldr	r2, [pc, #96]	@ (8005378 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00e      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a16      	ldr	r2, [pc, #88]	@ (800537c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d009      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a15      	ldr	r2, [pc, #84]	@ (8005380 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d004      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a13      	ldr	r2, [pc, #76]	@ (8005384 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d10c      	bne.n	8005354 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005340:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	4313      	orrs	r3, r2
 800534a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40010000 	.word	0x40010000
 8005378:	40000400 	.word	0x40000400
 800537c:	40000800 	.word	0x40000800
 8005380:	40000c00 	.word	0x40000c00
 8005384:	40014000 	.word	0x40014000

08005388 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e042      	b.n	8005448 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d106      	bne.n	80053dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fd f996 	bl	8002708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2224      	movs	r2, #36	@ 0x24
 80053e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fdbd 	bl	8005f74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	691a      	ldr	r2, [r3, #16]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005408:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695a      	ldr	r2, [r3, #20]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005418:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005428:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2220      	movs	r2, #32
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b08a      	sub	sp, #40	@ 0x28
 8005454:	af02      	add	r7, sp, #8
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	4613      	mov	r3, r2
 800545e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b20      	cmp	r3, #32
 800546e:	d175      	bne.n	800555c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <HAL_UART_Transmit+0x2c>
 8005476:	88fb      	ldrh	r3, [r7, #6]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e06e      	b.n	800555e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2221      	movs	r2, #33	@ 0x21
 800548a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800548e:	f7fd fb29 	bl	8002ae4 <HAL_GetTick>
 8005492:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	88fa      	ldrh	r2, [r7, #6]
 8005498:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	88fa      	ldrh	r2, [r7, #6]
 800549e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054a8:	d108      	bne.n	80054bc <HAL_UART_Transmit+0x6c>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d104      	bne.n	80054bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	61bb      	str	r3, [r7, #24]
 80054ba:	e003      	b.n	80054c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054c4:	e02e      	b.n	8005524 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2200      	movs	r2, #0
 80054ce:	2180      	movs	r1, #128	@ 0x80
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 fb1f 	bl	8005b14 <UART_WaitOnFlagUntilTimeout>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d005      	beq.n	80054e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e03a      	b.n	800555e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10b      	bne.n	8005506 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	3302      	adds	r3, #2
 8005502:	61bb      	str	r3, [r7, #24]
 8005504:	e007      	b.n	8005516 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	781a      	ldrb	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	3301      	adds	r3, #1
 8005514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005528:	b29b      	uxth	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1cb      	bne.n	80054c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2200      	movs	r2, #0
 8005536:	2140      	movs	r1, #64	@ 0x40
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 faeb 	bl	8005b14 <UART_WaitOnFlagUntilTimeout>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e006      	b.n	800555e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005558:	2300      	movs	r3, #0
 800555a:	e000      	b.n	800555e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800555c:	2302      	movs	r3, #2
  }
}
 800555e:	4618      	mov	r0, r3
 8005560:	3720      	adds	r7, #32
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	4613      	mov	r3, r2
 8005572:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b20      	cmp	r3, #32
 800557e:	d112      	bne.n	80055a6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <HAL_UART_Receive_IT+0x26>
 8005586:	88fb      	ldrh	r3, [r7, #6]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e00b      	b.n	80055a8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005596:	88fb      	ldrh	r3, [r7, #6]
 8005598:	461a      	mov	r2, r3
 800559a:	68b9      	ldr	r1, [r7, #8]
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 fb12 	bl	8005bc6 <UART_Start_Receive_IT>
 80055a2:	4603      	mov	r3, r0
 80055a4:	e000      	b.n	80055a8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80055a6:	2302      	movs	r3, #2
  }
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b0ba      	sub	sp, #232	@ 0xe8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80055dc:	2300      	movs	r3, #0
 80055de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80055ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10f      	bne.n	8005616 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055fa:	f003 0320 	and.w	r3, r3, #32
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d009      	beq.n	8005616 <HAL_UART_IRQHandler+0x66>
 8005602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005606:	f003 0320 	and.w	r3, r3, #32
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fbf2 	bl	8005df8 <UART_Receive_IT>
      return;
 8005614:	e25b      	b.n	8005ace <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 80de 	beq.w	80057dc <HAL_UART_IRQHandler+0x22c>
 8005620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	d106      	bne.n	800563a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800562c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005630:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 80d1 	beq.w	80057dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800563a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00b      	beq.n	800565e <HAL_UART_IRQHandler+0xae>
 8005646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800564a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800564e:	2b00      	cmp	r3, #0
 8005650:	d005      	beq.n	800565e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005656:	f043 0201 	orr.w	r2, r3, #1
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005662:	f003 0304 	and.w	r3, r3, #4
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00b      	beq.n	8005682 <HAL_UART_IRQHandler+0xd2>
 800566a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567a:	f043 0202 	orr.w	r2, r3, #2
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00b      	beq.n	80056a6 <HAL_UART_IRQHandler+0xf6>
 800568e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569e:	f043 0204 	orr.w	r2, r3, #4
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d011      	beq.n	80056d6 <HAL_UART_IRQHandler+0x126>
 80056b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d105      	bne.n	80056ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d005      	beq.n	80056d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ce:	f043 0208 	orr.w	r2, r3, #8
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 81f2 	beq.w	8005ac4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056e4:	f003 0320 	and.w	r3, r3, #32
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d008      	beq.n	80056fe <HAL_UART_IRQHandler+0x14e>
 80056ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056f0:	f003 0320 	and.w	r3, r3, #32
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fb7d 	bl	8005df8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005708:	2b40      	cmp	r3, #64	@ 0x40
 800570a:	bf0c      	ite	eq
 800570c:	2301      	moveq	r3, #1
 800570e:	2300      	movne	r3, #0
 8005710:	b2db      	uxtb	r3, r3
 8005712:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b00      	cmp	r3, #0
 8005720:	d103      	bne.n	800572a <HAL_UART_IRQHandler+0x17a>
 8005722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005726:	2b00      	cmp	r3, #0
 8005728:	d04f      	beq.n	80057ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 fa85 	bl	8005c3a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800573a:	2b40      	cmp	r3, #64	@ 0x40
 800573c:	d141      	bne.n	80057c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3314      	adds	r3, #20
 8005744:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800574c:	e853 3f00 	ldrex	r3, [r3]
 8005750:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005754:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005758:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800575c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3314      	adds	r3, #20
 8005766:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800576a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800576e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005772:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005776:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1d9      	bne.n	800573e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d013      	beq.n	80057ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005796:	4a7e      	ldr	r2, [pc, #504]	@ (8005990 <HAL_UART_IRQHandler+0x3e0>)
 8005798:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fd ff33 	bl	800360a <HAL_DMA_Abort_IT>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d016      	beq.n	80057d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80057b4:	4610      	mov	r0, r2
 80057b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b8:	e00e      	b.n	80057d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f994 	bl	8005ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c0:	e00a      	b.n	80057d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f990 	bl	8005ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c8:	e006      	b.n	80057d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f98c 	bl	8005ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80057d6:	e175      	b.n	8005ac4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d8:	bf00      	nop
    return;
 80057da:	e173      	b.n	8005ac4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	f040 814f 	bne.w	8005a84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80057e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ea:	f003 0310 	and.w	r3, r3, #16
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 8148 	beq.w	8005a84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80057f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057f8:	f003 0310 	and.w	r3, r3, #16
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 8141 	beq.w	8005a84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005802:	2300      	movs	r3, #0
 8005804:	60bb      	str	r3, [r7, #8]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	60bb      	str	r3, [r7, #8]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	60bb      	str	r3, [r7, #8]
 8005816:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005822:	2b40      	cmp	r3, #64	@ 0x40
 8005824:	f040 80b6 	bne.w	8005994 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005834:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 8145 	beq.w	8005ac8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005846:	429a      	cmp	r2, r3
 8005848:	f080 813e 	bcs.w	8005ac8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005852:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800585e:	f000 8088 	beq.w	8005972 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	330c      	adds	r3, #12
 8005868:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005878:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800587c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005880:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	330c      	adds	r3, #12
 800588a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800588e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005892:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800589a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800589e:	e841 2300 	strex	r3, r2, [r1]
 80058a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80058a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1d9      	bne.n	8005862 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3314      	adds	r3, #20
 80058b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058b8:	e853 3f00 	ldrex	r3, [r3]
 80058bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058c0:	f023 0301 	bic.w	r3, r3, #1
 80058c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3314      	adds	r3, #20
 80058ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80058d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80058d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80058da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80058de:	e841 2300 	strex	r3, r2, [r1]
 80058e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80058e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1e1      	bne.n	80058ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3314      	adds	r3, #20
 80058f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80058fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005900:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3314      	adds	r3, #20
 800590a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800590e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005910:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005912:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005914:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800591c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e3      	bne.n	80058ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	330c      	adds	r3, #12
 8005936:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005942:	f023 0310 	bic.w	r3, r3, #16
 8005946:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	330c      	adds	r3, #12
 8005950:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005954:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005956:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005958:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800595a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800595c:	e841 2300 	strex	r3, r2, [r1]
 8005960:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1e3      	bne.n	8005930 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800596c:	4618      	mov	r0, r3
 800596e:	f7fd fddc 	bl	800352a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2202      	movs	r2, #2
 8005976:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005980:	b29b      	uxth	r3, r3
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	b29b      	uxth	r3, r3
 8005986:	4619      	mov	r1, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f8b7 	bl	8005afc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800598e:	e09b      	b.n	8005ac8 <HAL_UART_IRQHandler+0x518>
 8005990:	08005d01 	.word	0x08005d01
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800599c:	b29b      	uxth	r3, r3
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 808e 	beq.w	8005acc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80059b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 8089 	beq.w	8005acc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	330c      	adds	r3, #12
 80059c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	330c      	adds	r3, #12
 80059da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80059de:	647a      	str	r2, [r7, #68]	@ 0x44
 80059e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059e6:	e841 2300 	strex	r3, r2, [r1]
 80059ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1e3      	bne.n	80059ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3314      	adds	r3, #20
 80059f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	623b      	str	r3, [r7, #32]
   return(result);
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	f023 0301 	bic.w	r3, r3, #1
 8005a08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3314      	adds	r3, #20
 8005a12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a16:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e3      	bne.n	80059f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	330c      	adds	r3, #12
 8005a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0310 	bic.w	r3, r3, #16
 8005a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	330c      	adds	r3, #12
 8005a58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005a5c:	61fa      	str	r2, [r7, #28]
 8005a5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	69b9      	ldr	r1, [r7, #24]
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	e841 2300 	strex	r3, r2, [r1]
 8005a68:	617b      	str	r3, [r7, #20]
   return(result);
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e3      	bne.n	8005a38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f83d 	bl	8005afc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a82:	e023      	b.n	8005acc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d009      	beq.n	8005aa4 <HAL_UART_IRQHandler+0x4f4>
 8005a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f943 	bl	8005d28 <UART_Transmit_IT>
    return;
 8005aa2:	e014      	b.n	8005ace <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00e      	beq.n	8005ace <HAL_UART_IRQHandler+0x51e>
 8005ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d008      	beq.n	8005ace <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f983 	bl	8005dc8 <UART_EndTransmit_IT>
    return;
 8005ac2:	e004      	b.n	8005ace <HAL_UART_IRQHandler+0x51e>
    return;
 8005ac4:	bf00      	nop
 8005ac6:	e002      	b.n	8005ace <HAL_UART_IRQHandler+0x51e>
      return;
 8005ac8:	bf00      	nop
 8005aca:	e000      	b.n	8005ace <HAL_UART_IRQHandler+0x51e>
      return;
 8005acc:	bf00      	nop
  }
}
 8005ace:	37e8      	adds	r7, #232	@ 0xe8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	460b      	mov	r3, r1
 8005b06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	603b      	str	r3, [r7, #0]
 8005b20:	4613      	mov	r3, r2
 8005b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b24:	e03b      	b.n	8005b9e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2c:	d037      	beq.n	8005b9e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2e:	f7fc ffd9 	bl	8002ae4 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	6a3a      	ldr	r2, [r7, #32]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d302      	bcc.n	8005b44 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e03a      	b.n	8005bbe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f003 0304 	and.w	r3, r3, #4
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d023      	beq.n	8005b9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2b80      	cmp	r3, #128	@ 0x80
 8005b5a:	d020      	beq.n	8005b9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b40      	cmp	r3, #64	@ 0x40
 8005b60:	d01d      	beq.n	8005b9e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	d116      	bne.n	8005b9e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005b70:	2300      	movs	r3, #0
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f857 	bl	8005c3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2208      	movs	r2, #8
 8005b90:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e00f      	b.n	8005bbe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	bf0c      	ite	eq
 8005bae:	2301      	moveq	r3, #1
 8005bb0:	2300      	movne	r3, #0
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	79fb      	ldrb	r3, [r7, #7]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d0b4      	beq.n	8005b26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b085      	sub	sp, #20
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	88fa      	ldrh	r2, [r7, #6]
 8005bde:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	88fa      	ldrh	r2, [r7, #6]
 8005be4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2222      	movs	r2, #34	@ 0x22
 8005bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d007      	beq.n	8005c0c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c0a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	695a      	ldr	r2, [r3, #20]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0220 	orr.w	r2, r2, #32
 8005c2a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b095      	sub	sp, #84	@ 0x54
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	330c      	adds	r3, #12
 8005c48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	330c      	adds	r3, #12
 8005c60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c62:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e5      	bne.n	8005c42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3314      	adds	r3, #20
 8005c7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	e853 3f00 	ldrex	r3, [r3]
 8005c84:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	f023 0301 	bic.w	r3, r3, #1
 8005c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3314      	adds	r3, #20
 8005c94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e5      	bne.n	8005c76 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d119      	bne.n	8005ce6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	330c      	adds	r3, #12
 8005cb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	e853 3f00 	ldrex	r3, [r3]
 8005cc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f023 0310 	bic.w	r3, r3, #16
 8005cc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	330c      	adds	r3, #12
 8005cd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cd2:	61ba      	str	r2, [r7, #24]
 8005cd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6979      	ldr	r1, [r7, #20]
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	613b      	str	r3, [r7, #16]
   return(result);
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e5      	bne.n	8005cb2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005cf4:	bf00      	nop
 8005cf6:	3754      	adds	r7, #84	@ 0x54
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f7ff fee4 	bl	8005ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d20:	bf00      	nop
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b21      	cmp	r3, #33	@ 0x21
 8005d3a:	d13e      	bne.n	8005dba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d44:	d114      	bne.n	8005d70 <UART_Transmit_IT+0x48>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d110      	bne.n	8005d70 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	1c9a      	adds	r2, r3, #2
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	621a      	str	r2, [r3, #32]
 8005d6e:	e008      	b.n	8005d82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	1c59      	adds	r1, r3, #1
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6211      	str	r1, [r2, #32]
 8005d7a:	781a      	ldrb	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	4619      	mov	r1, r3
 8005d90:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10f      	bne.n	8005db6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005da4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005db4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e000      	b.n	8005dbc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005dba:	2302      	movs	r3, #2
  }
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dde:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff fe73 	bl	8005ad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08c      	sub	sp, #48	@ 0x30
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b22      	cmp	r3, #34	@ 0x22
 8005e0a:	f040 80ae 	bne.w	8005f6a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e16:	d117      	bne.n	8005e48 <UART_Receive_IT+0x50>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d113      	bne.n	8005e48 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e20:	2300      	movs	r3, #0
 8005e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e28:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e40:	1c9a      	adds	r2, r3, #2
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e46:	e026      	b.n	8005e96 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e5a:	d007      	beq.n	8005e6c <UART_Receive_IT+0x74>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10a      	bne.n	8005e7a <UART_Receive_IT+0x82>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d106      	bne.n	8005e7a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e76:	701a      	strb	r2, [r3, #0]
 8005e78:	e008      	b.n	8005e8c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d15d      	bne.n	8005f66 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0220 	bic.w	r2, r2, #32
 8005eb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ec8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695a      	ldr	r2, [r3, #20]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0201 	bic.w	r2, r2, #1
 8005ed8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d135      	bne.n	8005f5c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	330c      	adds	r3, #12
 8005efc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	e853 3f00 	ldrex	r3, [r3]
 8005f04:	613b      	str	r3, [r7, #16]
   return(result);
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f023 0310 	bic.w	r3, r3, #16
 8005f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	330c      	adds	r3, #12
 8005f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f16:	623a      	str	r2, [r7, #32]
 8005f18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1a:	69f9      	ldr	r1, [r7, #28]
 8005f1c:	6a3a      	ldr	r2, [r7, #32]
 8005f1e:	e841 2300 	strex	r3, r2, [r1]
 8005f22:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1e5      	bne.n	8005ef6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0310 	and.w	r3, r3, #16
 8005f34:	2b10      	cmp	r3, #16
 8005f36:	d10a      	bne.n	8005f4e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f52:	4619      	mov	r1, r3
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7ff fdd1 	bl	8005afc <HAL_UARTEx_RxEventCallback>
 8005f5a:	e002      	b.n	8005f62 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7fc fa19 	bl	8002394 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	e002      	b.n	8005f6c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	e000      	b.n	8005f6c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005f6a:	2302      	movs	r3, #2
  }
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3730      	adds	r7, #48	@ 0x30
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f78:	b0c0      	sub	sp, #256	@ 0x100
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f90:	68d9      	ldr	r1, [r3, #12]
 8005f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	ea40 0301 	orr.w	r3, r0, r1
 8005f9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005fcc:	f021 010c 	bic.w	r1, r1, #12
 8005fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fee:	6999      	ldr	r1, [r3, #24]
 8005ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	ea40 0301 	orr.w	r3, r0, r1
 8005ffa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	4b8f      	ldr	r3, [pc, #572]	@ (8006240 <UART_SetConfig+0x2cc>)
 8006004:	429a      	cmp	r2, r3
 8006006:	d005      	beq.n	8006014 <UART_SetConfig+0xa0>
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4b8d      	ldr	r3, [pc, #564]	@ (8006244 <UART_SetConfig+0x2d0>)
 8006010:	429a      	cmp	r2, r3
 8006012:	d104      	bne.n	800601e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006014:	f7fe f96e 	bl	80042f4 <HAL_RCC_GetPCLK2Freq>
 8006018:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800601c:	e003      	b.n	8006026 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800601e:	f7fe f955 	bl	80042cc <HAL_RCC_GetPCLK1Freq>
 8006022:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006030:	f040 810c 	bne.w	800624c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006038:	2200      	movs	r2, #0
 800603a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800603e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006042:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006046:	4622      	mov	r2, r4
 8006048:	462b      	mov	r3, r5
 800604a:	1891      	adds	r1, r2, r2
 800604c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800604e:	415b      	adcs	r3, r3
 8006050:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006052:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006056:	4621      	mov	r1, r4
 8006058:	eb12 0801 	adds.w	r8, r2, r1
 800605c:	4629      	mov	r1, r5
 800605e:	eb43 0901 	adc.w	r9, r3, r1
 8006062:	f04f 0200 	mov.w	r2, #0
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800606e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006072:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006076:	4690      	mov	r8, r2
 8006078:	4699      	mov	r9, r3
 800607a:	4623      	mov	r3, r4
 800607c:	eb18 0303 	adds.w	r3, r8, r3
 8006080:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006084:	462b      	mov	r3, r5
 8006086:	eb49 0303 	adc.w	r3, r9, r3
 800608a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800608e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800609a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800609e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060a2:	460b      	mov	r3, r1
 80060a4:	18db      	adds	r3, r3, r3
 80060a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80060a8:	4613      	mov	r3, r2
 80060aa:	eb42 0303 	adc.w	r3, r2, r3
 80060ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80060b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80060b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80060b8:	f7fa fcd8 	bl	8000a6c <__aeabi_uldivmod>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4b61      	ldr	r3, [pc, #388]	@ (8006248 <UART_SetConfig+0x2d4>)
 80060c2:	fba3 2302 	umull	r2, r3, r3, r2
 80060c6:	095b      	lsrs	r3, r3, #5
 80060c8:	011c      	lsls	r4, r3, #4
 80060ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ce:	2200      	movs	r2, #0
 80060d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80060d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80060dc:	4642      	mov	r2, r8
 80060de:	464b      	mov	r3, r9
 80060e0:	1891      	adds	r1, r2, r2
 80060e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80060e4:	415b      	adcs	r3, r3
 80060e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80060ec:	4641      	mov	r1, r8
 80060ee:	eb12 0a01 	adds.w	sl, r2, r1
 80060f2:	4649      	mov	r1, r9
 80060f4:	eb43 0b01 	adc.w	fp, r3, r1
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	f04f 0300 	mov.w	r3, #0
 8006100:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006104:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800610c:	4692      	mov	sl, r2
 800610e:	469b      	mov	fp, r3
 8006110:	4643      	mov	r3, r8
 8006112:	eb1a 0303 	adds.w	r3, sl, r3
 8006116:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800611a:	464b      	mov	r3, r9
 800611c:	eb4b 0303 	adc.w	r3, fp, r3
 8006120:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006130:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006134:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006138:	460b      	mov	r3, r1
 800613a:	18db      	adds	r3, r3, r3
 800613c:	643b      	str	r3, [r7, #64]	@ 0x40
 800613e:	4613      	mov	r3, r2
 8006140:	eb42 0303 	adc.w	r3, r2, r3
 8006144:	647b      	str	r3, [r7, #68]	@ 0x44
 8006146:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800614a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800614e:	f7fa fc8d 	bl	8000a6c <__aeabi_uldivmod>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4611      	mov	r1, r2
 8006158:	4b3b      	ldr	r3, [pc, #236]	@ (8006248 <UART_SetConfig+0x2d4>)
 800615a:	fba3 2301 	umull	r2, r3, r3, r1
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	2264      	movs	r2, #100	@ 0x64
 8006162:	fb02 f303 	mul.w	r3, r2, r3
 8006166:	1acb      	subs	r3, r1, r3
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800616e:	4b36      	ldr	r3, [pc, #216]	@ (8006248 <UART_SetConfig+0x2d4>)
 8006170:	fba3 2302 	umull	r2, r3, r3, r2
 8006174:	095b      	lsrs	r3, r3, #5
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800617c:	441c      	add	r4, r3
 800617e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006182:	2200      	movs	r2, #0
 8006184:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006188:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800618c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006190:	4642      	mov	r2, r8
 8006192:	464b      	mov	r3, r9
 8006194:	1891      	adds	r1, r2, r2
 8006196:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006198:	415b      	adcs	r3, r3
 800619a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800619c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80061a0:	4641      	mov	r1, r8
 80061a2:	1851      	adds	r1, r2, r1
 80061a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80061a6:	4649      	mov	r1, r9
 80061a8:	414b      	adcs	r3, r1
 80061aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80061b8:	4659      	mov	r1, fp
 80061ba:	00cb      	lsls	r3, r1, #3
 80061bc:	4651      	mov	r1, sl
 80061be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061c2:	4651      	mov	r1, sl
 80061c4:	00ca      	lsls	r2, r1, #3
 80061c6:	4610      	mov	r0, r2
 80061c8:	4619      	mov	r1, r3
 80061ca:	4603      	mov	r3, r0
 80061cc:	4642      	mov	r2, r8
 80061ce:	189b      	adds	r3, r3, r2
 80061d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061d4:	464b      	mov	r3, r9
 80061d6:	460a      	mov	r2, r1
 80061d8:	eb42 0303 	adc.w	r3, r2, r3
 80061dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80061f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80061f4:	460b      	mov	r3, r1
 80061f6:	18db      	adds	r3, r3, r3
 80061f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061fa:	4613      	mov	r3, r2
 80061fc:	eb42 0303 	adc.w	r3, r2, r3
 8006200:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006202:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006206:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800620a:	f7fa fc2f 	bl	8000a6c <__aeabi_uldivmod>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	4b0d      	ldr	r3, [pc, #52]	@ (8006248 <UART_SetConfig+0x2d4>)
 8006214:	fba3 1302 	umull	r1, r3, r3, r2
 8006218:	095b      	lsrs	r3, r3, #5
 800621a:	2164      	movs	r1, #100	@ 0x64
 800621c:	fb01 f303 	mul.w	r3, r1, r3
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	3332      	adds	r3, #50	@ 0x32
 8006226:	4a08      	ldr	r2, [pc, #32]	@ (8006248 <UART_SetConfig+0x2d4>)
 8006228:	fba2 2303 	umull	r2, r3, r2, r3
 800622c:	095b      	lsrs	r3, r3, #5
 800622e:	f003 0207 	and.w	r2, r3, #7
 8006232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4422      	add	r2, r4
 800623a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800623c:	e106      	b.n	800644c <UART_SetConfig+0x4d8>
 800623e:	bf00      	nop
 8006240:	40011000 	.word	0x40011000
 8006244:	40011400 	.word	0x40011400
 8006248:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800624c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006250:	2200      	movs	r2, #0
 8006252:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006256:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800625a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800625e:	4642      	mov	r2, r8
 8006260:	464b      	mov	r3, r9
 8006262:	1891      	adds	r1, r2, r2
 8006264:	6239      	str	r1, [r7, #32]
 8006266:	415b      	adcs	r3, r3
 8006268:	627b      	str	r3, [r7, #36]	@ 0x24
 800626a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800626e:	4641      	mov	r1, r8
 8006270:	1854      	adds	r4, r2, r1
 8006272:	4649      	mov	r1, r9
 8006274:	eb43 0501 	adc.w	r5, r3, r1
 8006278:	f04f 0200 	mov.w	r2, #0
 800627c:	f04f 0300 	mov.w	r3, #0
 8006280:	00eb      	lsls	r3, r5, #3
 8006282:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006286:	00e2      	lsls	r2, r4, #3
 8006288:	4614      	mov	r4, r2
 800628a:	461d      	mov	r5, r3
 800628c:	4643      	mov	r3, r8
 800628e:	18e3      	adds	r3, r4, r3
 8006290:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006294:	464b      	mov	r3, r9
 8006296:	eb45 0303 	adc.w	r3, r5, r3
 800629a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800629e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80062ae:	f04f 0200 	mov.w	r2, #0
 80062b2:	f04f 0300 	mov.w	r3, #0
 80062b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80062ba:	4629      	mov	r1, r5
 80062bc:	008b      	lsls	r3, r1, #2
 80062be:	4621      	mov	r1, r4
 80062c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062c4:	4621      	mov	r1, r4
 80062c6:	008a      	lsls	r2, r1, #2
 80062c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80062cc:	f7fa fbce 	bl	8000a6c <__aeabi_uldivmod>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4b60      	ldr	r3, [pc, #384]	@ (8006458 <UART_SetConfig+0x4e4>)
 80062d6:	fba3 2302 	umull	r2, r3, r3, r2
 80062da:	095b      	lsrs	r3, r3, #5
 80062dc:	011c      	lsls	r4, r3, #4
 80062de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80062ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80062f0:	4642      	mov	r2, r8
 80062f2:	464b      	mov	r3, r9
 80062f4:	1891      	adds	r1, r2, r2
 80062f6:	61b9      	str	r1, [r7, #24]
 80062f8:	415b      	adcs	r3, r3
 80062fa:	61fb      	str	r3, [r7, #28]
 80062fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006300:	4641      	mov	r1, r8
 8006302:	1851      	adds	r1, r2, r1
 8006304:	6139      	str	r1, [r7, #16]
 8006306:	4649      	mov	r1, r9
 8006308:	414b      	adcs	r3, r1
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	f04f 0200 	mov.w	r2, #0
 8006310:	f04f 0300 	mov.w	r3, #0
 8006314:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006318:	4659      	mov	r1, fp
 800631a:	00cb      	lsls	r3, r1, #3
 800631c:	4651      	mov	r1, sl
 800631e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006322:	4651      	mov	r1, sl
 8006324:	00ca      	lsls	r2, r1, #3
 8006326:	4610      	mov	r0, r2
 8006328:	4619      	mov	r1, r3
 800632a:	4603      	mov	r3, r0
 800632c:	4642      	mov	r2, r8
 800632e:	189b      	adds	r3, r3, r2
 8006330:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006334:	464b      	mov	r3, r9
 8006336:	460a      	mov	r2, r1
 8006338:	eb42 0303 	adc.w	r3, r2, r3
 800633c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	67bb      	str	r3, [r7, #120]	@ 0x78
 800634a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800634c:	f04f 0200 	mov.w	r2, #0
 8006350:	f04f 0300 	mov.w	r3, #0
 8006354:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006358:	4649      	mov	r1, r9
 800635a:	008b      	lsls	r3, r1, #2
 800635c:	4641      	mov	r1, r8
 800635e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006362:	4641      	mov	r1, r8
 8006364:	008a      	lsls	r2, r1, #2
 8006366:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800636a:	f7fa fb7f 	bl	8000a6c <__aeabi_uldivmod>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	4611      	mov	r1, r2
 8006374:	4b38      	ldr	r3, [pc, #224]	@ (8006458 <UART_SetConfig+0x4e4>)
 8006376:	fba3 2301 	umull	r2, r3, r3, r1
 800637a:	095b      	lsrs	r3, r3, #5
 800637c:	2264      	movs	r2, #100	@ 0x64
 800637e:	fb02 f303 	mul.w	r3, r2, r3
 8006382:	1acb      	subs	r3, r1, r3
 8006384:	011b      	lsls	r3, r3, #4
 8006386:	3332      	adds	r3, #50	@ 0x32
 8006388:	4a33      	ldr	r2, [pc, #204]	@ (8006458 <UART_SetConfig+0x4e4>)
 800638a:	fba2 2303 	umull	r2, r3, r2, r3
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006394:	441c      	add	r4, r3
 8006396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800639a:	2200      	movs	r2, #0
 800639c:	673b      	str	r3, [r7, #112]	@ 0x70
 800639e:	677a      	str	r2, [r7, #116]	@ 0x74
 80063a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80063a4:	4642      	mov	r2, r8
 80063a6:	464b      	mov	r3, r9
 80063a8:	1891      	adds	r1, r2, r2
 80063aa:	60b9      	str	r1, [r7, #8]
 80063ac:	415b      	adcs	r3, r3
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063b4:	4641      	mov	r1, r8
 80063b6:	1851      	adds	r1, r2, r1
 80063b8:	6039      	str	r1, [r7, #0]
 80063ba:	4649      	mov	r1, r9
 80063bc:	414b      	adcs	r3, r1
 80063be:	607b      	str	r3, [r7, #4]
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	f04f 0300 	mov.w	r3, #0
 80063c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063cc:	4659      	mov	r1, fp
 80063ce:	00cb      	lsls	r3, r1, #3
 80063d0:	4651      	mov	r1, sl
 80063d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063d6:	4651      	mov	r1, sl
 80063d8:	00ca      	lsls	r2, r1, #3
 80063da:	4610      	mov	r0, r2
 80063dc:	4619      	mov	r1, r3
 80063de:	4603      	mov	r3, r0
 80063e0:	4642      	mov	r2, r8
 80063e2:	189b      	adds	r3, r3, r2
 80063e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063e6:	464b      	mov	r3, r9
 80063e8:	460a      	mov	r2, r1
 80063ea:	eb42 0303 	adc.w	r3, r2, r3
 80063ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80063fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006408:	4649      	mov	r1, r9
 800640a:	008b      	lsls	r3, r1, #2
 800640c:	4641      	mov	r1, r8
 800640e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006412:	4641      	mov	r1, r8
 8006414:	008a      	lsls	r2, r1, #2
 8006416:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800641a:	f7fa fb27 	bl	8000a6c <__aeabi_uldivmod>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4b0d      	ldr	r3, [pc, #52]	@ (8006458 <UART_SetConfig+0x4e4>)
 8006424:	fba3 1302 	umull	r1, r3, r3, r2
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	2164      	movs	r1, #100	@ 0x64
 800642c:	fb01 f303 	mul.w	r3, r1, r3
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	3332      	adds	r3, #50	@ 0x32
 8006436:	4a08      	ldr	r2, [pc, #32]	@ (8006458 <UART_SetConfig+0x4e4>)
 8006438:	fba2 2303 	umull	r2, r3, r2, r3
 800643c:	095b      	lsrs	r3, r3, #5
 800643e:	f003 020f 	and.w	r2, r3, #15
 8006442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4422      	add	r2, r4
 800644a:	609a      	str	r2, [r3, #8]
}
 800644c:	bf00      	nop
 800644e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006452:	46bd      	mov	sp, r7
 8006454:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006458:	51eb851f 	.word	0x51eb851f

0800645c <atoi>:
 800645c:	220a      	movs	r2, #10
 800645e:	2100      	movs	r1, #0
 8006460:	f000 b87a 	b.w	8006558 <strtol>

08006464 <_strtol_l.constprop.0>:
 8006464:	2b24      	cmp	r3, #36	@ 0x24
 8006466:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800646a:	4686      	mov	lr, r0
 800646c:	4690      	mov	r8, r2
 800646e:	d801      	bhi.n	8006474 <_strtol_l.constprop.0+0x10>
 8006470:	2b01      	cmp	r3, #1
 8006472:	d106      	bne.n	8006482 <_strtol_l.constprop.0+0x1e>
 8006474:	f000 f8a2 	bl	80065bc <__errno>
 8006478:	2316      	movs	r3, #22
 800647a:	6003      	str	r3, [r0, #0]
 800647c:	2000      	movs	r0, #0
 800647e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006482:	4834      	ldr	r0, [pc, #208]	@ (8006554 <_strtol_l.constprop.0+0xf0>)
 8006484:	460d      	mov	r5, r1
 8006486:	462a      	mov	r2, r5
 8006488:	f815 4b01 	ldrb.w	r4, [r5], #1
 800648c:	5d06      	ldrb	r6, [r0, r4]
 800648e:	f016 0608 	ands.w	r6, r6, #8
 8006492:	d1f8      	bne.n	8006486 <_strtol_l.constprop.0+0x22>
 8006494:	2c2d      	cmp	r4, #45	@ 0x2d
 8006496:	d12d      	bne.n	80064f4 <_strtol_l.constprop.0+0x90>
 8006498:	782c      	ldrb	r4, [r5, #0]
 800649a:	2601      	movs	r6, #1
 800649c:	1c95      	adds	r5, r2, #2
 800649e:	f033 0210 	bics.w	r2, r3, #16
 80064a2:	d109      	bne.n	80064b8 <_strtol_l.constprop.0+0x54>
 80064a4:	2c30      	cmp	r4, #48	@ 0x30
 80064a6:	d12a      	bne.n	80064fe <_strtol_l.constprop.0+0x9a>
 80064a8:	782a      	ldrb	r2, [r5, #0]
 80064aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80064ae:	2a58      	cmp	r2, #88	@ 0x58
 80064b0:	d125      	bne.n	80064fe <_strtol_l.constprop.0+0x9a>
 80064b2:	786c      	ldrb	r4, [r5, #1]
 80064b4:	2310      	movs	r3, #16
 80064b6:	3502      	adds	r5, #2
 80064b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80064bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80064c0:	2200      	movs	r2, #0
 80064c2:	fbbc f9f3 	udiv	r9, ip, r3
 80064c6:	4610      	mov	r0, r2
 80064c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80064cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80064d0:	2f09      	cmp	r7, #9
 80064d2:	d81b      	bhi.n	800650c <_strtol_l.constprop.0+0xa8>
 80064d4:	463c      	mov	r4, r7
 80064d6:	42a3      	cmp	r3, r4
 80064d8:	dd27      	ble.n	800652a <_strtol_l.constprop.0+0xc6>
 80064da:	1c57      	adds	r7, r2, #1
 80064dc:	d007      	beq.n	80064ee <_strtol_l.constprop.0+0x8a>
 80064de:	4581      	cmp	r9, r0
 80064e0:	d320      	bcc.n	8006524 <_strtol_l.constprop.0+0xc0>
 80064e2:	d101      	bne.n	80064e8 <_strtol_l.constprop.0+0x84>
 80064e4:	45a2      	cmp	sl, r4
 80064e6:	db1d      	blt.n	8006524 <_strtol_l.constprop.0+0xc0>
 80064e8:	fb00 4003 	mla	r0, r0, r3, r4
 80064ec:	2201      	movs	r2, #1
 80064ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064f2:	e7eb      	b.n	80064cc <_strtol_l.constprop.0+0x68>
 80064f4:	2c2b      	cmp	r4, #43	@ 0x2b
 80064f6:	bf04      	itt	eq
 80064f8:	782c      	ldrbeq	r4, [r5, #0]
 80064fa:	1c95      	addeq	r5, r2, #2
 80064fc:	e7cf      	b.n	800649e <_strtol_l.constprop.0+0x3a>
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1da      	bne.n	80064b8 <_strtol_l.constprop.0+0x54>
 8006502:	2c30      	cmp	r4, #48	@ 0x30
 8006504:	bf0c      	ite	eq
 8006506:	2308      	moveq	r3, #8
 8006508:	230a      	movne	r3, #10
 800650a:	e7d5      	b.n	80064b8 <_strtol_l.constprop.0+0x54>
 800650c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006510:	2f19      	cmp	r7, #25
 8006512:	d801      	bhi.n	8006518 <_strtol_l.constprop.0+0xb4>
 8006514:	3c37      	subs	r4, #55	@ 0x37
 8006516:	e7de      	b.n	80064d6 <_strtol_l.constprop.0+0x72>
 8006518:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800651c:	2f19      	cmp	r7, #25
 800651e:	d804      	bhi.n	800652a <_strtol_l.constprop.0+0xc6>
 8006520:	3c57      	subs	r4, #87	@ 0x57
 8006522:	e7d8      	b.n	80064d6 <_strtol_l.constprop.0+0x72>
 8006524:	f04f 32ff 	mov.w	r2, #4294967295
 8006528:	e7e1      	b.n	80064ee <_strtol_l.constprop.0+0x8a>
 800652a:	1c53      	adds	r3, r2, #1
 800652c:	d108      	bne.n	8006540 <_strtol_l.constprop.0+0xdc>
 800652e:	2322      	movs	r3, #34	@ 0x22
 8006530:	f8ce 3000 	str.w	r3, [lr]
 8006534:	4660      	mov	r0, ip
 8006536:	f1b8 0f00 	cmp.w	r8, #0
 800653a:	d0a0      	beq.n	800647e <_strtol_l.constprop.0+0x1a>
 800653c:	1e69      	subs	r1, r5, #1
 800653e:	e006      	b.n	800654e <_strtol_l.constprop.0+0xea>
 8006540:	b106      	cbz	r6, 8006544 <_strtol_l.constprop.0+0xe0>
 8006542:	4240      	negs	r0, r0
 8006544:	f1b8 0f00 	cmp.w	r8, #0
 8006548:	d099      	beq.n	800647e <_strtol_l.constprop.0+0x1a>
 800654a:	2a00      	cmp	r2, #0
 800654c:	d1f6      	bne.n	800653c <_strtol_l.constprop.0+0xd8>
 800654e:	f8c8 1000 	str.w	r1, [r8]
 8006552:	e794      	b.n	800647e <_strtol_l.constprop.0+0x1a>
 8006554:	08007101 	.word	0x08007101

08006558 <strtol>:
 8006558:	4613      	mov	r3, r2
 800655a:	460a      	mov	r2, r1
 800655c:	4601      	mov	r1, r0
 800655e:	4802      	ldr	r0, [pc, #8]	@ (8006568 <strtol+0x10>)
 8006560:	6800      	ldr	r0, [r0, #0]
 8006562:	f7ff bf7f 	b.w	8006464 <_strtol_l.constprop.0>
 8006566:	bf00      	nop
 8006568:	20000018 	.word	0x20000018

0800656c <siprintf>:
 800656c:	b40e      	push	{r1, r2, r3}
 800656e:	b500      	push	{lr}
 8006570:	b09c      	sub	sp, #112	@ 0x70
 8006572:	ab1d      	add	r3, sp, #116	@ 0x74
 8006574:	9002      	str	r0, [sp, #8]
 8006576:	9006      	str	r0, [sp, #24]
 8006578:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800657c:	4809      	ldr	r0, [pc, #36]	@ (80065a4 <siprintf+0x38>)
 800657e:	9107      	str	r1, [sp, #28]
 8006580:	9104      	str	r1, [sp, #16]
 8006582:	4909      	ldr	r1, [pc, #36]	@ (80065a8 <siprintf+0x3c>)
 8006584:	f853 2b04 	ldr.w	r2, [r3], #4
 8006588:	9105      	str	r1, [sp, #20]
 800658a:	6800      	ldr	r0, [r0, #0]
 800658c:	9301      	str	r3, [sp, #4]
 800658e:	a902      	add	r1, sp, #8
 8006590:	f000 f994 	bl	80068bc <_svfiprintf_r>
 8006594:	9b02      	ldr	r3, [sp, #8]
 8006596:	2200      	movs	r2, #0
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	b01c      	add	sp, #112	@ 0x70
 800659c:	f85d eb04 	ldr.w	lr, [sp], #4
 80065a0:	b003      	add	sp, #12
 80065a2:	4770      	bx	lr
 80065a4:	20000018 	.word	0x20000018
 80065a8:	ffff0208 	.word	0xffff0208

080065ac <memset>:
 80065ac:	4402      	add	r2, r0
 80065ae:	4603      	mov	r3, r0
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d100      	bne.n	80065b6 <memset+0xa>
 80065b4:	4770      	bx	lr
 80065b6:	f803 1b01 	strb.w	r1, [r3], #1
 80065ba:	e7f9      	b.n	80065b0 <memset+0x4>

080065bc <__errno>:
 80065bc:	4b01      	ldr	r3, [pc, #4]	@ (80065c4 <__errno+0x8>)
 80065be:	6818      	ldr	r0, [r3, #0]
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	20000018 	.word	0x20000018

080065c8 <__libc_init_array>:
 80065c8:	b570      	push	{r4, r5, r6, lr}
 80065ca:	4d0d      	ldr	r5, [pc, #52]	@ (8006600 <__libc_init_array+0x38>)
 80065cc:	4c0d      	ldr	r4, [pc, #52]	@ (8006604 <__libc_init_array+0x3c>)
 80065ce:	1b64      	subs	r4, r4, r5
 80065d0:	10a4      	asrs	r4, r4, #2
 80065d2:	2600      	movs	r6, #0
 80065d4:	42a6      	cmp	r6, r4
 80065d6:	d109      	bne.n	80065ec <__libc_init_array+0x24>
 80065d8:	4d0b      	ldr	r5, [pc, #44]	@ (8006608 <__libc_init_array+0x40>)
 80065da:	4c0c      	ldr	r4, [pc, #48]	@ (800660c <__libc_init_array+0x44>)
 80065dc:	f000 fc66 	bl	8006eac <_init>
 80065e0:	1b64      	subs	r4, r4, r5
 80065e2:	10a4      	asrs	r4, r4, #2
 80065e4:	2600      	movs	r6, #0
 80065e6:	42a6      	cmp	r6, r4
 80065e8:	d105      	bne.n	80065f6 <__libc_init_array+0x2e>
 80065ea:	bd70      	pop	{r4, r5, r6, pc}
 80065ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f0:	4798      	blx	r3
 80065f2:	3601      	adds	r6, #1
 80065f4:	e7ee      	b.n	80065d4 <__libc_init_array+0xc>
 80065f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065fa:	4798      	blx	r3
 80065fc:	3601      	adds	r6, #1
 80065fe:	e7f2      	b.n	80065e6 <__libc_init_array+0x1e>
 8006600:	0800723c 	.word	0x0800723c
 8006604:	0800723c 	.word	0x0800723c
 8006608:	0800723c 	.word	0x0800723c
 800660c:	08007240 	.word	0x08007240

08006610 <__retarget_lock_acquire_recursive>:
 8006610:	4770      	bx	lr

08006612 <__retarget_lock_release_recursive>:
 8006612:	4770      	bx	lr

08006614 <_free_r>:
 8006614:	b538      	push	{r3, r4, r5, lr}
 8006616:	4605      	mov	r5, r0
 8006618:	2900      	cmp	r1, #0
 800661a:	d041      	beq.n	80066a0 <_free_r+0x8c>
 800661c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006620:	1f0c      	subs	r4, r1, #4
 8006622:	2b00      	cmp	r3, #0
 8006624:	bfb8      	it	lt
 8006626:	18e4      	addlt	r4, r4, r3
 8006628:	f000 f8e0 	bl	80067ec <__malloc_lock>
 800662c:	4a1d      	ldr	r2, [pc, #116]	@ (80066a4 <_free_r+0x90>)
 800662e:	6813      	ldr	r3, [r2, #0]
 8006630:	b933      	cbnz	r3, 8006640 <_free_r+0x2c>
 8006632:	6063      	str	r3, [r4, #4]
 8006634:	6014      	str	r4, [r2, #0]
 8006636:	4628      	mov	r0, r5
 8006638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800663c:	f000 b8dc 	b.w	80067f8 <__malloc_unlock>
 8006640:	42a3      	cmp	r3, r4
 8006642:	d908      	bls.n	8006656 <_free_r+0x42>
 8006644:	6820      	ldr	r0, [r4, #0]
 8006646:	1821      	adds	r1, r4, r0
 8006648:	428b      	cmp	r3, r1
 800664a:	bf01      	itttt	eq
 800664c:	6819      	ldreq	r1, [r3, #0]
 800664e:	685b      	ldreq	r3, [r3, #4]
 8006650:	1809      	addeq	r1, r1, r0
 8006652:	6021      	streq	r1, [r4, #0]
 8006654:	e7ed      	b.n	8006632 <_free_r+0x1e>
 8006656:	461a      	mov	r2, r3
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	b10b      	cbz	r3, 8006660 <_free_r+0x4c>
 800665c:	42a3      	cmp	r3, r4
 800665e:	d9fa      	bls.n	8006656 <_free_r+0x42>
 8006660:	6811      	ldr	r1, [r2, #0]
 8006662:	1850      	adds	r0, r2, r1
 8006664:	42a0      	cmp	r0, r4
 8006666:	d10b      	bne.n	8006680 <_free_r+0x6c>
 8006668:	6820      	ldr	r0, [r4, #0]
 800666a:	4401      	add	r1, r0
 800666c:	1850      	adds	r0, r2, r1
 800666e:	4283      	cmp	r3, r0
 8006670:	6011      	str	r1, [r2, #0]
 8006672:	d1e0      	bne.n	8006636 <_free_r+0x22>
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	6053      	str	r3, [r2, #4]
 800667a:	4408      	add	r0, r1
 800667c:	6010      	str	r0, [r2, #0]
 800667e:	e7da      	b.n	8006636 <_free_r+0x22>
 8006680:	d902      	bls.n	8006688 <_free_r+0x74>
 8006682:	230c      	movs	r3, #12
 8006684:	602b      	str	r3, [r5, #0]
 8006686:	e7d6      	b.n	8006636 <_free_r+0x22>
 8006688:	6820      	ldr	r0, [r4, #0]
 800668a:	1821      	adds	r1, r4, r0
 800668c:	428b      	cmp	r3, r1
 800668e:	bf04      	itt	eq
 8006690:	6819      	ldreq	r1, [r3, #0]
 8006692:	685b      	ldreq	r3, [r3, #4]
 8006694:	6063      	str	r3, [r4, #4]
 8006696:	bf04      	itt	eq
 8006698:	1809      	addeq	r1, r1, r0
 800669a:	6021      	streq	r1, [r4, #0]
 800669c:	6054      	str	r4, [r2, #4]
 800669e:	e7ca      	b.n	8006636 <_free_r+0x22>
 80066a0:	bd38      	pop	{r3, r4, r5, pc}
 80066a2:	bf00      	nop
 80066a4:	20000438 	.word	0x20000438

080066a8 <sbrk_aligned>:
 80066a8:	b570      	push	{r4, r5, r6, lr}
 80066aa:	4e0f      	ldr	r6, [pc, #60]	@ (80066e8 <sbrk_aligned+0x40>)
 80066ac:	460c      	mov	r4, r1
 80066ae:	6831      	ldr	r1, [r6, #0]
 80066b0:	4605      	mov	r5, r0
 80066b2:	b911      	cbnz	r1, 80066ba <sbrk_aligned+0x12>
 80066b4:	f000 fba6 	bl	8006e04 <_sbrk_r>
 80066b8:	6030      	str	r0, [r6, #0]
 80066ba:	4621      	mov	r1, r4
 80066bc:	4628      	mov	r0, r5
 80066be:	f000 fba1 	bl	8006e04 <_sbrk_r>
 80066c2:	1c43      	adds	r3, r0, #1
 80066c4:	d103      	bne.n	80066ce <sbrk_aligned+0x26>
 80066c6:	f04f 34ff 	mov.w	r4, #4294967295
 80066ca:	4620      	mov	r0, r4
 80066cc:	bd70      	pop	{r4, r5, r6, pc}
 80066ce:	1cc4      	adds	r4, r0, #3
 80066d0:	f024 0403 	bic.w	r4, r4, #3
 80066d4:	42a0      	cmp	r0, r4
 80066d6:	d0f8      	beq.n	80066ca <sbrk_aligned+0x22>
 80066d8:	1a21      	subs	r1, r4, r0
 80066da:	4628      	mov	r0, r5
 80066dc:	f000 fb92 	bl	8006e04 <_sbrk_r>
 80066e0:	3001      	adds	r0, #1
 80066e2:	d1f2      	bne.n	80066ca <sbrk_aligned+0x22>
 80066e4:	e7ef      	b.n	80066c6 <sbrk_aligned+0x1e>
 80066e6:	bf00      	nop
 80066e8:	20000434 	.word	0x20000434

080066ec <_malloc_r>:
 80066ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066f0:	1ccd      	adds	r5, r1, #3
 80066f2:	f025 0503 	bic.w	r5, r5, #3
 80066f6:	3508      	adds	r5, #8
 80066f8:	2d0c      	cmp	r5, #12
 80066fa:	bf38      	it	cc
 80066fc:	250c      	movcc	r5, #12
 80066fe:	2d00      	cmp	r5, #0
 8006700:	4606      	mov	r6, r0
 8006702:	db01      	blt.n	8006708 <_malloc_r+0x1c>
 8006704:	42a9      	cmp	r1, r5
 8006706:	d904      	bls.n	8006712 <_malloc_r+0x26>
 8006708:	230c      	movs	r3, #12
 800670a:	6033      	str	r3, [r6, #0]
 800670c:	2000      	movs	r0, #0
 800670e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006712:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067e8 <_malloc_r+0xfc>
 8006716:	f000 f869 	bl	80067ec <__malloc_lock>
 800671a:	f8d8 3000 	ldr.w	r3, [r8]
 800671e:	461c      	mov	r4, r3
 8006720:	bb44      	cbnz	r4, 8006774 <_malloc_r+0x88>
 8006722:	4629      	mov	r1, r5
 8006724:	4630      	mov	r0, r6
 8006726:	f7ff ffbf 	bl	80066a8 <sbrk_aligned>
 800672a:	1c43      	adds	r3, r0, #1
 800672c:	4604      	mov	r4, r0
 800672e:	d158      	bne.n	80067e2 <_malloc_r+0xf6>
 8006730:	f8d8 4000 	ldr.w	r4, [r8]
 8006734:	4627      	mov	r7, r4
 8006736:	2f00      	cmp	r7, #0
 8006738:	d143      	bne.n	80067c2 <_malloc_r+0xd6>
 800673a:	2c00      	cmp	r4, #0
 800673c:	d04b      	beq.n	80067d6 <_malloc_r+0xea>
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	4639      	mov	r1, r7
 8006742:	4630      	mov	r0, r6
 8006744:	eb04 0903 	add.w	r9, r4, r3
 8006748:	f000 fb5c 	bl	8006e04 <_sbrk_r>
 800674c:	4581      	cmp	r9, r0
 800674e:	d142      	bne.n	80067d6 <_malloc_r+0xea>
 8006750:	6821      	ldr	r1, [r4, #0]
 8006752:	1a6d      	subs	r5, r5, r1
 8006754:	4629      	mov	r1, r5
 8006756:	4630      	mov	r0, r6
 8006758:	f7ff ffa6 	bl	80066a8 <sbrk_aligned>
 800675c:	3001      	adds	r0, #1
 800675e:	d03a      	beq.n	80067d6 <_malloc_r+0xea>
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	442b      	add	r3, r5
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	f8d8 3000 	ldr.w	r3, [r8]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	bb62      	cbnz	r2, 80067c8 <_malloc_r+0xdc>
 800676e:	f8c8 7000 	str.w	r7, [r8]
 8006772:	e00f      	b.n	8006794 <_malloc_r+0xa8>
 8006774:	6822      	ldr	r2, [r4, #0]
 8006776:	1b52      	subs	r2, r2, r5
 8006778:	d420      	bmi.n	80067bc <_malloc_r+0xd0>
 800677a:	2a0b      	cmp	r2, #11
 800677c:	d917      	bls.n	80067ae <_malloc_r+0xc2>
 800677e:	1961      	adds	r1, r4, r5
 8006780:	42a3      	cmp	r3, r4
 8006782:	6025      	str	r5, [r4, #0]
 8006784:	bf18      	it	ne
 8006786:	6059      	strne	r1, [r3, #4]
 8006788:	6863      	ldr	r3, [r4, #4]
 800678a:	bf08      	it	eq
 800678c:	f8c8 1000 	streq.w	r1, [r8]
 8006790:	5162      	str	r2, [r4, r5]
 8006792:	604b      	str	r3, [r1, #4]
 8006794:	4630      	mov	r0, r6
 8006796:	f000 f82f 	bl	80067f8 <__malloc_unlock>
 800679a:	f104 000b 	add.w	r0, r4, #11
 800679e:	1d23      	adds	r3, r4, #4
 80067a0:	f020 0007 	bic.w	r0, r0, #7
 80067a4:	1ac2      	subs	r2, r0, r3
 80067a6:	bf1c      	itt	ne
 80067a8:	1a1b      	subne	r3, r3, r0
 80067aa:	50a3      	strne	r3, [r4, r2]
 80067ac:	e7af      	b.n	800670e <_malloc_r+0x22>
 80067ae:	6862      	ldr	r2, [r4, #4]
 80067b0:	42a3      	cmp	r3, r4
 80067b2:	bf0c      	ite	eq
 80067b4:	f8c8 2000 	streq.w	r2, [r8]
 80067b8:	605a      	strne	r2, [r3, #4]
 80067ba:	e7eb      	b.n	8006794 <_malloc_r+0xa8>
 80067bc:	4623      	mov	r3, r4
 80067be:	6864      	ldr	r4, [r4, #4]
 80067c0:	e7ae      	b.n	8006720 <_malloc_r+0x34>
 80067c2:	463c      	mov	r4, r7
 80067c4:	687f      	ldr	r7, [r7, #4]
 80067c6:	e7b6      	b.n	8006736 <_malloc_r+0x4a>
 80067c8:	461a      	mov	r2, r3
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	42a3      	cmp	r3, r4
 80067ce:	d1fb      	bne.n	80067c8 <_malloc_r+0xdc>
 80067d0:	2300      	movs	r3, #0
 80067d2:	6053      	str	r3, [r2, #4]
 80067d4:	e7de      	b.n	8006794 <_malloc_r+0xa8>
 80067d6:	230c      	movs	r3, #12
 80067d8:	6033      	str	r3, [r6, #0]
 80067da:	4630      	mov	r0, r6
 80067dc:	f000 f80c 	bl	80067f8 <__malloc_unlock>
 80067e0:	e794      	b.n	800670c <_malloc_r+0x20>
 80067e2:	6005      	str	r5, [r0, #0]
 80067e4:	e7d6      	b.n	8006794 <_malloc_r+0xa8>
 80067e6:	bf00      	nop
 80067e8:	20000438 	.word	0x20000438

080067ec <__malloc_lock>:
 80067ec:	4801      	ldr	r0, [pc, #4]	@ (80067f4 <__malloc_lock+0x8>)
 80067ee:	f7ff bf0f 	b.w	8006610 <__retarget_lock_acquire_recursive>
 80067f2:	bf00      	nop
 80067f4:	20000430 	.word	0x20000430

080067f8 <__malloc_unlock>:
 80067f8:	4801      	ldr	r0, [pc, #4]	@ (8006800 <__malloc_unlock+0x8>)
 80067fa:	f7ff bf0a 	b.w	8006612 <__retarget_lock_release_recursive>
 80067fe:	bf00      	nop
 8006800:	20000430 	.word	0x20000430

08006804 <__ssputs_r>:
 8006804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006808:	688e      	ldr	r6, [r1, #8]
 800680a:	461f      	mov	r7, r3
 800680c:	42be      	cmp	r6, r7
 800680e:	680b      	ldr	r3, [r1, #0]
 8006810:	4682      	mov	sl, r0
 8006812:	460c      	mov	r4, r1
 8006814:	4690      	mov	r8, r2
 8006816:	d82d      	bhi.n	8006874 <__ssputs_r+0x70>
 8006818:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800681c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006820:	d026      	beq.n	8006870 <__ssputs_r+0x6c>
 8006822:	6965      	ldr	r5, [r4, #20]
 8006824:	6909      	ldr	r1, [r1, #16]
 8006826:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800682a:	eba3 0901 	sub.w	r9, r3, r1
 800682e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006832:	1c7b      	adds	r3, r7, #1
 8006834:	444b      	add	r3, r9
 8006836:	106d      	asrs	r5, r5, #1
 8006838:	429d      	cmp	r5, r3
 800683a:	bf38      	it	cc
 800683c:	461d      	movcc	r5, r3
 800683e:	0553      	lsls	r3, r2, #21
 8006840:	d527      	bpl.n	8006892 <__ssputs_r+0x8e>
 8006842:	4629      	mov	r1, r5
 8006844:	f7ff ff52 	bl	80066ec <_malloc_r>
 8006848:	4606      	mov	r6, r0
 800684a:	b360      	cbz	r0, 80068a6 <__ssputs_r+0xa2>
 800684c:	6921      	ldr	r1, [r4, #16]
 800684e:	464a      	mov	r2, r9
 8006850:	f000 fae8 	bl	8006e24 <memcpy>
 8006854:	89a3      	ldrh	r3, [r4, #12]
 8006856:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800685a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800685e:	81a3      	strh	r3, [r4, #12]
 8006860:	6126      	str	r6, [r4, #16]
 8006862:	6165      	str	r5, [r4, #20]
 8006864:	444e      	add	r6, r9
 8006866:	eba5 0509 	sub.w	r5, r5, r9
 800686a:	6026      	str	r6, [r4, #0]
 800686c:	60a5      	str	r5, [r4, #8]
 800686e:	463e      	mov	r6, r7
 8006870:	42be      	cmp	r6, r7
 8006872:	d900      	bls.n	8006876 <__ssputs_r+0x72>
 8006874:	463e      	mov	r6, r7
 8006876:	6820      	ldr	r0, [r4, #0]
 8006878:	4632      	mov	r2, r6
 800687a:	4641      	mov	r1, r8
 800687c:	f000 faa8 	bl	8006dd0 <memmove>
 8006880:	68a3      	ldr	r3, [r4, #8]
 8006882:	1b9b      	subs	r3, r3, r6
 8006884:	60a3      	str	r3, [r4, #8]
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	4433      	add	r3, r6
 800688a:	6023      	str	r3, [r4, #0]
 800688c:	2000      	movs	r0, #0
 800688e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006892:	462a      	mov	r2, r5
 8006894:	f000 fad4 	bl	8006e40 <_realloc_r>
 8006898:	4606      	mov	r6, r0
 800689a:	2800      	cmp	r0, #0
 800689c:	d1e0      	bne.n	8006860 <__ssputs_r+0x5c>
 800689e:	6921      	ldr	r1, [r4, #16]
 80068a0:	4650      	mov	r0, sl
 80068a2:	f7ff feb7 	bl	8006614 <_free_r>
 80068a6:	230c      	movs	r3, #12
 80068a8:	f8ca 3000 	str.w	r3, [sl]
 80068ac:	89a3      	ldrh	r3, [r4, #12]
 80068ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068b2:	81a3      	strh	r3, [r4, #12]
 80068b4:	f04f 30ff 	mov.w	r0, #4294967295
 80068b8:	e7e9      	b.n	800688e <__ssputs_r+0x8a>
	...

080068bc <_svfiprintf_r>:
 80068bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c0:	4698      	mov	r8, r3
 80068c2:	898b      	ldrh	r3, [r1, #12]
 80068c4:	061b      	lsls	r3, r3, #24
 80068c6:	b09d      	sub	sp, #116	@ 0x74
 80068c8:	4607      	mov	r7, r0
 80068ca:	460d      	mov	r5, r1
 80068cc:	4614      	mov	r4, r2
 80068ce:	d510      	bpl.n	80068f2 <_svfiprintf_r+0x36>
 80068d0:	690b      	ldr	r3, [r1, #16]
 80068d2:	b973      	cbnz	r3, 80068f2 <_svfiprintf_r+0x36>
 80068d4:	2140      	movs	r1, #64	@ 0x40
 80068d6:	f7ff ff09 	bl	80066ec <_malloc_r>
 80068da:	6028      	str	r0, [r5, #0]
 80068dc:	6128      	str	r0, [r5, #16]
 80068de:	b930      	cbnz	r0, 80068ee <_svfiprintf_r+0x32>
 80068e0:	230c      	movs	r3, #12
 80068e2:	603b      	str	r3, [r7, #0]
 80068e4:	f04f 30ff 	mov.w	r0, #4294967295
 80068e8:	b01d      	add	sp, #116	@ 0x74
 80068ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ee:	2340      	movs	r3, #64	@ 0x40
 80068f0:	616b      	str	r3, [r5, #20]
 80068f2:	2300      	movs	r3, #0
 80068f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80068f6:	2320      	movs	r3, #32
 80068f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80068fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006900:	2330      	movs	r3, #48	@ 0x30
 8006902:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006aa0 <_svfiprintf_r+0x1e4>
 8006906:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800690a:	f04f 0901 	mov.w	r9, #1
 800690e:	4623      	mov	r3, r4
 8006910:	469a      	mov	sl, r3
 8006912:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006916:	b10a      	cbz	r2, 800691c <_svfiprintf_r+0x60>
 8006918:	2a25      	cmp	r2, #37	@ 0x25
 800691a:	d1f9      	bne.n	8006910 <_svfiprintf_r+0x54>
 800691c:	ebba 0b04 	subs.w	fp, sl, r4
 8006920:	d00b      	beq.n	800693a <_svfiprintf_r+0x7e>
 8006922:	465b      	mov	r3, fp
 8006924:	4622      	mov	r2, r4
 8006926:	4629      	mov	r1, r5
 8006928:	4638      	mov	r0, r7
 800692a:	f7ff ff6b 	bl	8006804 <__ssputs_r>
 800692e:	3001      	adds	r0, #1
 8006930:	f000 80a7 	beq.w	8006a82 <_svfiprintf_r+0x1c6>
 8006934:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006936:	445a      	add	r2, fp
 8006938:	9209      	str	r2, [sp, #36]	@ 0x24
 800693a:	f89a 3000 	ldrb.w	r3, [sl]
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 809f 	beq.w	8006a82 <_svfiprintf_r+0x1c6>
 8006944:	2300      	movs	r3, #0
 8006946:	f04f 32ff 	mov.w	r2, #4294967295
 800694a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800694e:	f10a 0a01 	add.w	sl, sl, #1
 8006952:	9304      	str	r3, [sp, #16]
 8006954:	9307      	str	r3, [sp, #28]
 8006956:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800695a:	931a      	str	r3, [sp, #104]	@ 0x68
 800695c:	4654      	mov	r4, sl
 800695e:	2205      	movs	r2, #5
 8006960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006964:	484e      	ldr	r0, [pc, #312]	@ (8006aa0 <_svfiprintf_r+0x1e4>)
 8006966:	f7f9 fc43 	bl	80001f0 <memchr>
 800696a:	9a04      	ldr	r2, [sp, #16]
 800696c:	b9d8      	cbnz	r0, 80069a6 <_svfiprintf_r+0xea>
 800696e:	06d0      	lsls	r0, r2, #27
 8006970:	bf44      	itt	mi
 8006972:	2320      	movmi	r3, #32
 8006974:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006978:	0711      	lsls	r1, r2, #28
 800697a:	bf44      	itt	mi
 800697c:	232b      	movmi	r3, #43	@ 0x2b
 800697e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006982:	f89a 3000 	ldrb.w	r3, [sl]
 8006986:	2b2a      	cmp	r3, #42	@ 0x2a
 8006988:	d015      	beq.n	80069b6 <_svfiprintf_r+0xfa>
 800698a:	9a07      	ldr	r2, [sp, #28]
 800698c:	4654      	mov	r4, sl
 800698e:	2000      	movs	r0, #0
 8006990:	f04f 0c0a 	mov.w	ip, #10
 8006994:	4621      	mov	r1, r4
 8006996:	f811 3b01 	ldrb.w	r3, [r1], #1
 800699a:	3b30      	subs	r3, #48	@ 0x30
 800699c:	2b09      	cmp	r3, #9
 800699e:	d94b      	bls.n	8006a38 <_svfiprintf_r+0x17c>
 80069a0:	b1b0      	cbz	r0, 80069d0 <_svfiprintf_r+0x114>
 80069a2:	9207      	str	r2, [sp, #28]
 80069a4:	e014      	b.n	80069d0 <_svfiprintf_r+0x114>
 80069a6:	eba0 0308 	sub.w	r3, r0, r8
 80069aa:	fa09 f303 	lsl.w	r3, r9, r3
 80069ae:	4313      	orrs	r3, r2
 80069b0:	9304      	str	r3, [sp, #16]
 80069b2:	46a2      	mov	sl, r4
 80069b4:	e7d2      	b.n	800695c <_svfiprintf_r+0xa0>
 80069b6:	9b03      	ldr	r3, [sp, #12]
 80069b8:	1d19      	adds	r1, r3, #4
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	9103      	str	r1, [sp, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	bfbb      	ittet	lt
 80069c2:	425b      	neglt	r3, r3
 80069c4:	f042 0202 	orrlt.w	r2, r2, #2
 80069c8:	9307      	strge	r3, [sp, #28]
 80069ca:	9307      	strlt	r3, [sp, #28]
 80069cc:	bfb8      	it	lt
 80069ce:	9204      	strlt	r2, [sp, #16]
 80069d0:	7823      	ldrb	r3, [r4, #0]
 80069d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80069d4:	d10a      	bne.n	80069ec <_svfiprintf_r+0x130>
 80069d6:	7863      	ldrb	r3, [r4, #1]
 80069d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80069da:	d132      	bne.n	8006a42 <_svfiprintf_r+0x186>
 80069dc:	9b03      	ldr	r3, [sp, #12]
 80069de:	1d1a      	adds	r2, r3, #4
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	9203      	str	r2, [sp, #12]
 80069e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80069e8:	3402      	adds	r4, #2
 80069ea:	9305      	str	r3, [sp, #20]
 80069ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006ab0 <_svfiprintf_r+0x1f4>
 80069f0:	7821      	ldrb	r1, [r4, #0]
 80069f2:	2203      	movs	r2, #3
 80069f4:	4650      	mov	r0, sl
 80069f6:	f7f9 fbfb 	bl	80001f0 <memchr>
 80069fa:	b138      	cbz	r0, 8006a0c <_svfiprintf_r+0x150>
 80069fc:	9b04      	ldr	r3, [sp, #16]
 80069fe:	eba0 000a 	sub.w	r0, r0, sl
 8006a02:	2240      	movs	r2, #64	@ 0x40
 8006a04:	4082      	lsls	r2, r0
 8006a06:	4313      	orrs	r3, r2
 8006a08:	3401      	adds	r4, #1
 8006a0a:	9304      	str	r3, [sp, #16]
 8006a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a10:	4824      	ldr	r0, [pc, #144]	@ (8006aa4 <_svfiprintf_r+0x1e8>)
 8006a12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a16:	2206      	movs	r2, #6
 8006a18:	f7f9 fbea 	bl	80001f0 <memchr>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	d036      	beq.n	8006a8e <_svfiprintf_r+0x1d2>
 8006a20:	4b21      	ldr	r3, [pc, #132]	@ (8006aa8 <_svfiprintf_r+0x1ec>)
 8006a22:	bb1b      	cbnz	r3, 8006a6c <_svfiprintf_r+0x1b0>
 8006a24:	9b03      	ldr	r3, [sp, #12]
 8006a26:	3307      	adds	r3, #7
 8006a28:	f023 0307 	bic.w	r3, r3, #7
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	9303      	str	r3, [sp, #12]
 8006a30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a32:	4433      	add	r3, r6
 8006a34:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a36:	e76a      	b.n	800690e <_svfiprintf_r+0x52>
 8006a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a3c:	460c      	mov	r4, r1
 8006a3e:	2001      	movs	r0, #1
 8006a40:	e7a8      	b.n	8006994 <_svfiprintf_r+0xd8>
 8006a42:	2300      	movs	r3, #0
 8006a44:	3401      	adds	r4, #1
 8006a46:	9305      	str	r3, [sp, #20]
 8006a48:	4619      	mov	r1, r3
 8006a4a:	f04f 0c0a 	mov.w	ip, #10
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a54:	3a30      	subs	r2, #48	@ 0x30
 8006a56:	2a09      	cmp	r2, #9
 8006a58:	d903      	bls.n	8006a62 <_svfiprintf_r+0x1a6>
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0c6      	beq.n	80069ec <_svfiprintf_r+0x130>
 8006a5e:	9105      	str	r1, [sp, #20]
 8006a60:	e7c4      	b.n	80069ec <_svfiprintf_r+0x130>
 8006a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a66:	4604      	mov	r4, r0
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e7f0      	b.n	8006a4e <_svfiprintf_r+0x192>
 8006a6c:	ab03      	add	r3, sp, #12
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	462a      	mov	r2, r5
 8006a72:	4b0e      	ldr	r3, [pc, #56]	@ (8006aac <_svfiprintf_r+0x1f0>)
 8006a74:	a904      	add	r1, sp, #16
 8006a76:	4638      	mov	r0, r7
 8006a78:	f3af 8000 	nop.w
 8006a7c:	1c42      	adds	r2, r0, #1
 8006a7e:	4606      	mov	r6, r0
 8006a80:	d1d6      	bne.n	8006a30 <_svfiprintf_r+0x174>
 8006a82:	89ab      	ldrh	r3, [r5, #12]
 8006a84:	065b      	lsls	r3, r3, #25
 8006a86:	f53f af2d 	bmi.w	80068e4 <_svfiprintf_r+0x28>
 8006a8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a8c:	e72c      	b.n	80068e8 <_svfiprintf_r+0x2c>
 8006a8e:	ab03      	add	r3, sp, #12
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	462a      	mov	r2, r5
 8006a94:	4b05      	ldr	r3, [pc, #20]	@ (8006aac <_svfiprintf_r+0x1f0>)
 8006a96:	a904      	add	r1, sp, #16
 8006a98:	4638      	mov	r0, r7
 8006a9a:	f000 f879 	bl	8006b90 <_printf_i>
 8006a9e:	e7ed      	b.n	8006a7c <_svfiprintf_r+0x1c0>
 8006aa0:	08007201 	.word	0x08007201
 8006aa4:	0800720b 	.word	0x0800720b
 8006aa8:	00000000 	.word	0x00000000
 8006aac:	08006805 	.word	0x08006805
 8006ab0:	08007207 	.word	0x08007207

08006ab4 <_printf_common>:
 8006ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab8:	4616      	mov	r6, r2
 8006aba:	4698      	mov	r8, r3
 8006abc:	688a      	ldr	r2, [r1, #8]
 8006abe:	690b      	ldr	r3, [r1, #16]
 8006ac0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	bfb8      	it	lt
 8006ac8:	4613      	movlt	r3, r2
 8006aca:	6033      	str	r3, [r6, #0]
 8006acc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ad0:	4607      	mov	r7, r0
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	b10a      	cbz	r2, 8006ada <_printf_common+0x26>
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	6033      	str	r3, [r6, #0]
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	0699      	lsls	r1, r3, #26
 8006ade:	bf42      	ittt	mi
 8006ae0:	6833      	ldrmi	r3, [r6, #0]
 8006ae2:	3302      	addmi	r3, #2
 8006ae4:	6033      	strmi	r3, [r6, #0]
 8006ae6:	6825      	ldr	r5, [r4, #0]
 8006ae8:	f015 0506 	ands.w	r5, r5, #6
 8006aec:	d106      	bne.n	8006afc <_printf_common+0x48>
 8006aee:	f104 0a19 	add.w	sl, r4, #25
 8006af2:	68e3      	ldr	r3, [r4, #12]
 8006af4:	6832      	ldr	r2, [r6, #0]
 8006af6:	1a9b      	subs	r3, r3, r2
 8006af8:	42ab      	cmp	r3, r5
 8006afa:	dc26      	bgt.n	8006b4a <_printf_common+0x96>
 8006afc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b00:	6822      	ldr	r2, [r4, #0]
 8006b02:	3b00      	subs	r3, #0
 8006b04:	bf18      	it	ne
 8006b06:	2301      	movne	r3, #1
 8006b08:	0692      	lsls	r2, r2, #26
 8006b0a:	d42b      	bmi.n	8006b64 <_printf_common+0xb0>
 8006b0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b10:	4641      	mov	r1, r8
 8006b12:	4638      	mov	r0, r7
 8006b14:	47c8      	blx	r9
 8006b16:	3001      	adds	r0, #1
 8006b18:	d01e      	beq.n	8006b58 <_printf_common+0xa4>
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	6922      	ldr	r2, [r4, #16]
 8006b1e:	f003 0306 	and.w	r3, r3, #6
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	bf02      	ittt	eq
 8006b26:	68e5      	ldreq	r5, [r4, #12]
 8006b28:	6833      	ldreq	r3, [r6, #0]
 8006b2a:	1aed      	subeq	r5, r5, r3
 8006b2c:	68a3      	ldr	r3, [r4, #8]
 8006b2e:	bf0c      	ite	eq
 8006b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b34:	2500      	movne	r5, #0
 8006b36:	4293      	cmp	r3, r2
 8006b38:	bfc4      	itt	gt
 8006b3a:	1a9b      	subgt	r3, r3, r2
 8006b3c:	18ed      	addgt	r5, r5, r3
 8006b3e:	2600      	movs	r6, #0
 8006b40:	341a      	adds	r4, #26
 8006b42:	42b5      	cmp	r5, r6
 8006b44:	d11a      	bne.n	8006b7c <_printf_common+0xc8>
 8006b46:	2000      	movs	r0, #0
 8006b48:	e008      	b.n	8006b5c <_printf_common+0xa8>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	4652      	mov	r2, sl
 8006b4e:	4641      	mov	r1, r8
 8006b50:	4638      	mov	r0, r7
 8006b52:	47c8      	blx	r9
 8006b54:	3001      	adds	r0, #1
 8006b56:	d103      	bne.n	8006b60 <_printf_common+0xac>
 8006b58:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b60:	3501      	adds	r5, #1
 8006b62:	e7c6      	b.n	8006af2 <_printf_common+0x3e>
 8006b64:	18e1      	adds	r1, r4, r3
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	2030      	movs	r0, #48	@ 0x30
 8006b6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b6e:	4422      	add	r2, r4
 8006b70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b78:	3302      	adds	r3, #2
 8006b7a:	e7c7      	b.n	8006b0c <_printf_common+0x58>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	4622      	mov	r2, r4
 8006b80:	4641      	mov	r1, r8
 8006b82:	4638      	mov	r0, r7
 8006b84:	47c8      	blx	r9
 8006b86:	3001      	adds	r0, #1
 8006b88:	d0e6      	beq.n	8006b58 <_printf_common+0xa4>
 8006b8a:	3601      	adds	r6, #1
 8006b8c:	e7d9      	b.n	8006b42 <_printf_common+0x8e>
	...

08006b90 <_printf_i>:
 8006b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	7e0f      	ldrb	r7, [r1, #24]
 8006b96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b98:	2f78      	cmp	r7, #120	@ 0x78
 8006b9a:	4691      	mov	r9, r2
 8006b9c:	4680      	mov	r8, r0
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	469a      	mov	sl, r3
 8006ba2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ba6:	d807      	bhi.n	8006bb8 <_printf_i+0x28>
 8006ba8:	2f62      	cmp	r7, #98	@ 0x62
 8006baa:	d80a      	bhi.n	8006bc2 <_printf_i+0x32>
 8006bac:	2f00      	cmp	r7, #0
 8006bae:	f000 80d2 	beq.w	8006d56 <_printf_i+0x1c6>
 8006bb2:	2f58      	cmp	r7, #88	@ 0x58
 8006bb4:	f000 80b9 	beq.w	8006d2a <_printf_i+0x19a>
 8006bb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006bc0:	e03a      	b.n	8006c38 <_printf_i+0xa8>
 8006bc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006bc6:	2b15      	cmp	r3, #21
 8006bc8:	d8f6      	bhi.n	8006bb8 <_printf_i+0x28>
 8006bca:	a101      	add	r1, pc, #4	@ (adr r1, 8006bd0 <_printf_i+0x40>)
 8006bcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bd0:	08006c29 	.word	0x08006c29
 8006bd4:	08006c3d 	.word	0x08006c3d
 8006bd8:	08006bb9 	.word	0x08006bb9
 8006bdc:	08006bb9 	.word	0x08006bb9
 8006be0:	08006bb9 	.word	0x08006bb9
 8006be4:	08006bb9 	.word	0x08006bb9
 8006be8:	08006c3d 	.word	0x08006c3d
 8006bec:	08006bb9 	.word	0x08006bb9
 8006bf0:	08006bb9 	.word	0x08006bb9
 8006bf4:	08006bb9 	.word	0x08006bb9
 8006bf8:	08006bb9 	.word	0x08006bb9
 8006bfc:	08006d3d 	.word	0x08006d3d
 8006c00:	08006c67 	.word	0x08006c67
 8006c04:	08006cf7 	.word	0x08006cf7
 8006c08:	08006bb9 	.word	0x08006bb9
 8006c0c:	08006bb9 	.word	0x08006bb9
 8006c10:	08006d5f 	.word	0x08006d5f
 8006c14:	08006bb9 	.word	0x08006bb9
 8006c18:	08006c67 	.word	0x08006c67
 8006c1c:	08006bb9 	.word	0x08006bb9
 8006c20:	08006bb9 	.word	0x08006bb9
 8006c24:	08006cff 	.word	0x08006cff
 8006c28:	6833      	ldr	r3, [r6, #0]
 8006c2a:	1d1a      	adds	r2, r3, #4
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6032      	str	r2, [r6, #0]
 8006c30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e09d      	b.n	8006d78 <_printf_i+0x1e8>
 8006c3c:	6833      	ldr	r3, [r6, #0]
 8006c3e:	6820      	ldr	r0, [r4, #0]
 8006c40:	1d19      	adds	r1, r3, #4
 8006c42:	6031      	str	r1, [r6, #0]
 8006c44:	0606      	lsls	r6, r0, #24
 8006c46:	d501      	bpl.n	8006c4c <_printf_i+0xbc>
 8006c48:	681d      	ldr	r5, [r3, #0]
 8006c4a:	e003      	b.n	8006c54 <_printf_i+0xc4>
 8006c4c:	0645      	lsls	r5, r0, #25
 8006c4e:	d5fb      	bpl.n	8006c48 <_printf_i+0xb8>
 8006c50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c54:	2d00      	cmp	r5, #0
 8006c56:	da03      	bge.n	8006c60 <_printf_i+0xd0>
 8006c58:	232d      	movs	r3, #45	@ 0x2d
 8006c5a:	426d      	negs	r5, r5
 8006c5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c60:	4859      	ldr	r0, [pc, #356]	@ (8006dc8 <_printf_i+0x238>)
 8006c62:	230a      	movs	r3, #10
 8006c64:	e011      	b.n	8006c8a <_printf_i+0xfa>
 8006c66:	6821      	ldr	r1, [r4, #0]
 8006c68:	6833      	ldr	r3, [r6, #0]
 8006c6a:	0608      	lsls	r0, r1, #24
 8006c6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c70:	d402      	bmi.n	8006c78 <_printf_i+0xe8>
 8006c72:	0649      	lsls	r1, r1, #25
 8006c74:	bf48      	it	mi
 8006c76:	b2ad      	uxthmi	r5, r5
 8006c78:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c7a:	4853      	ldr	r0, [pc, #332]	@ (8006dc8 <_printf_i+0x238>)
 8006c7c:	6033      	str	r3, [r6, #0]
 8006c7e:	bf14      	ite	ne
 8006c80:	230a      	movne	r3, #10
 8006c82:	2308      	moveq	r3, #8
 8006c84:	2100      	movs	r1, #0
 8006c86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c8a:	6866      	ldr	r6, [r4, #4]
 8006c8c:	60a6      	str	r6, [r4, #8]
 8006c8e:	2e00      	cmp	r6, #0
 8006c90:	bfa2      	ittt	ge
 8006c92:	6821      	ldrge	r1, [r4, #0]
 8006c94:	f021 0104 	bicge.w	r1, r1, #4
 8006c98:	6021      	strge	r1, [r4, #0]
 8006c9a:	b90d      	cbnz	r5, 8006ca0 <_printf_i+0x110>
 8006c9c:	2e00      	cmp	r6, #0
 8006c9e:	d04b      	beq.n	8006d38 <_printf_i+0x1a8>
 8006ca0:	4616      	mov	r6, r2
 8006ca2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ca6:	fb03 5711 	mls	r7, r3, r1, r5
 8006caa:	5dc7      	ldrb	r7, [r0, r7]
 8006cac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006cb0:	462f      	mov	r7, r5
 8006cb2:	42bb      	cmp	r3, r7
 8006cb4:	460d      	mov	r5, r1
 8006cb6:	d9f4      	bls.n	8006ca2 <_printf_i+0x112>
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d10b      	bne.n	8006cd4 <_printf_i+0x144>
 8006cbc:	6823      	ldr	r3, [r4, #0]
 8006cbe:	07df      	lsls	r7, r3, #31
 8006cc0:	d508      	bpl.n	8006cd4 <_printf_i+0x144>
 8006cc2:	6923      	ldr	r3, [r4, #16]
 8006cc4:	6861      	ldr	r1, [r4, #4]
 8006cc6:	4299      	cmp	r1, r3
 8006cc8:	bfde      	ittt	le
 8006cca:	2330      	movle	r3, #48	@ 0x30
 8006ccc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006cd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006cd4:	1b92      	subs	r2, r2, r6
 8006cd6:	6122      	str	r2, [r4, #16]
 8006cd8:	f8cd a000 	str.w	sl, [sp]
 8006cdc:	464b      	mov	r3, r9
 8006cde:	aa03      	add	r2, sp, #12
 8006ce0:	4621      	mov	r1, r4
 8006ce2:	4640      	mov	r0, r8
 8006ce4:	f7ff fee6 	bl	8006ab4 <_printf_common>
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d14a      	bne.n	8006d82 <_printf_i+0x1f2>
 8006cec:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf0:	b004      	add	sp, #16
 8006cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	f043 0320 	orr.w	r3, r3, #32
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	4833      	ldr	r0, [pc, #204]	@ (8006dcc <_printf_i+0x23c>)
 8006d00:	2778      	movs	r7, #120	@ 0x78
 8006d02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d06:	6823      	ldr	r3, [r4, #0]
 8006d08:	6831      	ldr	r1, [r6, #0]
 8006d0a:	061f      	lsls	r7, r3, #24
 8006d0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d10:	d402      	bmi.n	8006d18 <_printf_i+0x188>
 8006d12:	065f      	lsls	r7, r3, #25
 8006d14:	bf48      	it	mi
 8006d16:	b2ad      	uxthmi	r5, r5
 8006d18:	6031      	str	r1, [r6, #0]
 8006d1a:	07d9      	lsls	r1, r3, #31
 8006d1c:	bf44      	itt	mi
 8006d1e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d22:	6023      	strmi	r3, [r4, #0]
 8006d24:	b11d      	cbz	r5, 8006d2e <_printf_i+0x19e>
 8006d26:	2310      	movs	r3, #16
 8006d28:	e7ac      	b.n	8006c84 <_printf_i+0xf4>
 8006d2a:	4827      	ldr	r0, [pc, #156]	@ (8006dc8 <_printf_i+0x238>)
 8006d2c:	e7e9      	b.n	8006d02 <_printf_i+0x172>
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	f023 0320 	bic.w	r3, r3, #32
 8006d34:	6023      	str	r3, [r4, #0]
 8006d36:	e7f6      	b.n	8006d26 <_printf_i+0x196>
 8006d38:	4616      	mov	r6, r2
 8006d3a:	e7bd      	b.n	8006cb8 <_printf_i+0x128>
 8006d3c:	6833      	ldr	r3, [r6, #0]
 8006d3e:	6825      	ldr	r5, [r4, #0]
 8006d40:	6961      	ldr	r1, [r4, #20]
 8006d42:	1d18      	adds	r0, r3, #4
 8006d44:	6030      	str	r0, [r6, #0]
 8006d46:	062e      	lsls	r6, r5, #24
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	d501      	bpl.n	8006d50 <_printf_i+0x1c0>
 8006d4c:	6019      	str	r1, [r3, #0]
 8006d4e:	e002      	b.n	8006d56 <_printf_i+0x1c6>
 8006d50:	0668      	lsls	r0, r5, #25
 8006d52:	d5fb      	bpl.n	8006d4c <_printf_i+0x1bc>
 8006d54:	8019      	strh	r1, [r3, #0]
 8006d56:	2300      	movs	r3, #0
 8006d58:	6123      	str	r3, [r4, #16]
 8006d5a:	4616      	mov	r6, r2
 8006d5c:	e7bc      	b.n	8006cd8 <_printf_i+0x148>
 8006d5e:	6833      	ldr	r3, [r6, #0]
 8006d60:	1d1a      	adds	r2, r3, #4
 8006d62:	6032      	str	r2, [r6, #0]
 8006d64:	681e      	ldr	r6, [r3, #0]
 8006d66:	6862      	ldr	r2, [r4, #4]
 8006d68:	2100      	movs	r1, #0
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	f7f9 fa40 	bl	80001f0 <memchr>
 8006d70:	b108      	cbz	r0, 8006d76 <_printf_i+0x1e6>
 8006d72:	1b80      	subs	r0, r0, r6
 8006d74:	6060      	str	r0, [r4, #4]
 8006d76:	6863      	ldr	r3, [r4, #4]
 8006d78:	6123      	str	r3, [r4, #16]
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d80:	e7aa      	b.n	8006cd8 <_printf_i+0x148>
 8006d82:	6923      	ldr	r3, [r4, #16]
 8006d84:	4632      	mov	r2, r6
 8006d86:	4649      	mov	r1, r9
 8006d88:	4640      	mov	r0, r8
 8006d8a:	47d0      	blx	sl
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	d0ad      	beq.n	8006cec <_printf_i+0x15c>
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	079b      	lsls	r3, r3, #30
 8006d94:	d413      	bmi.n	8006dbe <_printf_i+0x22e>
 8006d96:	68e0      	ldr	r0, [r4, #12]
 8006d98:	9b03      	ldr	r3, [sp, #12]
 8006d9a:	4298      	cmp	r0, r3
 8006d9c:	bfb8      	it	lt
 8006d9e:	4618      	movlt	r0, r3
 8006da0:	e7a6      	b.n	8006cf0 <_printf_i+0x160>
 8006da2:	2301      	movs	r3, #1
 8006da4:	4632      	mov	r2, r6
 8006da6:	4649      	mov	r1, r9
 8006da8:	4640      	mov	r0, r8
 8006daa:	47d0      	blx	sl
 8006dac:	3001      	adds	r0, #1
 8006dae:	d09d      	beq.n	8006cec <_printf_i+0x15c>
 8006db0:	3501      	adds	r5, #1
 8006db2:	68e3      	ldr	r3, [r4, #12]
 8006db4:	9903      	ldr	r1, [sp, #12]
 8006db6:	1a5b      	subs	r3, r3, r1
 8006db8:	42ab      	cmp	r3, r5
 8006dba:	dcf2      	bgt.n	8006da2 <_printf_i+0x212>
 8006dbc:	e7eb      	b.n	8006d96 <_printf_i+0x206>
 8006dbe:	2500      	movs	r5, #0
 8006dc0:	f104 0619 	add.w	r6, r4, #25
 8006dc4:	e7f5      	b.n	8006db2 <_printf_i+0x222>
 8006dc6:	bf00      	nop
 8006dc8:	08007212 	.word	0x08007212
 8006dcc:	08007223 	.word	0x08007223

08006dd0 <memmove>:
 8006dd0:	4288      	cmp	r0, r1
 8006dd2:	b510      	push	{r4, lr}
 8006dd4:	eb01 0402 	add.w	r4, r1, r2
 8006dd8:	d902      	bls.n	8006de0 <memmove+0x10>
 8006dda:	4284      	cmp	r4, r0
 8006ddc:	4623      	mov	r3, r4
 8006dde:	d807      	bhi.n	8006df0 <memmove+0x20>
 8006de0:	1e43      	subs	r3, r0, #1
 8006de2:	42a1      	cmp	r1, r4
 8006de4:	d008      	beq.n	8006df8 <memmove+0x28>
 8006de6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006dee:	e7f8      	b.n	8006de2 <memmove+0x12>
 8006df0:	4402      	add	r2, r0
 8006df2:	4601      	mov	r1, r0
 8006df4:	428a      	cmp	r2, r1
 8006df6:	d100      	bne.n	8006dfa <memmove+0x2a>
 8006df8:	bd10      	pop	{r4, pc}
 8006dfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e02:	e7f7      	b.n	8006df4 <memmove+0x24>

08006e04 <_sbrk_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	4d06      	ldr	r5, [pc, #24]	@ (8006e20 <_sbrk_r+0x1c>)
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	602b      	str	r3, [r5, #0]
 8006e10:	f7fb fd90 	bl	8002934 <_sbrk>
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	d102      	bne.n	8006e1e <_sbrk_r+0x1a>
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	b103      	cbz	r3, 8006e1e <_sbrk_r+0x1a>
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	bd38      	pop	{r3, r4, r5, pc}
 8006e20:	2000042c 	.word	0x2000042c

08006e24 <memcpy>:
 8006e24:	440a      	add	r2, r1
 8006e26:	4291      	cmp	r1, r2
 8006e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e2c:	d100      	bne.n	8006e30 <memcpy+0xc>
 8006e2e:	4770      	bx	lr
 8006e30:	b510      	push	{r4, lr}
 8006e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e3a:	4291      	cmp	r1, r2
 8006e3c:	d1f9      	bne.n	8006e32 <memcpy+0xe>
 8006e3e:	bd10      	pop	{r4, pc}

08006e40 <_realloc_r>:
 8006e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e44:	4680      	mov	r8, r0
 8006e46:	4615      	mov	r5, r2
 8006e48:	460c      	mov	r4, r1
 8006e4a:	b921      	cbnz	r1, 8006e56 <_realloc_r+0x16>
 8006e4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e50:	4611      	mov	r1, r2
 8006e52:	f7ff bc4b 	b.w	80066ec <_malloc_r>
 8006e56:	b92a      	cbnz	r2, 8006e64 <_realloc_r+0x24>
 8006e58:	f7ff fbdc 	bl	8006614 <_free_r>
 8006e5c:	2400      	movs	r4, #0
 8006e5e:	4620      	mov	r0, r4
 8006e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e64:	f000 f81a 	bl	8006e9c <_malloc_usable_size_r>
 8006e68:	4285      	cmp	r5, r0
 8006e6a:	4606      	mov	r6, r0
 8006e6c:	d802      	bhi.n	8006e74 <_realloc_r+0x34>
 8006e6e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006e72:	d8f4      	bhi.n	8006e5e <_realloc_r+0x1e>
 8006e74:	4629      	mov	r1, r5
 8006e76:	4640      	mov	r0, r8
 8006e78:	f7ff fc38 	bl	80066ec <_malloc_r>
 8006e7c:	4607      	mov	r7, r0
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	d0ec      	beq.n	8006e5c <_realloc_r+0x1c>
 8006e82:	42b5      	cmp	r5, r6
 8006e84:	462a      	mov	r2, r5
 8006e86:	4621      	mov	r1, r4
 8006e88:	bf28      	it	cs
 8006e8a:	4632      	movcs	r2, r6
 8006e8c:	f7ff ffca 	bl	8006e24 <memcpy>
 8006e90:	4621      	mov	r1, r4
 8006e92:	4640      	mov	r0, r8
 8006e94:	f7ff fbbe 	bl	8006614 <_free_r>
 8006e98:	463c      	mov	r4, r7
 8006e9a:	e7e0      	b.n	8006e5e <_realloc_r+0x1e>

08006e9c <_malloc_usable_size_r>:
 8006e9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ea0:	1f18      	subs	r0, r3, #4
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	bfbc      	itt	lt
 8006ea6:	580b      	ldrlt	r3, [r1, r0]
 8006ea8:	18c0      	addlt	r0, r0, r3
 8006eaa:	4770      	bx	lr

08006eac <_init>:
 8006eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eae:	bf00      	nop
 8006eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eb2:	bc08      	pop	{r3}
 8006eb4:	469e      	mov	lr, r3
 8006eb6:	4770      	bx	lr

08006eb8 <_fini>:
 8006eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eba:	bf00      	nop
 8006ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ebe:	bc08      	pop	{r3}
 8006ec0:	469e      	mov	lr, r3
 8006ec2:	4770      	bx	lr
